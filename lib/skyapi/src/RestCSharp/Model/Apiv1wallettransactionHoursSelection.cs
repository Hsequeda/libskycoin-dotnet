/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.1
 * Contact: contact@skycoin.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = RestCSharp.Client.OpenAPIDateConverter;

namespace RestCSharp.Model
{
    /// <summary>
    /// Apiv1wallettransactionHoursSelection
    /// </summary>
    [DataContract]
    public partial class Apiv1wallettransactionHoursSelection :  IEquatable<Apiv1wallettransactionHoursSelection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Apiv1wallettransactionHoursSelection" /> class.
        /// </summary>
        /// <param name="mode">mode.</param>
        /// <param name="shareFactor">shareFactor.</param>
        /// <param name="type">type.</param>
        public Apiv1wallettransactionHoursSelection(string mode = default(string), string shareFactor = default(string), string type = default(string))
        {
            this.Mode = mode;
            this.ShareFactor = shareFactor;
            this.Type = type;
        }
        
        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or Sets ShareFactor
        /// </summary>
        [DataMember(Name="share_factor", EmitDefaultValue=false)]
        public string ShareFactor { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Apiv1wallettransactionHoursSelection {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  ShareFactor: ").Append(ShareFactor).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Apiv1wallettransactionHoursSelection);
        }

        /// <summary>
        /// Returns true if Apiv1wallettransactionHoursSelection instances are equal
        /// </summary>
        /// <param name="input">Instance of Apiv1wallettransactionHoursSelection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Apiv1wallettransactionHoursSelection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.ShareFactor == input.ShareFactor ||
                    (this.ShareFactor != null &&
                    this.ShareFactor.Equals(input.ShareFactor))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.ShareFactor != null)
                    hashCode = hashCode * 59 + this.ShareFactor.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
