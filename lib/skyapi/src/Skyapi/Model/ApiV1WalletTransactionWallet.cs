/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * The version of the OpenAPI document: 0.25.1
 * Contact: contact@skycoin.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Skyapi.Client.OpenAPIDateConverter;

namespace Skyapi.Model
{
    /// <summary>
    /// ApiV1WalletTransactionWallet
    /// </summary>
    [DataContract]
    public partial class ApiV1WalletTransactionWallet :  IEquatable<ApiV1WalletTransactionWallet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiV1WalletTransactionWallet" /> class.
        /// </summary>
        /// <param name="unspents">unspents.</param>
        /// <param name="addresses">addresses.</param>
        /// <param name="password">password.</param>
        /// <param name="id">id.</param>
        public ApiV1WalletTransactionWallet(List<string> unspents = default(List<string>), List<string> addresses = default(List<string>), string password = default(string), string id = default(string))
        {
            this.Unspents = unspents;
            this.Addresses = addresses;
            this.Password = password;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets Unspents
        /// </summary>
        [DataMember(Name="unspents", EmitDefaultValue=false)]
        public List<string> Unspents { get; set; }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public List<string> Addresses { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiV1WalletTransactionWallet {\n");
            sb.Append("  Unspents: ").Append(Unspents).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiV1WalletTransactionWallet);
        }

        /// <summary>
        /// Returns true if ApiV1WalletTransactionWallet instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiV1WalletTransactionWallet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiV1WalletTransactionWallet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Unspents == input.Unspents ||
                    this.Unspents != null &&
                    input.Unspents != null &&
                    this.Unspents.SequenceEqual(input.Unspents)
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Unspents != null)
                    hashCode = hashCode * 59 + this.Unspents.GetHashCode();
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
