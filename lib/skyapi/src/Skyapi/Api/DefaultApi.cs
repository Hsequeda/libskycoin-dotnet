/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * The version of the OpenAPI document: 0.25.1
 * Contact: contact@skycoin.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Skyapi.Client;
using Skyapi.Model;

namespace Skyapi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the total number of unique address that have coins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object AddressCount ();

        /// <summary>
        /// Returns the total number of unique address that have coins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddressCountWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the historical, spent outputs associated with an address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by</param>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        List<InlineResponse200> AddressUxouts (string address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the historical, spent outputs associated with an address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by</param>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        ApiResponse<List<InlineResponse200>> AddressUxoutsWithHttpInfo (string address);
        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Object</returns>
        Object BalanceGet (string addrs);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BalanceGetWithHttpInfo (string addrs);
        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Object</returns>
        Object BalancePost (string addrs);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BalancePostWithHttpInfo (string addrs);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a block by hash or seq. Note: only one of hash or seq is allowed
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash"> (optional)</param>
        /// <param name="seq"> (optional)</param>
        /// <returns>Object</returns>
        Object Block (string hash = null, int? seq = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a block by hash or seq. Note: only one of hash or seq is allowed
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash"> (optional)</param>
        /// <param name="seq"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockWithHttpInfo (string hash = null, int? seq = null);
        /// <summary>
        /// Returns the blockchain metadata.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object BlockchainMetadata ();

        /// <summary>
        /// Returns the blockchain metadata.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockchainMetadataWithHttpInfo ();
        /// <summary>
        /// Returns the blockchain sync progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object BlockchainProgress ();

        /// <summary>
        /// Returns the blockchain sync progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockchainProgressWithHttpInfo ();
        /// <summary>
        /// blocksHandler returns blocks between a start and end point,
        /// </summary>
        /// <remarks>
        /// or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose.
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Object</returns>
        Object BlocksGet (int? start = null, int? end = null, List<int?> seqs = null);

        /// <summary>
        /// blocksHandler returns blocks between a start and end point,
        /// </summary>
        /// <remarks>
        /// or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose.
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlocksGetWithHttpInfo (int? start = null, int? end = null, List<int?> seqs = null);
        /// <summary>
        /// blocksHandler returns blocks between a start and end point,
        /// </summary>
        /// <remarks>
        /// or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Object</returns>
        Object BlocksPost (int? start = null, int? end = null, List<int?> seqs = null);

        /// <summary>
        /// blocksHandler returns blocks between a start and end point,
        /// </summary>
        /// <remarks>
        /// or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlocksPostWithHttpInfo (int? start = null, int? end = null, List<int?> seqs = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// coinSupplyHandler returns coin distribution supply stats
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object CoinSupply ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// coinSupplyHandler returns coin distribution supply stats
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CoinSupplyWithHttpInfo ();
        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 Csrf ();

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CsrfWithHttpInfo ();
        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> DefaultConnections ();

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> DefaultConnectionsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all transactions (confirmed and unconfirmed) for an address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">tags to filter by (optional)</param>
        /// <returns>List&lt;InlineResponse2002&gt;</returns>
        List<InlineResponse2002> ExplorerAddress (string address = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all transactions (confirmed and unconfirmed) for an address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">tags to filter by (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2002&gt;</returns>
        ApiResponse<List<InlineResponse2002>> ExplorerAddressWithHttpInfo (string address = null);
        /// <summary>
        /// Returns node health data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object Health ();

        /// <summary>
        /// Returns node health data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> HealthWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the most recent N blocks on the blockchain
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="num"></param>
        /// <returns>Object</returns>
        Object LastBlocks (int? num);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the most recent N blocks on the blockchain
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="num"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LastBlocksWithHttpInfo (int? num);
        /// <summary>
        /// This endpoint returns a specific connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 NetworkConnection (string addr);

        /// <summary>
        /// This endpoint returns a specific connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> NetworkConnectionWithHttpInfo (string addr);
        /// <summary>
        /// This endpoint returns all outgoings connections.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>List&lt;InlineResponse2003&gt;</returns>
        List<InlineResponse2003> NetworkConnections (string states = null, string direction = null);

        /// <summary>
        /// This endpoint returns all outgoings connections.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2003&gt;</returns>
        ApiResponse<List<InlineResponse2003>> NetworkConnectionsWithHttpInfo (string states = null, string direction = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint disconnects a connection by ID or address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns></returns>
        void NetworkConnectionsDisconnect (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint disconnects a connection by ID or address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NetworkConnectionsDisconnectWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns all connections found through peer exchange
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> NetworkConnectionsExchange ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns all connections found through peer exchange
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> NetworkConnectionsExchangeWithHttpInfo ();
        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> NetworkConnectionsTrust ();

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> NetworkConnectionsTrustWithHttpInfo ();
        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Object</returns>
        Object OutputsGet (List<string> address = null, List<string> hash = null);

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OutputsGetWithHttpInfo (List<string> address = null, List<string> hash = null);
        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Object</returns>
        Object OutputsPost (string address = null, string hash = null);

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OutputsPostWithHttpInfo (string address = null, string hash = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pending (unconfirmed) transactions without verbose
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse2004&gt;</returns>
        List<InlineResponse2004> PendingTxs ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pending (unconfirmed) transactions without verbose
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse2004&gt;</returns>
        ApiResponse<List<InlineResponse2004>> PendingTxsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ResendUnconfirmedTxns ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResendUnconfirmedTxnsWithHttpInfo ();
        /// <summary>
        /// Returns the top skycoin holders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>Object</returns>
        Object Richlist (bool? includeDistribution = null, string n = null);

        /// <summary>
        /// Returns the top skycoin holders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RichlistWithHttpInfo (bool? includeDistribution = null, string n = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a transaction identi&#x60;fied by its txid hash with just id
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction hash</param>
        /// <param name="encoded">return as a raw encoded transaction. (optional)</param>
        /// <returns>Object</returns>
        Object Transaction (string txid, bool? encoded = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a transaction identi&#x60;fied by its txid hash with just id
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction hash</param>
        /// <param name="encoded">return as a raw encoded transaction. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TransactionWithHttpInfo (string txid, bool? encoded = null);
        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <returns>Object</returns>
        Object TransactionInject (string rawtx);

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TransactionInjectWithHttpInfo (string rawtx);
        /// <summary>
        /// Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id hash (optional)</param>
        /// <returns>Object</returns>
        Object TransactionRaw (string txid = null);

        /// <summary>
        /// Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id hash (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TransactionRawWithHttpInfo (string txid = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Decode and verify an encoded transaction
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object TransactionVerify ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Decode and verify an encoded transaction
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TransactionVerifyWithHttpInfo ();
        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Object</returns>
        Object TransactionsGet (string addrs = null, string confirmed = null);

        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TransactionsGetWithHttpInfo (string addrs = null, string confirmed = null);
        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Object</returns>
        Object TransactionsPost (string addrs = null, string confirmed = null);

        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TransactionsPostWithHttpInfo (string addrs = null, string confirmed = null);
        /// <summary>
        /// Returns an unspent output by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>Object</returns>
        Object Uxout (string uxid = null);

        /// <summary>
        /// Returns an unspent output by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UxoutWithHttpInfo (string uxid = null);
        /// <summary>
        /// Verifies a Skycoin address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 VerifyAddress (string address);

        /// <summary>
        /// Verifies a Skycoin address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> VerifyAddressWithHttpInfo (string address);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// versionHandler returns the application version info
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object Version ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// versionHandler returns the application version info
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> VersionWithHttpInfo ();
        /// <summary>
        /// Returns a wallet by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Object</returns>
        Object Wallet (string id);

        /// <summary>
        /// Returns a wallet by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletWithHttpInfo (string id);
        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Object</returns>
        Object WalletBalance (string id);

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletBalanceWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Object</returns>
        Object WalletCreate (string seed, string label, int? scan = null, bool? encrypt = null, string password = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletCreateWithHttpInfo (string seed, string label, int? scan = null, bool? encrypt = null, string password = null);
        /// <summary>
        /// Decrypts wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Object</returns>
        Object WalletDecrypt (string id, string password);

        /// <summary>
        /// Decrypts wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletDecryptWithHttpInfo (string id, string password);
        /// <summary>
        /// Encrypt wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Object</returns>
        Object WalletEncrypt (string id, string password);

        /// <summary>
        /// Encrypt wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletEncryptWithHttpInfo (string id, string password);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 WalletFolder (string addr);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> WalletFolderWithHttpInfo (string addr);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates new addresses
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Object</returns>
        Object WalletNewAddress (string id, string num = null, string password = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates new addresses
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletNewAddressWithHttpInfo (string id, string num = null, string password = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>Object</returns>
        Object WalletNewSeed (string entropy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletNewSeedWithHttpInfo (string entropy = null);
        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>Object</returns>
        Object WalletRecover (string id, string seed, string password = null);

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletRecoverWithHttpInfo (string id, string seed, string password = null);
        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Object</returns>
        Object WalletSeed (string id, string password);

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletSeedWithHttpInfo (string id, string password);
        /// <summary>
        /// Verifies a wallet seed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Seed to be verified. (optional)</param>
        /// <returns>Object</returns>
        Object WalletSeedVerify (string seed = null);

        /// <summary>
        /// Verifies a wallet seed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Seed to be verified. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletSeedVerifyWithHttpInfo (string seed = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and broadcasts a transaction sending money from one of our wallets to destination address.
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id</param>
        /// <param name="dst">Recipient address</param>
        /// <param name="coins">Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Object</returns>
        Object WalletSpent (string id, string dst, string coins, string password);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and broadcasts a transaction sending money from one of our wallets to destination address.
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id</param>
        /// <param name="dst">Recipient address</param>
        /// <param name="coins">Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletSpentWithHttpInfo (string id, string dst, string coins, string password);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a signed transaction
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object WalletTransaction (InlineObject body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a signed transaction
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletTransactionWithHttpInfo (InlineObject body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns returns all unconfirmed transactions for all addresses in a given wallet verbose
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <returns>Object</returns>
        Object WalletTransactions (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns returns all unconfirmed transactions for all addresses in a given wallet verbose
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletTransactionsWithHttpInfo (string id);
        /// <summary>
        /// Unloads wallet from the wallet service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns></returns>
        void WalletUnload (string id);

        /// <summary>
        /// Unloads wallet from the wallet service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WalletUnloadWithHttpInfo (string id);
        /// <summary>
        /// Update the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns></returns>
        void WalletUpdate (string id, string label);

        /// <summary>
        /// Update the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WalletUpdateWithHttpInfo (string id, string label);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all loaded wallets
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse2005&gt;</returns>
        List<InlineResponse2005> Wallets ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all loaded wallets
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse2005&gt;</returns>
        ApiResponse<List<InlineResponse2005>> WalletsWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns the total number of unique address that have coins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddressCountAsync ();

        /// <summary>
        /// Returns the total number of unique address that have coins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddressCountAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the historical, spent outputs associated with an address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by</param>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse200>> AddressUxoutsAsync (string address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the historical, spent outputs associated with an address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> AddressUxoutsAsyncWithHttpInfo (string address);
        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BalanceGetAsync (string addrs);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BalanceGetAsyncWithHttpInfo (string addrs);
        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BalancePostAsync (string addrs);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BalancePostAsyncWithHttpInfo (string addrs);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a block by hash or seq. Note: only one of hash or seq is allowed
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash"> (optional)</param>
        /// <param name="seq"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockAsync (string hash = null, int? seq = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a block by hash or seq. Note: only one of hash or seq is allowed
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash"> (optional)</param>
        /// <param name="seq"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockAsyncWithHttpInfo (string hash = null, int? seq = null);
        /// <summary>
        /// Returns the blockchain metadata.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockchainMetadataAsync ();

        /// <summary>
        /// Returns the blockchain metadata.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockchainMetadataAsyncWithHttpInfo ();
        /// <summary>
        /// Returns the blockchain sync progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockchainProgressAsync ();

        /// <summary>
        /// Returns the blockchain sync progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockchainProgressAsyncWithHttpInfo ();
        /// <summary>
        /// blocksHandler returns blocks between a start and end point,
        /// </summary>
        /// <remarks>
        /// or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose.
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlocksGetAsync (int? start = null, int? end = null, List<int?> seqs = null);

        /// <summary>
        /// blocksHandler returns blocks between a start and end point,
        /// </summary>
        /// <remarks>
        /// or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose.
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlocksGetAsyncWithHttpInfo (int? start = null, int? end = null, List<int?> seqs = null);
        /// <summary>
        /// blocksHandler returns blocks between a start and end point,
        /// </summary>
        /// <remarks>
        /// or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlocksPostAsync (int? start = null, int? end = null, List<int?> seqs = null);

        /// <summary>
        /// blocksHandler returns blocks between a start and end point,
        /// </summary>
        /// <remarks>
        /// or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlocksPostAsyncWithHttpInfo (int? start = null, int? end = null, List<int?> seqs = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// coinSupplyHandler returns coin distribution supply stats
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CoinSupplyAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// coinSupplyHandler returns coin distribution supply stats
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CoinSupplyAsyncWithHttpInfo ();
        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CsrfAsync ();

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CsrfAsyncWithHttpInfo ();
        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> DefaultConnectionsAsync ();

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> DefaultConnectionsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all transactions (confirmed and unconfirmed) for an address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">tags to filter by (optional)</param>
        /// <returns>Task of List&lt;InlineResponse2002&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2002>> ExplorerAddressAsync (string address = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all transactions (confirmed and unconfirmed) for an address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">tags to filter by (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2002&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2002>>> ExplorerAddressAsyncWithHttpInfo (string address = null);
        /// <summary>
        /// Returns node health data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> HealthAsync ();

        /// <summary>
        /// Returns node health data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HealthAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the most recent N blocks on the blockchain
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="num"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LastBlocksAsync (int? num);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the most recent N blocks on the blockchain
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="num"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LastBlocksAsyncWithHttpInfo (int? num);
        /// <summary>
        /// This endpoint returns a specific connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> NetworkConnectionAsync (string addr);

        /// <summary>
        /// This endpoint returns a specific connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> NetworkConnectionAsyncWithHttpInfo (string addr);
        /// <summary>
        /// This endpoint returns all outgoings connections.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>Task of List&lt;InlineResponse2003&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2003>> NetworkConnectionsAsync (string states = null, string direction = null);

        /// <summary>
        /// This endpoint returns all outgoings connections.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2003&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2003>>> NetworkConnectionsAsyncWithHttpInfo (string states = null, string direction = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint disconnects a connection by ID or address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NetworkConnectionsDisconnectAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint disconnects a connection by ID or address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NetworkConnectionsDisconnectAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns all connections found through peer exchange
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> NetworkConnectionsExchangeAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns all connections found through peer exchange
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> NetworkConnectionsExchangeAsyncWithHttpInfo ();
        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> NetworkConnectionsTrustAsync ();

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> NetworkConnectionsTrustAsyncWithHttpInfo ();
        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OutputsGetAsync (List<string> address = null, List<string> hash = null);

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OutputsGetAsyncWithHttpInfo (List<string> address = null, List<string> hash = null);
        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OutputsPostAsync (string address = null, string hash = null);

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OutputsPostAsyncWithHttpInfo (string address = null, string hash = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pending (unconfirmed) transactions without verbose
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse2004&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2004>> PendingTxsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pending (unconfirmed) transactions without verbose
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2004&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2004>>> PendingTxsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResendUnconfirmedTxnsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResendUnconfirmedTxnsAsyncWithHttpInfo ();
        /// <summary>
        /// Returns the top skycoin holders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RichlistAsync (bool? includeDistribution = null, string n = null);

        /// <summary>
        /// Returns the top skycoin holders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RichlistAsyncWithHttpInfo (bool? includeDistribution = null, string n = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a transaction identi&#x60;fied by its txid hash with just id
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction hash</param>
        /// <param name="encoded">return as a raw encoded transaction. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TransactionAsync (string txid, bool? encoded = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a transaction identi&#x60;fied by its txid hash with just id
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction hash</param>
        /// <param name="encoded">return as a raw encoded transaction. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransactionAsyncWithHttpInfo (string txid, bool? encoded = null);
        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TransactionInjectAsync (string rawtx);

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransactionInjectAsyncWithHttpInfo (string rawtx);
        /// <summary>
        /// Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id hash (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TransactionRawAsync (string txid = null);

        /// <summary>
        /// Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id hash (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransactionRawAsyncWithHttpInfo (string txid = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Decode and verify an encoded transaction
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TransactionVerifyAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Decode and verify an encoded transaction
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransactionVerifyAsyncWithHttpInfo ();
        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TransactionsGetAsync (string addrs = null, string confirmed = null);

        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransactionsGetAsyncWithHttpInfo (string addrs = null, string confirmed = null);
        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TransactionsPostAsync (string addrs = null, string confirmed = null);

        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransactionsPostAsyncWithHttpInfo (string addrs = null, string confirmed = null);
        /// <summary>
        /// Returns an unspent output by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UxoutAsync (string uxid = null);

        /// <summary>
        /// Returns an unspent output by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UxoutAsyncWithHttpInfo (string uxid = null);
        /// <summary>
        /// Verifies a Skycoin address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> VerifyAddressAsync (string address);

        /// <summary>
        /// Verifies a Skycoin address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> VerifyAddressAsyncWithHttpInfo (string address);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// versionHandler returns the application version info
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> VersionAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// versionHandler returns the application version info
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VersionAsyncWithHttpInfo ();
        /// <summary>
        /// Returns a wallet by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletAsync (string id);

        /// <summary>
        /// Returns a wallet by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletAsyncWithHttpInfo (string id);
        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletBalanceAsync (string id);

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletBalanceAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletCreateAsync (string seed, string label, int? scan = null, bool? encrypt = null, string password = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletCreateAsyncWithHttpInfo (string seed, string label, int? scan = null, bool? encrypt = null, string password = null);
        /// <summary>
        /// Decrypts wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletDecryptAsync (string id, string password);

        /// <summary>
        /// Decrypts wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletDecryptAsyncWithHttpInfo (string id, string password);
        /// <summary>
        /// Encrypt wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletEncryptAsync (string id, string password);

        /// <summary>
        /// Encrypt wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletEncryptAsyncWithHttpInfo (string id, string password);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> WalletFolderAsync (string addr);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> WalletFolderAsyncWithHttpInfo (string addr);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates new addresses
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletNewAddressAsync (string id, string num = null, string password = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates new addresses
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletNewAddressAsyncWithHttpInfo (string id, string num = null, string password = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletNewSeedAsync (string entropy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletNewSeedAsyncWithHttpInfo (string entropy = null);
        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletRecoverAsync (string id, string seed, string password = null);

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletRecoverAsyncWithHttpInfo (string id, string seed, string password = null);
        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletSeedAsync (string id, string password);

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletSeedAsyncWithHttpInfo (string id, string password);
        /// <summary>
        /// Verifies a wallet seed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Seed to be verified. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletSeedVerifyAsync (string seed = null);

        /// <summary>
        /// Verifies a wallet seed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Seed to be verified. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletSeedVerifyAsyncWithHttpInfo (string seed = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and broadcasts a transaction sending money from one of our wallets to destination address.
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id</param>
        /// <param name="dst">Recipient address</param>
        /// <param name="coins">Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletSpentAsync (string id, string dst, string coins, string password);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and broadcasts a transaction sending money from one of our wallets to destination address.
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id</param>
        /// <param name="dst">Recipient address</param>
        /// <param name="coins">Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletSpentAsyncWithHttpInfo (string id, string dst, string coins, string password);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a signed transaction
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletTransactionAsync (InlineObject body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a signed transaction
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletTransactionAsyncWithHttpInfo (InlineObject body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns returns all unconfirmed transactions for all addresses in a given wallet verbose
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletTransactionsAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns returns all unconfirmed transactions for all addresses in a given wallet verbose
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletTransactionsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Unloads wallet from the wallet service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WalletUnloadAsync (string id);

        /// <summary>
        /// Unloads wallet from the wallet service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletUnloadAsyncWithHttpInfo (string id);
        /// <summary>
        /// Update the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WalletUpdateAsync (string id, string label);

        /// <summary>
        /// Update the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletUpdateAsyncWithHttpInfo (string id, string label);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all loaded wallets
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse2005&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2005>> WalletsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all loaded wallets
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2005&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2005>>> WalletsAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Skyapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Skyapi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Skyapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = Skyapi.Client.Configuration.Default;

            ExceptionFactory = Skyapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Skyapi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Skyapi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Skyapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Skyapi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Skyapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns the total number of unique address that have coins. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object AddressCount ()
        {
             ApiResponse<Object> localVarResponse = AddressCountWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the total number of unique address that have coins. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddressCountWithHttpInfo ()
        {

            var localVarPath = "/api/v1/addresscount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the total number of unique address that have coins. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddressCountAsync ()
        {
             ApiResponse<Object> localVarResponse = await AddressCountAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the total number of unique address that have coins. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddressCountAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/addresscount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the historical, spent outputs associated with an address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by</param>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        public List<InlineResponse200> AddressUxouts (string address)
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = AddressUxoutsWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the historical, spent outputs associated with an address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by</param>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        public ApiResponse< List<InlineResponse200> > AddressUxoutsWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->AddressUxouts");

            var localVarPath = "/api/v1/address_uxouts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressUxouts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse200>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
        }

        /// <summary>
        ///  Returns the historical, spent outputs associated with an address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by</param>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse200>> AddressUxoutsAsync (string address)
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = await AddressUxoutsAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the historical, spent outputs associated with an address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> AddressUxoutsAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->AddressUxouts");

            var localVarPath = "/api/v1/address_uxouts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressUxouts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse200>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Object</returns>
        public Object BalanceGet (string addrs)
        {
             ApiResponse<Object> localVarResponse = BalanceGetWithHttpInfo(addrs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > BalanceGetWithHttpInfo (string addrs)
        {
            // verify the required parameter 'addrs' is set
            if (addrs == null)
                throw new ApiException(400, "Missing required parameter 'addrs' when calling DefaultApi->BalanceGet");

            var localVarPath = "/api/v1/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BalanceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BalanceGetAsync (string addrs)
        {
             ApiResponse<Object> localVarResponse = await BalanceGetAsyncWithHttpInfo(addrs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BalanceGetAsyncWithHttpInfo (string addrs)
        {
            // verify the required parameter 'addrs' is set
            if (addrs == null)
                throw new ApiException(400, "Missing required parameter 'addrs' when calling DefaultApi->BalanceGet");

            var localVarPath = "/api/v1/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BalanceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Object</returns>
        public Object BalancePost (string addrs)
        {
             ApiResponse<Object> localVarResponse = BalancePostWithHttpInfo(addrs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > BalancePostWithHttpInfo (string addrs)
        {
            // verify the required parameter 'addrs' is set
            if (addrs == null)
                throw new ApiException(400, "Missing required parameter 'addrs' when calling DefaultApi->BalancePost");

            var localVarPath = "/api/v1/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BalancePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BalancePostAsync (string addrs)
        {
             ApiResponse<Object> localVarResponse = await BalancePostAsyncWithHttpInfo(addrs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BalancePostAsyncWithHttpInfo (string addrs)
        {
            // verify the required parameter 'addrs' is set
            if (addrs == null)
                throw new ApiException(400, "Missing required parameter 'addrs' when calling DefaultApi->BalancePost");

            var localVarPath = "/api/v1/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BalancePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns a block by hash or seq. Note: only one of hash or seq is allowed
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash"> (optional)</param>
        /// <param name="seq"> (optional)</param>
        /// <returns>Object</returns>
        public Object Block (string hash = null, int? seq = null)
        {
             ApiResponse<Object> localVarResponse = BlockWithHttpInfo(hash, seq);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a block by hash or seq. Note: only one of hash or seq is allowed
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash"> (optional)</param>
        /// <param name="seq"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > BlockWithHttpInfo (string hash = null, int? seq = null)
        {

            var localVarPath = "/api/v1/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter
            if (seq != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seq", seq)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Block", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns a block by hash or seq. Note: only one of hash or seq is allowed
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash"> (optional)</param>
        /// <param name="seq"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockAsync (string hash = null, int? seq = null)
        {
             ApiResponse<Object> localVarResponse = await BlockAsyncWithHttpInfo(hash, seq);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a block by hash or seq. Note: only one of hash or seq is allowed
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash"> (optional)</param>
        /// <param name="seq"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BlockAsyncWithHttpInfo (string hash = null, int? seq = null)
        {

            var localVarPath = "/api/v1/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter
            if (seq != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seq", seq)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Block", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the blockchain metadata. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object BlockchainMetadata ()
        {
             ApiResponse<Object> localVarResponse = BlockchainMetadataWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the blockchain metadata. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > BlockchainMetadataWithHttpInfo ()
        {

            var localVarPath = "/api/v1/blockchain/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockchainMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the blockchain metadata. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockchainMetadataAsync ()
        {
             ApiResponse<Object> localVarResponse = await BlockchainMetadataAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the blockchain metadata. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BlockchainMetadataAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/blockchain/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockchainMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the blockchain sync progress. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object BlockchainProgress ()
        {
             ApiResponse<Object> localVarResponse = BlockchainProgressWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the blockchain sync progress. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > BlockchainProgressWithHttpInfo ()
        {

            var localVarPath = "/api/v1/blockchain/progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockchainProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the blockchain sync progress. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockchainProgressAsync ()
        {
             ApiResponse<Object> localVarResponse = await BlockchainProgressAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the blockchain sync progress. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BlockchainProgressAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/blockchain/progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockchainProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// blocksHandler returns blocks between a start and end point, or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose.
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Object</returns>
        public Object BlocksGet (int? start = null, int? end = null, List<int?> seqs = null)
        {
             ApiResponse<Object> localVarResponse = BlocksGetWithHttpInfo(start, end, seqs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// blocksHandler returns blocks between a start and end point, or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose.
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > BlocksGetWithHttpInfo (int? start = null, int? end = null, List<int?> seqs = null)
        {

            var localVarPath = "/api/v1/blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (seqs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "seqs", seqs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlocksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// blocksHandler returns blocks between a start and end point, or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose.
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlocksGetAsync (int? start = null, int? end = null, List<int?> seqs = null)
        {
             ApiResponse<Object> localVarResponse = await BlocksGetAsyncWithHttpInfo(start, end, seqs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// blocksHandler returns blocks between a start and end point, or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose.
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BlocksGetAsyncWithHttpInfo (int? start = null, int? end = null, List<int?> seqs = null)
        {

            var localVarPath = "/api/v1/blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (seqs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "seqs", seqs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlocksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// blocksHandler returns blocks between a start and end point, or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Object</returns>
        public Object BlocksPost (int? start = null, int? end = null, List<int?> seqs = null)
        {
             ApiResponse<Object> localVarResponse = BlocksPostWithHttpInfo(start, end, seqs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// blocksHandler returns blocks between a start and end point, or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > BlocksPostWithHttpInfo (int? start = null, int? end = null, List<int?> seqs = null)
        {

            var localVarPath = "/api/v1/blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (seqs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "seqs", seqs)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlocksPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// blocksHandler returns blocks between a start and end point, or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlocksPostAsync (int? start = null, int? end = null, List<int?> seqs = null)
        {
             ApiResponse<Object> localVarResponse = await BlocksPostAsyncWithHttpInfo(start, end, seqs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// blocksHandler returns blocks between a start and end point, or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end. Without verbose
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BlocksPostAsyncWithHttpInfo (int? start = null, int? end = null, List<int?> seqs = null)
        {

            var localVarPath = "/api/v1/blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (seqs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "seqs", seqs)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlocksPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  coinSupplyHandler returns coin distribution supply stats
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object CoinSupply ()
        {
             ApiResponse<Object> localVarResponse = CoinSupplyWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  coinSupplyHandler returns coin distribution supply stats
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CoinSupplyWithHttpInfo ()
        {

            var localVarPath = "/api/v1/coinSupply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CoinSupply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  coinSupplyHandler returns coin distribution supply stats
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CoinSupplyAsync ()
        {
             ApiResponse<Object> localVarResponse = await CoinSupplyAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  coinSupplyHandler returns coin distribution supply stats
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CoinSupplyAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/coinSupply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CoinSupply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 Csrf ()
        {
             ApiResponse<InlineResponse2001> localVarResponse = CsrfWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CsrfWithHttpInfo ()
        {

            var localVarPath = "/api/v1/csrf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Csrf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CsrfAsync ()
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CsrfAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CsrfAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/csrf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Csrf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> DefaultConnections ()
        {
             ApiResponse<List<string>> localVarResponse = DefaultConnectionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > DefaultConnectionsWithHttpInfo ()
        {

            var localVarPath = "/api/v1/network/defaultConnections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DefaultConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> DefaultConnectionsAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await DefaultConnectionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> DefaultConnectionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/network/defaultConnections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DefaultConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Returns all transactions (confirmed and unconfirmed) for an address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">tags to filter by (optional)</param>
        /// <returns>List&lt;InlineResponse2002&gt;</returns>
        public List<InlineResponse2002> ExplorerAddress (string address = null)
        {
             ApiResponse<List<InlineResponse2002>> localVarResponse = ExplorerAddressWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all transactions (confirmed and unconfirmed) for an address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">tags to filter by (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2002&gt;</returns>
        public ApiResponse< List<InlineResponse2002> > ExplorerAddressWithHttpInfo (string address = null)
        {

            var localVarPath = "/api/v1/explorer/address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExplorerAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2002>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2002>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2002>)));
        }

        /// <summary>
        ///  Returns all transactions (confirmed and unconfirmed) for an address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">tags to filter by (optional)</param>
        /// <returns>Task of List&lt;InlineResponse2002&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2002>> ExplorerAddressAsync (string address = null)
        {
             ApiResponse<List<InlineResponse2002>> localVarResponse = await ExplorerAddressAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all transactions (confirmed and unconfirmed) for an address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">tags to filter by (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2002&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2002>>> ExplorerAddressAsyncWithHttpInfo (string address = null)
        {

            var localVarPath = "/api/v1/explorer/address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExplorerAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2002>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2002>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2002>)));
        }

        /// <summary>
        /// Returns node health data. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object Health ()
        {
             ApiResponse<Object> localVarResponse = HealthWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns node health data. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > HealthWithHttpInfo ()
        {

            var localVarPath = "/api/v1/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Health", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns node health data. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> HealthAsync ()
        {
             ApiResponse<Object> localVarResponse = await HealthAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns node health data. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HealthAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Health", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the most recent N blocks on the blockchain
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="num"></param>
        /// <returns>Object</returns>
        public Object LastBlocks (int? num)
        {
             ApiResponse<Object> localVarResponse = LastBlocksWithHttpInfo(num);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the most recent N blocks on the blockchain
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="num"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > LastBlocksWithHttpInfo (int? num)
        {
            // verify the required parameter 'num' is set
            if (num == null)
                throw new ApiException(400, "Missing required parameter 'num' when calling DefaultApi->LastBlocks");

            var localVarPath = "/api/v1/last_blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (num != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "num", num)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LastBlocks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the most recent N blocks on the blockchain
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="num"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LastBlocksAsync (int? num)
        {
             ApiResponse<Object> localVarResponse = await LastBlocksAsyncWithHttpInfo(num);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the most recent N blocks on the blockchain
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="num"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LastBlocksAsyncWithHttpInfo (int? num)
        {
            // verify the required parameter 'num' is set
            if (num == null)
                throw new ApiException(400, "Missing required parameter 'num' when calling DefaultApi->LastBlocks");

            var localVarPath = "/api/v1/last_blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (num != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "num", num)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LastBlocks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This endpoint returns a specific connection. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 NetworkConnection (string addr)
        {
             ApiResponse<InlineResponse2003> localVarResponse = NetworkConnectionWithHttpInfo(addr);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns a specific connection. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > NetworkConnectionWithHttpInfo (string addr)
        {
            // verify the required parameter 'addr' is set
            if (addr == null)
                throw new ApiException(400, "Missing required parameter 'addr' when calling DefaultApi->NetworkConnection");

            var localVarPath = "/api/v1/network/connection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addr != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addr", addr)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// This endpoint returns a specific connection. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> NetworkConnectionAsync (string addr)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await NetworkConnectionAsyncWithHttpInfo(addr);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This endpoint returns a specific connection. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> NetworkConnectionAsyncWithHttpInfo (string addr)
        {
            // verify the required parameter 'addr' is set
            if (addr == null)
                throw new ApiException(400, "Missing required parameter 'addr' when calling DefaultApi->NetworkConnection");

            var localVarPath = "/api/v1/network/connection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addr != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addr", addr)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// This endpoint returns all outgoings connections. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>List&lt;InlineResponse2003&gt;</returns>
        public List<InlineResponse2003> NetworkConnections (string states = null, string direction = null)
        {
             ApiResponse<List<InlineResponse2003>> localVarResponse = NetworkConnectionsWithHttpInfo(states, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns all outgoings connections. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2003&gt;</returns>
        public ApiResponse< List<InlineResponse2003> > NetworkConnectionsWithHttpInfo (string states = null, string direction = null)
        {

            var localVarPath = "/api/v1/network/connections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (states != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "states", states)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2003>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2003>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2003>)));
        }

        /// <summary>
        /// This endpoint returns all outgoings connections. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>Task of List&lt;InlineResponse2003&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2003>> NetworkConnectionsAsync (string states = null, string direction = null)
        {
             ApiResponse<List<InlineResponse2003>> localVarResponse = await NetworkConnectionsAsyncWithHttpInfo(states, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This endpoint returns all outgoings connections. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2003&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2003>>> NetworkConnectionsAsyncWithHttpInfo (string states = null, string direction = null)
        {

            var localVarPath = "/api/v1/network/connections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (states != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "states", states)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2003>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2003>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2003>)));
        }

        /// <summary>
        ///  This endpoint disconnects a connection by ID or address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns></returns>
        public void NetworkConnectionsDisconnect (string id)
        {
             NetworkConnectionsDisconnectWithHttpInfo(id);
        }

        /// <summary>
        ///  This endpoint disconnects a connection by ID or address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NetworkConnectionsDisconnectWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->NetworkConnectionsDisconnect");

            var localVarPath = "/api/v1/network/connection/disconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsDisconnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  This endpoint disconnects a connection by ID or address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NetworkConnectionsDisconnectAsync (string id)
        {
             await NetworkConnectionsDisconnectAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  This endpoint disconnects a connection by ID or address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NetworkConnectionsDisconnectAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->NetworkConnectionsDisconnect");

            var localVarPath = "/api/v1/network/connection/disconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsDisconnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  This endpoint returns all connections found through peer exchange
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> NetworkConnectionsExchange ()
        {
             ApiResponse<List<string>> localVarResponse = NetworkConnectionsExchangeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint returns all connections found through peer exchange
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > NetworkConnectionsExchangeWithHttpInfo ()
        {

            var localVarPath = "/api/v1/network/connections/exchange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsExchange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  This endpoint returns all connections found through peer exchange
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> NetworkConnectionsExchangeAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await NetworkConnectionsExchangeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This endpoint returns all connections found through peer exchange
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> NetworkConnectionsExchangeAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/network/connections/exchange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsExchange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> NetworkConnectionsTrust ()
        {
             ApiResponse<List<string>> localVarResponse = NetworkConnectionsTrustWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > NetworkConnectionsTrustWithHttpInfo ()
        {

            var localVarPath = "/api/v1/network/connections/trust";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsTrust", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> NetworkConnectionsTrustAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await NetworkConnectionsTrustAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> NetworkConnectionsTrustAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/network/connections/trust";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsTrust", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Object</returns>
        public Object OutputsGet (List<string> address = null, List<string> hash = null)
        {
             ApiResponse<Object> localVarResponse = OutputsGetWithHttpInfo(address, hash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > OutputsGetWithHttpInfo (List<string> address = null, List<string> hash = null)
        {

            var localVarPath = "/api/v1/outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "address", address)); // query parameter
            if (hash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "hash", hash)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OutputsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OutputsGetAsync (List<string> address = null, List<string> hash = null)
        {
             ApiResponse<Object> localVarResponse = await OutputsGetAsyncWithHttpInfo(address, hash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OutputsGetAsyncWithHttpInfo (List<string> address = null, List<string> hash = null)
        {

            var localVarPath = "/api/v1/outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "address", address)); // query parameter
            if (hash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "hash", hash)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OutputsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Object</returns>
        public Object OutputsPost (string address = null, string hash = null)
        {
             ApiResponse<Object> localVarResponse = OutputsPostWithHttpInfo(address, hash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > OutputsPostWithHttpInfo (string address = null, string hash = null)
        {

            var localVarPath = "/api/v1/outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (hash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OutputsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OutputsPostAsync (string address = null, string hash = null)
        {
             ApiResponse<Object> localVarResponse = await OutputsPostAsyncWithHttpInfo(address, hash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OutputsPostAsyncWithHttpInfo (string address = null, string hash = null)
        {

            var localVarPath = "/api/v1/outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (hash != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OutputsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns pending (unconfirmed) transactions without verbose
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse2004&gt;</returns>
        public List<InlineResponse2004> PendingTxs ()
        {
             ApiResponse<List<InlineResponse2004>> localVarResponse = PendingTxsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns pending (unconfirmed) transactions without verbose
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse2004&gt;</returns>
        public ApiResponse< List<InlineResponse2004> > PendingTxsWithHttpInfo ()
        {

            var localVarPath = "/api/v1/pendingTxs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PendingTxs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2004>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2004>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2004>)));
        }

        /// <summary>
        ///  Returns pending (unconfirmed) transactions without verbose
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse2004&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2004>> PendingTxsAsync ()
        {
             ApiResponse<List<InlineResponse2004>> localVarResponse = await PendingTxsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns pending (unconfirmed) transactions without verbose
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2004&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2004>>> PendingTxsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/pendingTxs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PendingTxs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2004>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2004>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2004>)));
        }

        /// <summary>
        ///  Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ResendUnconfirmedTxns ()
        {
             ResendUnconfirmedTxnsWithHttpInfo();
        }

        /// <summary>
        ///  Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ResendUnconfirmedTxnsWithHttpInfo ()
        {

            var localVarPath = "/api/v1/resendUnconfirmedTxns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendUnconfirmedTxns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResendUnconfirmedTxnsAsync ()
        {
             await ResendUnconfirmedTxnsAsyncWithHttpInfo();

        }

        /// <summary>
        ///  Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ResendUnconfirmedTxnsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/resendUnconfirmedTxns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendUnconfirmedTxns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns the top skycoin holders. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>Object</returns>
        public Object Richlist (bool? includeDistribution = null, string n = null)
        {
             ApiResponse<Object> localVarResponse = RichlistWithHttpInfo(includeDistribution, n);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the top skycoin holders. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > RichlistWithHttpInfo (bool? includeDistribution = null, string n = null)
        {

            var localVarPath = "/api/v1/richlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeDistribution != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include-distribution", includeDistribution)); // query parameter
            if (n != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Richlist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the top skycoin holders. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RichlistAsync (bool? includeDistribution = null, string n = null)
        {
             ApiResponse<Object> localVarResponse = await RichlistAsyncWithHttpInfo(includeDistribution, n);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the top skycoin holders. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RichlistAsyncWithHttpInfo (bool? includeDistribution = null, string n = null)
        {

            var localVarPath = "/api/v1/richlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeDistribution != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include-distribution", includeDistribution)); // query parameter
            if (n != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Richlist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns a transaction identi&#x60;fied by its txid hash with just id
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction hash</param>
        /// <param name="encoded">return as a raw encoded transaction. (optional)</param>
        /// <returns>Object</returns>
        public Object Transaction (string txid, bool? encoded = null)
        {
             ApiResponse<Object> localVarResponse = TransactionWithHttpInfo(txid, encoded);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a transaction identi&#x60;fied by its txid hash with just id
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction hash</param>
        /// <param name="encoded">return as a raw encoded transaction. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TransactionWithHttpInfo (string txid, bool? encoded = null)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling DefaultApi->Transaction");

            var localVarPath = "/api/v1/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter
            if (encoded != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "encoded", encoded)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns a transaction identi&#x60;fied by its txid hash with just id
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction hash</param>
        /// <param name="encoded">return as a raw encoded transaction. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TransactionAsync (string txid, bool? encoded = null)
        {
             ApiResponse<Object> localVarResponse = await TransactionAsyncWithHttpInfo(txid, encoded);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a transaction identi&#x60;fied by its txid hash with just id
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction hash</param>
        /// <param name="encoded">return as a raw encoded transaction. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransactionAsyncWithHttpInfo (string txid, bool? encoded = null)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling DefaultApi->Transaction");

            var localVarPath = "/api/v1/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter
            if (encoded != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "encoded", encoded)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <returns>Object</returns>
        public Object TransactionInject (string rawtx)
        {
             ApiResponse<Object> localVarResponse = TransactionInjectWithHttpInfo(rawtx);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TransactionInjectWithHttpInfo (string rawtx)
        {
            // verify the required parameter 'rawtx' is set
            if (rawtx == null)
                throw new ApiException(400, "Missing required parameter 'rawtx' when calling DefaultApi->TransactionInject");

            var localVarPath = "/api/v2/transaction/inject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rawtx != null) localVarHeaderParams.Add("rawtx", this.Configuration.ApiClient.ParameterToString(rawtx)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionInject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TransactionInjectAsync (string rawtx)
        {
             ApiResponse<Object> localVarResponse = await TransactionInjectAsyncWithHttpInfo(rawtx);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransactionInjectAsyncWithHttpInfo (string rawtx)
        {
            // verify the required parameter 'rawtx' is set
            if (rawtx == null)
                throw new ApiException(400, "Missing required parameter 'rawtx' when calling DefaultApi->TransactionInject");

            var localVarPath = "/api/v2/transaction/inject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rawtx != null) localVarHeaderParams.Add("rawtx", this.Configuration.ApiClient.ParameterToString(rawtx)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionInject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id hash (optional)</param>
        /// <returns>Object</returns>
        public Object TransactionRaw (string txid = null)
        {
             ApiResponse<Object> localVarResponse = TransactionRawWithHttpInfo(txid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id hash (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TransactionRawWithHttpInfo (string txid = null)
        {

            var localVarPath = "/api/v2/transaction/raw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionRaw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id hash (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TransactionRawAsync (string txid = null)
        {
             ApiResponse<Object> localVarResponse = await TransactionRawAsyncWithHttpInfo(txid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id hash (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransactionRawAsyncWithHttpInfo (string txid = null)
        {

            var localVarPath = "/api/v2/transaction/raw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionRaw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Decode and verify an encoded transaction
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object TransactionVerify ()
        {
             ApiResponse<Object> localVarResponse = TransactionVerifyWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Decode and verify an encoded transaction
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TransactionVerifyWithHttpInfo ()
        {

            var localVarPath = "/api/v2/transaction/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionVerify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Decode and verify an encoded transaction
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TransactionVerifyAsync ()
        {
             ApiResponse<Object> localVarResponse = await TransactionVerifyAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Decode and verify an encoded transaction
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransactionVerifyAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/transaction/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionVerify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Object</returns>
        public Object TransactionsGet (string addrs = null, string confirmed = null)
        {
             ApiResponse<Object> localVarResponse = TransactionsGetWithHttpInfo(addrs, confirmed);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TransactionsGetWithHttpInfo (string addrs = null, string confirmed = null)
        {

            var localVarPath = "/api/v1/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter
            if (confirmed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "confirmed", confirmed)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TransactionsGetAsync (string addrs = null, string confirmed = null)
        {
             ApiResponse<Object> localVarResponse = await TransactionsGetAsyncWithHttpInfo(addrs, confirmed);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransactionsGetAsyncWithHttpInfo (string addrs = null, string confirmed = null)
        {

            var localVarPath = "/api/v1/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter
            if (confirmed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "confirmed", confirmed)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Object</returns>
        public Object TransactionsPost (string addrs = null, string confirmed = null)
        {
             ApiResponse<Object> localVarResponse = TransactionsPostWithHttpInfo(addrs, confirmed);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > TransactionsPostWithHttpInfo (string addrs = null, string confirmed = null)
        {

            var localVarPath = "/api/v1/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter
            if (confirmed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "confirmed", confirmed)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TransactionsPostAsync (string addrs = null, string confirmed = null)
        {
             ApiResponse<Object> localVarResponse = await TransactionsPostAsyncWithHttpInfo(addrs, confirmed);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransactionsPostAsyncWithHttpInfo (string addrs = null, string confirmed = null)
        {

            var localVarPath = "/api/v1/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter
            if (confirmed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "confirmed", confirmed)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns an unspent output by ID. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>Object</returns>
        public Object Uxout (string uxid = null)
        {
             ApiResponse<Object> localVarResponse = UxoutWithHttpInfo(uxid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an unspent output by ID. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UxoutWithHttpInfo (string uxid = null)
        {

            var localVarPath = "/api/v1/uxout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uxid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uxid", uxid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Uxout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns an unspent output by ID. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UxoutAsync (string uxid = null)
        {
             ApiResponse<Object> localVarResponse = await UxoutAsyncWithHttpInfo(uxid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns an unspent output by ID. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UxoutAsyncWithHttpInfo (string uxid = null)
        {

            var localVarPath = "/api/v1/uxout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uxid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uxid", uxid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Uxout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Verifies a Skycoin address. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 VerifyAddress (string address)
        {
             ApiResponse<InlineResponse2007> localVarResponse = VerifyAddressWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verifies a Skycoin address. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse< InlineResponse2007 > VerifyAddressWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->VerifyAddress");

            var localVarPath = "/api/v2/address/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Verifies a Skycoin address. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> VerifyAddressAsync (string address)
        {
             ApiResponse<InlineResponse2007> localVarResponse = await VerifyAddressAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verifies a Skycoin address. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> VerifyAddressAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->VerifyAddress");

            var localVarPath = "/api/v2/address/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        ///  versionHandler returns the application version info
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object Version ()
        {
             ApiResponse<Object> localVarResponse = VersionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  versionHandler returns the application version info
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > VersionWithHttpInfo ()
        {

            var localVarPath = "/api/v1/version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Version", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  versionHandler returns the application version info
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> VersionAsync ()
        {
             ApiResponse<Object> localVarResponse = await VersionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  versionHandler returns the application version info
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VersionAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Version", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns a wallet by id. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Object</returns>
        public Object Wallet (string id)
        {
             ApiResponse<Object> localVarResponse = WalletWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a wallet by id. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > WalletWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->Wallet");

            var localVarPath = "/api/v1/wallet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Wallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns a wallet by id. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletAsync (string id)
        {
             ApiResponse<Object> localVarResponse = await WalletAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a wallet by id. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->Wallet");

            var localVarPath = "/api/v1/wallet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Wallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Object</returns>
        public Object WalletBalance (string id)
        {
             ApiResponse<Object> localVarResponse = WalletBalanceWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > WalletBalanceWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletBalance");

            var localVarPath = "/api/v1/wallet/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletBalanceAsync (string id)
        {
             ApiResponse<Object> localVarResponse = await WalletBalanceAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletBalanceAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletBalance");

            var localVarPath = "/api/v1/wallet/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Object</returns>
        public Object WalletCreate (string seed, string label, int? scan = null, bool? encrypt = null, string password = null)
        {
             ApiResponse<Object> localVarResponse = WalletCreateWithHttpInfo(seed, label, scan, encrypt, password);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > WalletCreateWithHttpInfo (string seed, string label, int? scan = null, bool? encrypt = null, string password = null)
        {
            // verify the required parameter 'seed' is set
            if (seed == null)
                throw new ApiException(400, "Missing required parameter 'seed' when calling DefaultApi->WalletCreate");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling DefaultApi->WalletCreate");

            var localVarPath = "/api/v1/wallet/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (seed != null) localVarHeaderParams.Add("seed", this.Configuration.ApiClient.ParameterToString(seed)); // header parameter
            if (label != null) localVarHeaderParams.Add("label", this.Configuration.ApiClient.ParameterToString(label)); // header parameter
            if (scan != null) localVarHeaderParams.Add("scan", this.Configuration.ApiClient.ParameterToString(scan)); // header parameter
            if (encrypt != null) localVarHeaderParams.Add("encrypt", this.Configuration.ApiClient.ParameterToString(encrypt)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletCreateAsync (string seed, string label, int? scan = null, bool? encrypt = null, string password = null)
        {
             ApiResponse<Object> localVarResponse = await WalletCreateAsyncWithHttpInfo(seed, label, scan, encrypt, password);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletCreateAsyncWithHttpInfo (string seed, string label, int? scan = null, bool? encrypt = null, string password = null)
        {
            // verify the required parameter 'seed' is set
            if (seed == null)
                throw new ApiException(400, "Missing required parameter 'seed' when calling DefaultApi->WalletCreate");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling DefaultApi->WalletCreate");

            var localVarPath = "/api/v1/wallet/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (seed != null) localVarHeaderParams.Add("seed", this.Configuration.ApiClient.ParameterToString(seed)); // header parameter
            if (label != null) localVarHeaderParams.Add("label", this.Configuration.ApiClient.ParameterToString(label)); // header parameter
            if (scan != null) localVarHeaderParams.Add("scan", this.Configuration.ApiClient.ParameterToString(scan)); // header parameter
            if (encrypt != null) localVarHeaderParams.Add("encrypt", this.Configuration.ApiClient.ParameterToString(encrypt)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Decrypts wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Object</returns>
        public Object WalletDecrypt (string id, string password)
        {
             ApiResponse<Object> localVarResponse = WalletDecryptWithHttpInfo(id, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Decrypts wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > WalletDecryptWithHttpInfo (string id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletDecrypt");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->WalletDecrypt");

            var localVarPath = "/api/v1/wallet/decrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletDecrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Decrypts wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletDecryptAsync (string id, string password)
        {
             ApiResponse<Object> localVarResponse = await WalletDecryptAsyncWithHttpInfo(id, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Decrypts wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletDecryptAsyncWithHttpInfo (string id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletDecrypt");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->WalletDecrypt");

            var localVarPath = "/api/v1/wallet/decrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletDecrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Encrypt wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Object</returns>
        public Object WalletEncrypt (string id, string password)
        {
             ApiResponse<Object> localVarResponse = WalletEncryptWithHttpInfo(id, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Encrypt wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > WalletEncryptWithHttpInfo (string id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletEncrypt");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->WalletEncrypt");

            var localVarPath = "/api/v1/wallet/encrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletEncrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Encrypt wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletEncryptAsync (string id, string password)
        {
             ApiResponse<Object> localVarResponse = await WalletEncryptAsyncWithHttpInfo(id, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Encrypt wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletEncryptAsyncWithHttpInfo (string id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletEncrypt");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->WalletEncrypt");

            var localVarPath = "/api/v1/wallet/encrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletEncrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 WalletFolder (string addr)
        {
             ApiResponse<InlineResponse2006> localVarResponse = WalletFolderWithHttpInfo(addr);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > WalletFolderWithHttpInfo (string addr)
        {
            // verify the required parameter 'addr' is set
            if (addr == null)
                throw new ApiException(400, "Missing required parameter 'addr' when calling DefaultApi->WalletFolder");

            var localVarPath = "/api/v1/wallets/folderName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addr != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addr", addr)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> WalletFolderAsync (string addr)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await WalletFolderAsyncWithHttpInfo(addr);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> WalletFolderAsyncWithHttpInfo (string addr)
        {
            // verify the required parameter 'addr' is set
            if (addr == null)
                throw new ApiException(400, "Missing required parameter 'addr' when calling DefaultApi->WalletFolder");

            var localVarPath = "/api/v1/wallets/folderName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addr != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addr", addr)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Generates new addresses
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Object</returns>
        public Object WalletNewAddress (string id, string num = null, string password = null)
        {
             ApiResponse<Object> localVarResponse = WalletNewAddressWithHttpInfo(id, num, password);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Generates new addresses
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > WalletNewAddressWithHttpInfo (string id, string num = null, string password = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletNewAddress");

            var localVarPath = "/api/v1/wallet/newAddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (num != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "num", num)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletNewAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Generates new addresses
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletNewAddressAsync (string id, string num = null, string password = null)
        {
             ApiResponse<Object> localVarResponse = await WalletNewAddressAsyncWithHttpInfo(id, num, password);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Generates new addresses
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletNewAddressAsyncWithHttpInfo (string id, string num = null, string password = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletNewAddress");

            var localVarPath = "/api/v1/wallet/newAddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (num != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "num", num)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletNewAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>Object</returns>
        public Object WalletNewSeed (string entropy = null)
        {
             ApiResponse<Object> localVarResponse = WalletNewSeedWithHttpInfo(entropy);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > WalletNewSeedWithHttpInfo (string entropy = null)
        {

            var localVarPath = "/api/v1/wallet/newSeed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entropy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entropy", entropy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletNewSeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletNewSeedAsync (string entropy = null)
        {
             ApiResponse<Object> localVarResponse = await WalletNewSeedAsyncWithHttpInfo(entropy);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletNewSeedAsyncWithHttpInfo (string entropy = null)
        {

            var localVarPath = "/api/v1/wallet/newSeed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entropy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entropy", entropy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletNewSeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>Object</returns>
        public Object WalletRecover (string id, string seed, string password = null)
        {
             ApiResponse<Object> localVarResponse = WalletRecoverWithHttpInfo(id, seed, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > WalletRecoverWithHttpInfo (string id, string seed, string password = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletRecover");
            // verify the required parameter 'seed' is set
            if (seed == null)
                throw new ApiException(400, "Missing required parameter 'seed' when calling DefaultApi->WalletRecover");

            var localVarPath = "/api/v2/wallet/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (seed != null) localVarHeaderParams.Add("seed", this.Configuration.ApiClient.ParameterToString(seed)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletRecover", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletRecoverAsync (string id, string seed, string password = null)
        {
             ApiResponse<Object> localVarResponse = await WalletRecoverAsyncWithHttpInfo(id, seed, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletRecoverAsyncWithHttpInfo (string id, string seed, string password = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletRecover");
            // verify the required parameter 'seed' is set
            if (seed == null)
                throw new ApiException(400, "Missing required parameter 'seed' when calling DefaultApi->WalletRecover");

            var localVarPath = "/api/v2/wallet/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (seed != null) localVarHeaderParams.Add("seed", this.Configuration.ApiClient.ParameterToString(seed)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletRecover", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Object</returns>
        public Object WalletSeed (string id, string password)
        {
             ApiResponse<Object> localVarResponse = WalletSeedWithHttpInfo(id, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > WalletSeedWithHttpInfo (string id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletSeed");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->WalletSeed");

            var localVarPath = "/api/v1/wallet/seed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletSeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletSeedAsync (string id, string password)
        {
             ApiResponse<Object> localVarResponse = await WalletSeedAsyncWithHttpInfo(id, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletSeedAsyncWithHttpInfo (string id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletSeed");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->WalletSeed");

            var localVarPath = "/api/v1/wallet/seed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletSeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Verifies a wallet seed. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Seed to be verified. (optional)</param>
        /// <returns>Object</returns>
        public Object WalletSeedVerify (string seed = null)
        {
             ApiResponse<Object> localVarResponse = WalletSeedVerifyWithHttpInfo(seed);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verifies a wallet seed. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Seed to be verified. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > WalletSeedVerifyWithHttpInfo (string seed = null)
        {

            var localVarPath = "/api/v2/wallet/seed/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (seed != null) localVarHeaderParams.Add("seed", this.Configuration.ApiClient.ParameterToString(seed)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletSeedVerify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Verifies a wallet seed. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Seed to be verified. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletSeedVerifyAsync (string seed = null)
        {
             ApiResponse<Object> localVarResponse = await WalletSeedVerifyAsyncWithHttpInfo(seed);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verifies a wallet seed. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Seed to be verified. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletSeedVerifyAsyncWithHttpInfo (string seed = null)
        {

            var localVarPath = "/api/v2/wallet/seed/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (seed != null) localVarHeaderParams.Add("seed", this.Configuration.ApiClient.ParameterToString(seed)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletSeedVerify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Creates and broadcasts a transaction sending money from one of our wallets to destination address.
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id</param>
        /// <param name="dst">Recipient address</param>
        /// <param name="coins">Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Object</returns>
        public Object WalletSpent (string id, string dst, string coins, string password)
        {
             ApiResponse<Object> localVarResponse = WalletSpentWithHttpInfo(id, dst, coins, password);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates and broadcasts a transaction sending money from one of our wallets to destination address.
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id</param>
        /// <param name="dst">Recipient address</param>
        /// <param name="coins">Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > WalletSpentWithHttpInfo (string id, string dst, string coins, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletSpent");
            // verify the required parameter 'dst' is set
            if (dst == null)
                throw new ApiException(400, "Missing required parameter 'dst' when calling DefaultApi->WalletSpent");
            // verify the required parameter 'coins' is set
            if (coins == null)
                throw new ApiException(400, "Missing required parameter 'coins' when calling DefaultApi->WalletSpent");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->WalletSpent");

            var localVarPath = "/api/v1/wallet/spend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (dst != null) localVarHeaderParams.Add("dst", this.Configuration.ApiClient.ParameterToString(dst)); // header parameter
            if (coins != null) localVarHeaderParams.Add("coins", this.Configuration.ApiClient.ParameterToString(coins)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletSpent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Creates and broadcasts a transaction sending money from one of our wallets to destination address.
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id</param>
        /// <param name="dst">Recipient address</param>
        /// <param name="coins">Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletSpentAsync (string id, string dst, string coins, string password)
        {
             ApiResponse<Object> localVarResponse = await WalletSpentAsyncWithHttpInfo(id, dst, coins, password);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates and broadcasts a transaction sending money from one of our wallets to destination address.
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id</param>
        /// <param name="dst">Recipient address</param>
        /// <param name="coins">Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletSpentAsyncWithHttpInfo (string id, string dst, string coins, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletSpent");
            // verify the required parameter 'dst' is set
            if (dst == null)
                throw new ApiException(400, "Missing required parameter 'dst' when calling DefaultApi->WalletSpent");
            // verify the required parameter 'coins' is set
            if (coins == null)
                throw new ApiException(400, "Missing required parameter 'coins' when calling DefaultApi->WalletSpent");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->WalletSpent");

            var localVarPath = "/api/v1/wallet/spend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (dst != null) localVarHeaderParams.Add("dst", this.Configuration.ApiClient.ParameterToString(dst)); // header parameter
            if (coins != null) localVarHeaderParams.Add("coins", this.Configuration.ApiClient.ParameterToString(coins)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletSpent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Creates a signed transaction
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object WalletTransaction (InlineObject body)
        {
             ApiResponse<Object> localVarResponse = WalletTransactionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a signed transaction
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > WalletTransactionWithHttpInfo (InlineObject body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->WalletTransaction");

            var localVarPath = "/api/v1/wallet/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Creates a signed transaction
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletTransactionAsync (InlineObject body)
        {
             ApiResponse<Object> localVarResponse = await WalletTransactionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates a signed transaction
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletTransactionAsyncWithHttpInfo (InlineObject body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->WalletTransaction");

            var localVarPath = "/api/v1/wallet/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns returns all unconfirmed transactions for all addresses in a given wallet verbose
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <returns>Object</returns>
        public Object WalletTransactions (string id)
        {
             ApiResponse<Object> localVarResponse = WalletTransactionsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns returns all unconfirmed transactions for all addresses in a given wallet verbose
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > WalletTransactionsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletTransactions");

            var localVarPath = "/api/v1/wallet/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns returns all unconfirmed transactions for all addresses in a given wallet verbose
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletTransactionsAsync (string id)
        {
             ApiResponse<Object> localVarResponse = await WalletTransactionsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns returns all unconfirmed transactions for all addresses in a given wallet verbose
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletTransactionsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletTransactions");

            var localVarPath = "/api/v1/wallet/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Unloads wallet from the wallet service. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns></returns>
        public void WalletUnload (string id)
        {
             WalletUnloadWithHttpInfo(id);
        }

        /// <summary>
        /// Unloads wallet from the wallet service. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WalletUnloadWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletUnload");

            var localVarPath = "/api/v1/wallet/unload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletUnload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unloads wallet from the wallet service. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WalletUnloadAsync (string id)
        {
             await WalletUnloadAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Unloads wallet from the wallet service. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletUnloadAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletUnload");

            var localVarPath = "/api/v1/wallet/unload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletUnload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns></returns>
        public void WalletUpdate (string id, string label)
        {
             WalletUpdateWithHttpInfo(id, label);
        }

        /// <summary>
        /// Update the wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WalletUpdateWithHttpInfo (string id, string label)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletUpdate");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling DefaultApi->WalletUpdate");

            var localVarPath = "/api/v1/wallet/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (label != null) localVarHeaderParams.Add("label", this.Configuration.ApiClient.ParameterToString(label)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WalletUpdateAsync (string id, string label)
        {
             await WalletUpdateAsyncWithHttpInfo(id, label);

        }

        /// <summary>
        /// Update the wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletUpdateAsyncWithHttpInfo (string id, string label)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletUpdate");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling DefaultApi->WalletUpdate");

            var localVarPath = "/api/v1/wallet/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (label != null) localVarHeaderParams.Add("label", this.Configuration.ApiClient.ParameterToString(label)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns all loaded wallets
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse2005&gt;</returns>
        public List<InlineResponse2005> Wallets ()
        {
             ApiResponse<List<InlineResponse2005>> localVarResponse = WalletsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all loaded wallets
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse2005&gt;</returns>
        public ApiResponse< List<InlineResponse2005> > WalletsWithHttpInfo ()
        {

            var localVarPath = "/api/v1/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Wallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2005>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2005>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2005>)));
        }

        /// <summary>
        ///  Returns all loaded wallets
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse2005&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2005>> WalletsAsync ()
        {
             ApiResponse<List<InlineResponse2005>> localVarResponse = await WalletsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all loaded wallets
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2005&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2005>>> WalletsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Wallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2005>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2005>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2005>)));
        }

    }
}
