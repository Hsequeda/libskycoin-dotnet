//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace skycoin {

public class cipher__BitcoinAddress : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal cipher__BitcoinAddress(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(cipher__BitcoinAddress obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~cipher__BitcoinAddress() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          skycoinPINVOKE.delete_cipher__BitcoinAddress(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public int isEqual(cipher__BitcoinAddress a) {
    int ret = skycoinPINVOKE.cipher__BitcoinAddress_isEqual(swigCPtr, cipher__BitcoinAddress.getCPtr(a));
    return ret;
  }

  public byte Version {
    set {
      skycoinPINVOKE.cipher__BitcoinAddress_Version_set(swigCPtr, value);
    } 
    get {
      byte ret = skycoinPINVOKE.cipher__BitcoinAddress_Version_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_GoUint8_ Key {
    set {
      skycoinPINVOKE.cipher__BitcoinAddress_Key_set(swigCPtr, SWIGTYPE_p_GoUint8_.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = skycoinPINVOKE.cipher__BitcoinAddress_Key_get(swigCPtr);
      SWIGTYPE_p_GoUint8_ ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GoUint8_(cPtr, false);
      return ret;
    } 
  }

  public cipher__BitcoinAddress() : this(skycoinPINVOKE.new_cipher__BitcoinAddress(), true) {
  }

}

}
