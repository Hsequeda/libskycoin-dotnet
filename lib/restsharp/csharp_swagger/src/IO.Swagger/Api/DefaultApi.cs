/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: skycoin.doe@example.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns the total number of unique address that have coins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 AddressCount ();

        /// <summary>
        /// Returns the total number of unique address that have coins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> AddressCountWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the historical, spent outputs associated with an address
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by (optional)</param>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        List<InlineResponse200> AddressUxouts (string address = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the historical, spent outputs associated with an address
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        ApiResponse<List<InlineResponse200>> AddressUxoutsWithHttpInfo (string address = null);
        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 BalanceGet (string addrs);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> BalanceGetWithHttpInfo (string addrs);
        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 BalancePost (string addrs);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> BalancePostWithHttpInfo (string addrs);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a block by hash or seq. Note: only one of hash or seq is allowed
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="hash"> (optional)</param>
        /// <param name="seq"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 Block (bool? verbose = null, string hash = null, int? seq = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a block by hash or seq. Note: only one of hash or seq is allowed
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="hash"> (optional)</param>
        /// <param name="seq"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> BlockWithHttpInfo (bool? verbose = null, string hash = null, int? seq = null);
        /// <summary>
        /// Returns the blockchain metadata.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 BlockchainMetadata ();

        /// <summary>
        /// Returns the blockchain metadata.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> BlockchainMetadataWithHttpInfo ();
        /// <summary>
        /// Returns the blockchain sync progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 BlockchainProgress ();

        /// <summary>
        /// Returns the blockchain sync progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> BlockchainProgressWithHttpInfo ();
        /// <summary>
        /// blocksHandler returns blocks between a start and end point,
        /// </summary>
        /// <remarks>
        /// or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 BlocksGet (bool? verbose = null, int? start = null, int? end = null, string seqs = null);

        /// <summary>
        /// blocksHandler returns blocks between a start and end point,
        /// </summary>
        /// <remarks>
        /// or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> BlocksGetWithHttpInfo (bool? verbose = null, int? start = null, int? end = null, string seqs = null);
        /// <summary>
        /// blocksHandler returns blocks between a start and end point,
        /// </summary>
        /// <remarks>
        /// or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 BlocksPost (bool? verbose = null, int? start = null, int? end = null, string seqs = null);

        /// <summary>
        /// blocksHandler returns blocks between a start and end point,
        /// </summary>
        /// <remarks>
        /// or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> BlocksPostWithHttpInfo (bool? verbose = null, int? start = null, int? end = null, string seqs = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// coinSupplyHandler returns coin distribution supply stats
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void CoinSupply ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// coinSupplyHandler returns coin distribution supply stats
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CoinSupplyWithHttpInfo ();
        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 Csrf ();

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> CsrfWithHttpInfo ();
        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> DefaultConnections ();

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> DefaultConnectionsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all transactions (confirmed and unconfirmed) for an address
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">tags to filter by (optional)</param>
        /// <returns>List&lt;InlineResponse2008&gt;</returns>
        List<InlineResponse2008> ExplorerAddress (string address = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all transactions (confirmed and unconfirmed) for an address
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">tags to filter by (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2008&gt;</returns>
        ApiResponse<List<InlineResponse2008>> ExplorerAddressWithHttpInfo (string address = null);
        /// <summary>
        /// Returns node health data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 Health ();

        /// <summary>
        /// Returns node health data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> HealthWithHttpInfo ();
        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <returns></returns>
        void InjectTransaction (string rawtx);

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InjectTransactionWithHttpInfo (string rawtx);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the most recent N blocks on the blockchain
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="num"> (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 LastBlocks (bool? verbose = null, int? num = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the most recent N blocks on the blockchain
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="num"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> LastBlocksWithHttpInfo (bool? verbose = null, int? num = null);
        /// <summary>
        /// This endpoint returns a specific connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 NetworkConnection (string addr);

        /// <summary>
        /// This endpoint returns a specific connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> NetworkConnectionWithHttpInfo (string addr);
        /// <summary>
        /// This endpoint returns all outgoings connections.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>List&lt;InlineResponse20010&gt;</returns>
        List<InlineResponse20010> NetworkConnections (string states = null, string direction = null);

        /// <summary>
        /// This endpoint returns all outgoings connections.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20010&gt;</returns>
        ApiResponse<List<InlineResponse20010>> NetworkConnectionsWithHttpInfo (string states = null, string direction = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint disconnects a connection by ID or address
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns></returns>
        void NetworkConnectionsDisconnect (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint disconnects a connection by ID or address
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NetworkConnectionsDisconnectWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns all connections found through peer exchange
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> NetworkConnectionsExchange ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns all connections found through peer exchange
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> NetworkConnectionsExchangeWithHttpInfo ();
        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> NetworkConnectionsTrust ();

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> NetworkConnectionsTrustWithHttpInfo ();
        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="hash"></param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 OutputsGet (string address, string hash);

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="hash"></param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> OutputsGetWithHttpInfo (string address, string hash);
        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="hash"></param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 OutputsPost (string address, string hash);

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="hash"></param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> OutputsPostWithHttpInfo (string address, string hash);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pending (unconfirmed) transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>List&lt;InlineResponse20012&gt;</returns>
        List<InlineResponse20012> PendingTxs (bool? verbose = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pending (unconfirmed) transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20012&gt;</returns>
        ApiResponse<List<InlineResponse20012>> PendingTxsWithHttpInfo (bool? verbose = null);
        /// <summary>
        /// Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id hash (optional)</param>
        /// <returns></returns>
        void Rawtx (string txid = null);

        /// <summary>
        /// Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id hash (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RawtxWithHttpInfo (string txid = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ResendUnconfirmedTxns ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResendUnconfirmedTxnsWithHttpInfo ();
        /// <summary>
        /// Returns the top skycoin holders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 Richlist (string includeDistribution = null, string n = null);

        /// <summary>
        /// Returns the top skycoin holders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> RichlistWithHttpInfo (string includeDistribution = null, string n = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a transaction identified by its txid hash
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction hash</param>
        /// <param name="encoded">return as a raw encoded transaction. (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 Transaction (string txid, bool? encoded = null, bool? verbose = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a transaction identified by its txid hash
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction hash</param>
        /// <param name="encoded">return as a raw encoded transaction. (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> TransactionWithHttpInfo (string txid, bool? encoded = null, bool? verbose = null);
        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>List&lt;InlineResponse20014&gt;</returns>
        List<InlineResponse20014> TransactionsGet (string addrs = null, string confirmed = null, bool? verbose = null);

        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20014&gt;</returns>
        ApiResponse<List<InlineResponse20014>> TransactionsGetWithHttpInfo (string addrs = null, string confirmed = null, bool? verbose = null);
        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>List&lt;InlineResponse20014&gt;</returns>
        List<InlineResponse20014> TransactionsPost (string addrs = null, string confirmed = null, bool? verbose = null);

        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20014&gt;</returns>
        ApiResponse<List<InlineResponse20014>> TransactionsPostWithHttpInfo (string addrs = null, string confirmed = null, bool? verbose = null);
        /// <summary>
        /// Returns an unspent output by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 Uxout (string uxid = null);

        /// <summary>
        /// Returns an unspent output by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> UxoutWithHttpInfo (string uxid = null);
        /// <summary>
        /// healthHandler returns node health data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 VerifyAddress (string address);

        /// <summary>
        /// healthHandler returns node health data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> VerifyAddressWithHttpInfo (string address);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// versionHandler returns the application version info
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Version ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// versionHandler returns the application version info
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VersionWithHttpInfo ();
        /// <summary>
        /// Returns a wallet by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by (optional)</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 Wallet (string id = null);

        /// <summary>
        /// Returns a wallet by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> WalletWithHttpInfo (string id = null);
        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 WalletBalance (string id);

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> WalletBalanceWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 WalletCreate (string seed, string label, int? scan = null, bool? encrypt = null, string password = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> WalletCreateWithHttpInfo (string seed, string label, int? scan = null, bool? encrypt = null, string password = null);
        /// <summary>
        /// Decrypts wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 WalletDecrypt (string id, string password);

        /// <summary>
        /// Decrypts wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> WalletDecryptWithHttpInfo (string id, string password);
        /// <summary>
        /// Encrypt wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 WalletEncrypt (string id, string password);

        /// <summary>
        /// Encrypt wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> WalletEncryptWithHttpInfo (string id, string password);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 WalletFolder (string addr);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> WalletFolderWithHttpInfo (string addr);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates new addresses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 WalletNewAddress (string id, string num = null, string password = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates new addresses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> WalletNewAddressWithHttpInfo (string id, string num = null, string password = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 WalletNewSeed (string entropy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> WalletNewSeedWithHttpInfo (string entropy = null);
        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>InlineResponse20023</returns>
        InlineResponse20023 WalletRecover (string id, string seed, string password = null);

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        ApiResponse<InlineResponse20023> WalletRecoverWithHttpInfo (string id, string seed, string password = null);
        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 WalletSeed (string id, string password);

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> WalletSeedWithHttpInfo (string id, string password);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and broadcasts a transaction sending money from one of our wallets to destination address.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id</param>
        /// <param name="dst">Recipient address</param>
        /// <param name="coins">Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 WalletSpent (string id, string dst, string coins, string password);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and broadcasts a transaction sending money from one of our wallets to destination address.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id</param>
        /// <param name="dst">Recipient address</param>
        /// <param name="coins">Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> WalletSpentWithHttpInfo (string id, string dst, string coins, string password);
        /// <summary>
        /// Returns returns all unconfirmed transactions for all addresses in a given wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 WalletTransactions (string id, bool? verbose = null);

        /// <summary>
        /// Returns returns all unconfirmed transactions for all addresses in a given wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> WalletTransactionsWithHttpInfo (string id, bool? verbose = null);
        /// <summary>
        /// Unloads wallet from the wallet service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns></returns>
        void WalletUnload (string id);

        /// <summary>
        /// Unloads wallet from the wallet service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WalletUnloadWithHttpInfo (string id);
        /// <summary>
        /// Update the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns></returns>
        void WalletUpdate (string id, string label);

        /// <summary>
        /// Update the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WalletUpdateWithHttpInfo (string id, string label);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all loaded wallets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20020&gt;</returns>
        List<InlineResponse20020> Wallets ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all loaded wallets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20020&gt;</returns>
        ApiResponse<List<InlineResponse20020>> WalletsWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns the total number of unique address that have coins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> AddressCountAsync ();

        /// <summary>
        /// Returns the total number of unique address that have coins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> AddressCountAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the historical, spent outputs associated with an address
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by (optional)</param>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse200>> AddressUxoutsAsync (string address = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the historical, spent outputs associated with an address
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> AddressUxoutsAsyncWithHttpInfo (string address = null);
        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> BalanceGetAsync (string addrs);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> BalanceGetAsyncWithHttpInfo (string addrs);
        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> BalancePostAsync (string addrs);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> BalancePostAsyncWithHttpInfo (string addrs);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a block by hash or seq. Note: only one of hash or seq is allowed
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="hash"> (optional)</param>
        /// <param name="seq"> (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> BlockAsync (bool? verbose = null, string hash = null, int? seq = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a block by hash or seq. Note: only one of hash or seq is allowed
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="hash"> (optional)</param>
        /// <param name="seq"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> BlockAsyncWithHttpInfo (bool? verbose = null, string hash = null, int? seq = null);
        /// <summary>
        /// Returns the blockchain metadata.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> BlockchainMetadataAsync ();

        /// <summary>
        /// Returns the blockchain metadata.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> BlockchainMetadataAsyncWithHttpInfo ();
        /// <summary>
        /// Returns the blockchain sync progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> BlockchainProgressAsync ();

        /// <summary>
        /// Returns the blockchain sync progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> BlockchainProgressAsyncWithHttpInfo ();
        /// <summary>
        /// blocksHandler returns blocks between a start and end point,
        /// </summary>
        /// <remarks>
        /// or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> BlocksGetAsync (bool? verbose = null, int? start = null, int? end = null, string seqs = null);

        /// <summary>
        /// blocksHandler returns blocks between a start and end point,
        /// </summary>
        /// <remarks>
        /// or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> BlocksGetAsyncWithHttpInfo (bool? verbose = null, int? start = null, int? end = null, string seqs = null);
        /// <summary>
        /// blocksHandler returns blocks between a start and end point,
        /// </summary>
        /// <remarks>
        /// or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> BlocksPostAsync (bool? verbose = null, int? start = null, int? end = null, string seqs = null);

        /// <summary>
        /// blocksHandler returns blocks between a start and end point,
        /// </summary>
        /// <remarks>
        /// or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> BlocksPostAsyncWithHttpInfo (bool? verbose = null, int? start = null, int? end = null, string seqs = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// coinSupplyHandler returns coin distribution supply stats
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CoinSupplyAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// coinSupplyHandler returns coin distribution supply stats
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CoinSupplyAsyncWithHttpInfo ();
        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> CsrfAsync ();

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> CsrfAsyncWithHttpInfo ();
        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> DefaultConnectionsAsync ();

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> DefaultConnectionsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all transactions (confirmed and unconfirmed) for an address
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">tags to filter by (optional)</param>
        /// <returns>Task of List&lt;InlineResponse2008&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2008>> ExplorerAddressAsync (string address = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all transactions (confirmed and unconfirmed) for an address
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">tags to filter by (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2008&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2008>>> ExplorerAddressAsyncWithHttpInfo (string address = null);
        /// <summary>
        /// Returns node health data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> HealthAsync ();

        /// <summary>
        /// Returns node health data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> HealthAsyncWithHttpInfo ();
        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InjectTransactionAsync (string rawtx);

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InjectTransactionAsyncWithHttpInfo (string rawtx);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the most recent N blocks on the blockchain
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="num"> (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> LastBlocksAsync (bool? verbose = null, int? num = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the most recent N blocks on the blockchain
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="num"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> LastBlocksAsyncWithHttpInfo (bool? verbose = null, int? num = null);
        /// <summary>
        /// This endpoint returns a specific connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> NetworkConnectionAsync (string addr);

        /// <summary>
        /// This endpoint returns a specific connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> NetworkConnectionAsyncWithHttpInfo (string addr);
        /// <summary>
        /// This endpoint returns all outgoings connections.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>Task of List&lt;InlineResponse20010&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20010>> NetworkConnectionsAsync (string states = null, string direction = null);

        /// <summary>
        /// This endpoint returns all outgoings connections.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20010&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20010>>> NetworkConnectionsAsyncWithHttpInfo (string states = null, string direction = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint disconnects a connection by ID or address
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NetworkConnectionsDisconnectAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint disconnects a connection by ID or address
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NetworkConnectionsDisconnectAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns all connections found through peer exchange
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> NetworkConnectionsExchangeAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns all connections found through peer exchange
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> NetworkConnectionsExchangeAsyncWithHttpInfo ();
        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> NetworkConnectionsTrustAsync ();

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> NetworkConnectionsTrustAsyncWithHttpInfo ();
        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="hash"></param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> OutputsGetAsync (string address, string hash);

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="hash"></param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> OutputsGetAsyncWithHttpInfo (string address, string hash);
        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="hash"></param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> OutputsPostAsync (string address, string hash);

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="hash"></param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> OutputsPostAsyncWithHttpInfo (string address, string hash);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pending (unconfirmed) transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of List&lt;InlineResponse20012&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20012>> PendingTxsAsync (bool? verbose = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns pending (unconfirmed) transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20012&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20012>>> PendingTxsAsyncWithHttpInfo (bool? verbose = null);
        /// <summary>
        /// Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id hash (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RawtxAsync (string txid = null);

        /// <summary>
        /// Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id hash (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RawtxAsyncWithHttpInfo (string txid = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResendUnconfirmedTxnsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResendUnconfirmedTxnsAsyncWithHttpInfo ();
        /// <summary>
        /// Returns the top skycoin holders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> RichlistAsync (string includeDistribution = null, string n = null);

        /// <summary>
        /// Returns the top skycoin holders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> RichlistAsyncWithHttpInfo (string includeDistribution = null, string n = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a transaction identified by its txid hash
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction hash</param>
        /// <param name="encoded">return as a raw encoded transaction. (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> TransactionAsync (string txid, bool? encoded = null, bool? verbose = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a transaction identified by its txid hash
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction hash</param>
        /// <param name="encoded">return as a raw encoded transaction. (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> TransactionAsyncWithHttpInfo (string txid, bool? encoded = null, bool? verbose = null);
        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of List&lt;InlineResponse20014&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20014>> TransactionsGetAsync (string addrs = null, string confirmed = null, bool? verbose = null);

        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20014&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20014>>> TransactionsGetAsyncWithHttpInfo (string addrs = null, string confirmed = null, bool? verbose = null);
        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of List&lt;InlineResponse20014&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20014>> TransactionsPostAsync (string addrs = null, string confirmed = null, bool? verbose = null);

        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20014&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20014>>> TransactionsPostAsyncWithHttpInfo (string addrs = null, string confirmed = null, bool? verbose = null);
        /// <summary>
        /// Returns an unspent output by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> UxoutAsync (string uxid = null);

        /// <summary>
        /// Returns an unspent output by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> UxoutAsyncWithHttpInfo (string uxid = null);
        /// <summary>
        /// healthHandler returns node health data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> VerifyAddressAsync (string address);

        /// <summary>
        /// healthHandler returns node health data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> VerifyAddressAsyncWithHttpInfo (string address);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// versionHandler returns the application version info
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VersionAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// versionHandler returns the application version info
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VersionAsyncWithHttpInfo ();
        /// <summary>
        /// Returns a wallet by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> WalletAsync (string id = null);

        /// <summary>
        /// Returns a wallet by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> WalletAsyncWithHttpInfo (string id = null);
        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> WalletBalanceAsync (string id);

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> WalletBalanceAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> WalletCreateAsync (string seed, string label, int? scan = null, bool? encrypt = null, string password = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> WalletCreateAsyncWithHttpInfo (string seed, string label, int? scan = null, bool? encrypt = null, string password = null);
        /// <summary>
        /// Decrypts wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> WalletDecryptAsync (string id, string password);

        /// <summary>
        /// Decrypts wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> WalletDecryptAsyncWithHttpInfo (string id, string password);
        /// <summary>
        /// Encrypt wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> WalletEncryptAsync (string id, string password);

        /// <summary>
        /// Encrypt wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> WalletEncryptAsyncWithHttpInfo (string id, string password);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> WalletFolderAsync (string addr);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> WalletFolderAsyncWithHttpInfo (string addr);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates new addresses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> WalletNewAddressAsync (string id, string num = null, string password = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates new addresses
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> WalletNewAddressAsyncWithHttpInfo (string id, string num = null, string password = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> WalletNewSeedAsync (string entropy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> WalletNewSeedAsyncWithHttpInfo (string entropy = null);
        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>Task of InlineResponse20023</returns>
        System.Threading.Tasks.Task<InlineResponse20023> WalletRecoverAsync (string id, string seed, string password = null);

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> WalletRecoverAsyncWithHttpInfo (string id, string seed, string password = null);
        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> WalletSeedAsync (string id, string password);

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> WalletSeedAsyncWithHttpInfo (string id, string password);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and broadcasts a transaction sending money from one of our wallets to destination address.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id</param>
        /// <param name="dst">Recipient address</param>
        /// <param name="coins">Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> WalletSpentAsync (string id, string dst, string coins, string password);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates and broadcasts a transaction sending money from one of our wallets to destination address.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id</param>
        /// <param name="dst">Recipient address</param>
        /// <param name="coins">Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> WalletSpentAsyncWithHttpInfo (string id, string dst, string coins, string password);
        /// <summary>
        /// Returns returns all unconfirmed transactions for all addresses in a given wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> WalletTransactionsAsync (string id, bool? verbose = null);

        /// <summary>
        /// Returns returns all unconfirmed transactions for all addresses in a given wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> WalletTransactionsAsyncWithHttpInfo (string id, bool? verbose = null);
        /// <summary>
        /// Unloads wallet from the wallet service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WalletUnloadAsync (string id);

        /// <summary>
        /// Unloads wallet from the wallet service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletUnloadAsyncWithHttpInfo (string id);
        /// <summary>
        /// Update the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WalletUpdateAsync (string id, string label);

        /// <summary>
        /// Update the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletUpdateAsyncWithHttpInfo (string id, string label);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all loaded wallets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20020&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20020>> WalletsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all loaded wallets
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20020&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20020>>> WalletsAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns the total number of unique address that have coins. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 AddressCount ()
        {
             ApiResponse<InlineResponse2001> localVarResponse = AddressCountWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the total number of unique address that have coins. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > AddressCountWithHttpInfo ()
        {

            var localVarPath = "/api/v1/addresscount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Returns the total number of unique address that have coins. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> AddressCountAsync ()
        {
             ApiResponse<InlineResponse2001> localVarResponse = await AddressCountAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the total number of unique address that have coins. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> AddressCountAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/addresscount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        ///  Returns the historical, spent outputs associated with an address
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by (optional)</param>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        public List<InlineResponse200> AddressUxouts (string address = null)
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = AddressUxoutsWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the historical, spent outputs associated with an address
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        public ApiResponse< List<InlineResponse200> > AddressUxoutsWithHttpInfo (string address = null)
        {

            var localVarPath = "/api/v1/address_uxouts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressUxouts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse200>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
        }

        /// <summary>
        ///  Returns the historical, spent outputs associated with an address
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by (optional)</param>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse200>> AddressUxoutsAsync (string address = null)
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = await AddressUxoutsAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the historical, spent outputs associated with an address
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> AddressUxoutsAsyncWithHttpInfo (string address = null)
        {

            var localVarPath = "/api/v1/address_uxouts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressUxouts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse200>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 BalanceGet (string addrs)
        {
             ApiResponse<InlineResponse2002> localVarResponse = BalanceGetWithHttpInfo(addrs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > BalanceGetWithHttpInfo (string addrs)
        {
            // verify the required parameter 'addrs' is set
            if (addrs == null)
                throw new ApiException(400, "Missing required parameter 'addrs' when calling DefaultApi->BalanceGet");

            var localVarPath = "/api/v1/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BalanceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> BalanceGetAsync (string addrs)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await BalanceGetAsyncWithHttpInfo(addrs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> BalanceGetAsyncWithHttpInfo (string addrs)
        {
            // verify the required parameter 'addrs' is set
            if (addrs == null)
                throw new ApiException(400, "Missing required parameter 'addrs' when calling DefaultApi->BalanceGet");

            var localVarPath = "/api/v1/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BalanceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 BalancePost (string addrs)
        {
             ApiResponse<InlineResponse2002> localVarResponse = BalancePostWithHttpInfo(addrs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > BalancePostWithHttpInfo (string addrs)
        {
            // verify the required parameter 'addrs' is set
            if (addrs == null)
                throw new ApiException(400, "Missing required parameter 'addrs' when calling DefaultApi->BalancePost");

            var localVarPath = "/api/v1/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BalancePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> BalancePostAsync (string addrs)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await BalancePostAsyncWithHttpInfo(addrs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> BalancePostAsyncWithHttpInfo (string addrs)
        {
            // verify the required parameter 'addrs' is set
            if (addrs == null)
                throw new ApiException(400, "Missing required parameter 'addrs' when calling DefaultApi->BalancePost");

            var localVarPath = "/api/v1/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BalancePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        ///  Returns a block by hash or seq. Note: only one of hash or seq is allowed
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="hash"> (optional)</param>
        /// <param name="seq"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 Block (bool? verbose = null, string hash = null, int? seq = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = BlockWithHttpInfo(verbose, hash, seq);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a block by hash or seq. Note: only one of hash or seq is allowed
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="hash"> (optional)</param>
        /// <param name="seq"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > BlockWithHttpInfo (bool? verbose = null, string hash = null, int? seq = null)
        {

            var localVarPath = "/api/v1/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter
            if (hash != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter
            if (seq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "seq", seq)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Block", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        ///  Returns a block by hash or seq. Note: only one of hash or seq is allowed
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="hash"> (optional)</param>
        /// <param name="seq"> (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> BlockAsync (bool? verbose = null, string hash = null, int? seq = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await BlockAsyncWithHttpInfo(verbose, hash, seq);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a block by hash or seq. Note: only one of hash or seq is allowed
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="hash"> (optional)</param>
        /// <param name="seq"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> BlockAsyncWithHttpInfo (bool? verbose = null, string hash = null, int? seq = null)
        {

            var localVarPath = "/api/v1/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter
            if (hash != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter
            if (seq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "seq", seq)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Block", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Returns the blockchain metadata. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 BlockchainMetadata ()
        {
             ApiResponse<InlineResponse2004> localVarResponse = BlockchainMetadataWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the blockchain metadata. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse< InlineResponse2004 > BlockchainMetadataWithHttpInfo ()
        {

            var localVarPath = "/api/v1/blockchain/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockchainMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Returns the blockchain metadata. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> BlockchainMetadataAsync ()
        {
             ApiResponse<InlineResponse2004> localVarResponse = await BlockchainMetadataAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the blockchain metadata. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> BlockchainMetadataAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/blockchain/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockchainMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Returns the blockchain sync progress. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 BlockchainProgress ()
        {
             ApiResponse<InlineResponse2005> localVarResponse = BlockchainProgressWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the blockchain sync progress. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse< InlineResponse2005 > BlockchainProgressWithHttpInfo ()
        {

            var localVarPath = "/api/v1/blockchain/progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockchainProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2005) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Returns the blockchain sync progress. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> BlockchainProgressAsync ()
        {
             ApiResponse<InlineResponse2005> localVarResponse = await BlockchainProgressAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the blockchain sync progress. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> BlockchainProgressAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/blockchain/progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockchainProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2005) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// blocksHandler returns blocks between a start and end point, or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 BlocksGet (bool? verbose = null, int? start = null, int? end = null, string seqs = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = BlocksGetWithHttpInfo(verbose, start, end, seqs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// blocksHandler returns blocks between a start and end point, or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > BlocksGetWithHttpInfo (bool? verbose = null, int? start = null, int? end = null, string seqs = null)
        {

            var localVarPath = "/api/v1/blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter
            if (start != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (seqs != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "seqs", seqs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlocksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// blocksHandler returns blocks between a start and end point, or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> BlocksGetAsync (bool? verbose = null, int? start = null, int? end = null, string seqs = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await BlocksGetAsyncWithHttpInfo(verbose, start, end, seqs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// blocksHandler returns blocks between a start and end point, or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> BlocksGetAsyncWithHttpInfo (bool? verbose = null, int? start = null, int? end = null, string seqs = null)
        {

            var localVarPath = "/api/v1/blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter
            if (start != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (seqs != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "seqs", seqs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlocksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// blocksHandler returns blocks between a start and end point, or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 BlocksPost (bool? verbose = null, int? start = null, int? end = null, string seqs = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = BlocksPostWithHttpInfo(verbose, start, end, seqs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// blocksHandler returns blocks between a start and end point, or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > BlocksPostWithHttpInfo (bool? verbose = null, int? start = null, int? end = null, string seqs = null)
        {

            var localVarPath = "/api/v1/blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter
            if (start != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (seqs != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "seqs", seqs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlocksPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// blocksHandler returns blocks between a start and end point, or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> BlocksPostAsync (bool? verbose = null, int? start = null, int? end = null, string seqs = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await BlocksPostAsyncWithHttpInfo(verbose, start, end, seqs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// blocksHandler returns blocks between a start and end point, or an explicit list of sequences. If using start and end, the block sequences include both the start and end point. Explicit sequences cannot be combined with start and end.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="seqs"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> BlocksPostAsyncWithHttpInfo (bool? verbose = null, int? start = null, int? end = null, string seqs = null)
        {

            var localVarPath = "/api/v1/blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter
            if (start != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (seqs != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "seqs", seqs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlocksPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  coinSupplyHandler returns coin distribution supply stats
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void CoinSupply ()
        {
             CoinSupplyWithHttpInfo();
        }

        /// <summary>
        ///  coinSupplyHandler returns coin distribution supply stats
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CoinSupplyWithHttpInfo ()
        {

            var localVarPath = "/api/v1/coinSupply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CoinSupply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  coinSupplyHandler returns coin distribution supply stats
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CoinSupplyAsync ()
        {
             await CoinSupplyAsyncWithHttpInfo();

        }

        /// <summary>
        ///  coinSupplyHandler returns coin distribution supply stats
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CoinSupplyAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/coinSupply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CoinSupply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 Csrf ()
        {
             ApiResponse<InlineResponse2007> localVarResponse = CsrfWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse< InlineResponse2007 > CsrfWithHttpInfo ()
        {

            var localVarPath = "/api/v1/csrf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Csrf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> CsrfAsync ()
        {
             ApiResponse<InlineResponse2007> localVarResponse = await CsrfAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> CsrfAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/csrf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Csrf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> DefaultConnections ()
        {
             ApiResponse<List<string>> localVarResponse = DefaultConnectionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > DefaultConnectionsWithHttpInfo ()
        {

            var localVarPath = "/api/v1/network/defaultConnections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DefaultConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> DefaultConnectionsAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await DefaultConnectionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> DefaultConnectionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/network/defaultConnections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DefaultConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  Returns all transactions (confirmed and unconfirmed) for an address
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">tags to filter by (optional)</param>
        /// <returns>List&lt;InlineResponse2008&gt;</returns>
        public List<InlineResponse2008> ExplorerAddress (string address = null)
        {
             ApiResponse<List<InlineResponse2008>> localVarResponse = ExplorerAddressWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all transactions (confirmed and unconfirmed) for an address
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">tags to filter by (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2008&gt;</returns>
        public ApiResponse< List<InlineResponse2008> > ExplorerAddressWithHttpInfo (string address = null)
        {

            var localVarPath = "/api/v1/explorer/address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExplorerAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2008>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse2008>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2008>)));
        }

        /// <summary>
        ///  Returns all transactions (confirmed and unconfirmed) for an address
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">tags to filter by (optional)</param>
        /// <returns>Task of List&lt;InlineResponse2008&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2008>> ExplorerAddressAsync (string address = null)
        {
             ApiResponse<List<InlineResponse2008>> localVarResponse = await ExplorerAddressAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all transactions (confirmed and unconfirmed) for an address
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">tags to filter by (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2008&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2008>>> ExplorerAddressAsyncWithHttpInfo (string address = null)
        {

            var localVarPath = "/api/v1/explorer/address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExplorerAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2008>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse2008>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2008>)));
        }

        /// <summary>
        /// Returns node health data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 Health ()
        {
             ApiResponse<InlineResponse2009> localVarResponse = HealthWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns node health data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse< InlineResponse2009 > HealthWithHttpInfo ()
        {

            var localVarPath = "/api/v1/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Health", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2009) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// Returns node health data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> HealthAsync ()
        {
             ApiResponse<InlineResponse2009> localVarResponse = await HealthAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns node health data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> HealthAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Health", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2009) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <returns></returns>
        public void InjectTransaction (string rawtx)
        {
             InjectTransactionWithHttpInfo(rawtx);
        }

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InjectTransactionWithHttpInfo (string rawtx)
        {
            // verify the required parameter 'rawtx' is set
            if (rawtx == null)
                throw new ApiException(400, "Missing required parameter 'rawtx' when calling DefaultApi->InjectTransaction");

            var localVarPath = "/api/v1/injectTransaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rawtx != null) localVarHeaderParams.Add("rawtx", Configuration.ApiClient.ParameterToString(rawtx)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InjectTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InjectTransactionAsync (string rawtx)
        {
             await InjectTransactionAsyncWithHttpInfo(rawtx);

        }

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InjectTransactionAsyncWithHttpInfo (string rawtx)
        {
            // verify the required parameter 'rawtx' is set
            if (rawtx == null)
                throw new ApiException(400, "Missing required parameter 'rawtx' when calling DefaultApi->InjectTransaction");

            var localVarPath = "/api/v1/injectTransaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rawtx != null) localVarHeaderParams.Add("rawtx", Configuration.ApiClient.ParameterToString(rawtx)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InjectTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Returns the most recent N blocks on the blockchain
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="num"> (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 LastBlocks (bool? verbose = null, int? num = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = LastBlocksWithHttpInfo(verbose, num);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the most recent N blocks on the blockchain
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="num"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > LastBlocksWithHttpInfo (bool? verbose = null, int? num = null)
        {

            var localVarPath = "/api/v1/last_blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter
            if (num != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "num", num)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LastBlocks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  Returns the most recent N blocks on the blockchain
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="num"> (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> LastBlocksAsync (bool? verbose = null, int? num = null)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await LastBlocksAsyncWithHttpInfo(verbose, num);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the most recent N blocks on the blockchain
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose (optional, default to true)</param>
        /// <param name="num"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> LastBlocksAsyncWithHttpInfo (bool? verbose = null, int? num = null)
        {

            var localVarPath = "/api/v1/last_blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter
            if (num != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "num", num)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LastBlocks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// This endpoint returns a specific connection. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 NetworkConnection (string addr)
        {
             ApiResponse<InlineResponse20010> localVarResponse = NetworkConnectionWithHttpInfo(addr);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns a specific connection. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public ApiResponse< InlineResponse20010 > NetworkConnectionWithHttpInfo (string addr)
        {
            // verify the required parameter 'addr' is set
            if (addr == null)
                throw new ApiException(400, "Missing required parameter 'addr' when calling DefaultApi->NetworkConnection");

            var localVarPath = "/api/v1/network/connection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addr != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "addr", addr)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20010) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        /// This endpoint returns a specific connection. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> NetworkConnectionAsync (string addr)
        {
             ApiResponse<InlineResponse20010> localVarResponse = await NetworkConnectionAsyncWithHttpInfo(addr);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This endpoint returns a specific connection. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> NetworkConnectionAsyncWithHttpInfo (string addr)
        {
            // verify the required parameter 'addr' is set
            if (addr == null)
                throw new ApiException(400, "Missing required parameter 'addr' when calling DefaultApi->NetworkConnection");

            var localVarPath = "/api/v1/network/connection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addr != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "addr", addr)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20010) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        /// This endpoint returns all outgoings connections. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>List&lt;InlineResponse20010&gt;</returns>
        public List<InlineResponse20010> NetworkConnections (string states = null, string direction = null)
        {
             ApiResponse<List<InlineResponse20010>> localVarResponse = NetworkConnectionsWithHttpInfo(states, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns all outgoings connections. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20010&gt;</returns>
        public ApiResponse< List<InlineResponse20010> > NetworkConnectionsWithHttpInfo (string states = null, string direction = null)
        {

            var localVarPath = "/api/v1/network/connections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (states != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "states", states)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20010>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20010>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20010>)));
        }

        /// <summary>
        /// This endpoint returns all outgoings connections. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>Task of List&lt;InlineResponse20010&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20010>> NetworkConnectionsAsync (string states = null, string direction = null)
        {
             ApiResponse<List<InlineResponse20010>> localVarResponse = await NetworkConnectionsAsyncWithHttpInfo(states, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This endpoint returns all outgoings connections. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20010&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20010>>> NetworkConnectionsAsyncWithHttpInfo (string states = null, string direction = null)
        {

            var localVarPath = "/api/v1/network/connections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (states != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "states", states)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20010>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20010>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20010>)));
        }

        /// <summary>
        ///  This endpoint disconnects a connection by ID or address
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns></returns>
        public void NetworkConnectionsDisconnect (string id)
        {
             NetworkConnectionsDisconnectWithHttpInfo(id);
        }

        /// <summary>
        ///  This endpoint disconnects a connection by ID or address
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NetworkConnectionsDisconnectWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->NetworkConnectionsDisconnect");

            var localVarPath = "/api/v1/network/connection/disconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsDisconnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This endpoint disconnects a connection by ID or address
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NetworkConnectionsDisconnectAsync (string id)
        {
             await NetworkConnectionsDisconnectAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  This endpoint disconnects a connection by ID or address
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NetworkConnectionsDisconnectAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->NetworkConnectionsDisconnect");

            var localVarPath = "/api/v1/network/connection/disconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsDisconnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This endpoint returns all connections found through peer exchange
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> NetworkConnectionsExchange ()
        {
             ApiResponse<List<string>> localVarResponse = NetworkConnectionsExchangeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint returns all connections found through peer exchange
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > NetworkConnectionsExchangeWithHttpInfo ()
        {

            var localVarPath = "/api/v1/network/connections/exchange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsExchange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  This endpoint returns all connections found through peer exchange
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> NetworkConnectionsExchangeAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await NetworkConnectionsExchangeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  This endpoint returns all connections found through peer exchange
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> NetworkConnectionsExchangeAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/network/connections/exchange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsExchange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> NetworkConnectionsTrust ()
        {
             ApiResponse<List<string>> localVarResponse = NetworkConnectionsTrustWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > NetworkConnectionsTrustWithHttpInfo ()
        {

            var localVarPath = "/api/v1/network/connections/trust";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsTrust", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> NetworkConnectionsTrustAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await NetworkConnectionsTrustAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> NetworkConnectionsTrustAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/network/connections/trust";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsTrust", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="hash"></param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 OutputsGet (string address, string hash)
        {
             ApiResponse<InlineResponse20011> localVarResponse = OutputsGetWithHttpInfo(address, hash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="hash"></param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse< InlineResponse20011 > OutputsGetWithHttpInfo (string address, string hash)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->OutputsGet");
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling DefaultApi->OutputsGet");

            var localVarPath = "/api/v1/outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (hash != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OutputsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20011) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="hash"></param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> OutputsGetAsync (string address, string hash)
        {
             ApiResponse<InlineResponse20011> localVarResponse = await OutputsGetAsyncWithHttpInfo(address, hash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="hash"></param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> OutputsGetAsyncWithHttpInfo (string address, string hash)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->OutputsGet");
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling DefaultApi->OutputsGet");

            var localVarPath = "/api/v1/outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (hash != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OutputsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20011) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="hash"></param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 OutputsPost (string address, string hash)
        {
             ApiResponse<InlineResponse20011> localVarResponse = OutputsPostWithHttpInfo(address, hash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="hash"></param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse< InlineResponse20011 > OutputsPostWithHttpInfo (string address, string hash)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->OutputsPost");
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling DefaultApi->OutputsPost");

            var localVarPath = "/api/v1/outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (hash != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OutputsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20011) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="hash"></param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> OutputsPostAsync (string address, string hash)
        {
             ApiResponse<InlineResponse20011> localVarResponse = await OutputsPostAsyncWithHttpInfo(address, hash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <param name="hash"></param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> OutputsPostAsyncWithHttpInfo (string address, string hash)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->OutputsPost");
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling DefaultApi->OutputsPost");

            var localVarPath = "/api/v1/outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (hash != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OutputsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20011) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  Returns pending (unconfirmed) transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>List&lt;InlineResponse20012&gt;</returns>
        public List<InlineResponse20012> PendingTxs (bool? verbose = null)
        {
             ApiResponse<List<InlineResponse20012>> localVarResponse = PendingTxsWithHttpInfo(verbose);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns pending (unconfirmed) transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20012&gt;</returns>
        public ApiResponse< List<InlineResponse20012> > PendingTxsWithHttpInfo (bool? verbose = null)
        {

            var localVarPath = "/api/v1/pendingTxs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PendingTxs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20012>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20012>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20012>)));
        }

        /// <summary>
        ///  Returns pending (unconfirmed) transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of List&lt;InlineResponse20012&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20012>> PendingTxsAsync (bool? verbose = null)
        {
             ApiResponse<List<InlineResponse20012>> localVarResponse = await PendingTxsAsyncWithHttpInfo(verbose);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns pending (unconfirmed) transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20012&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20012>>> PendingTxsAsyncWithHttpInfo (bool? verbose = null)
        {

            var localVarPath = "/api/v1/pendingTxs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PendingTxs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20012>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20012>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20012>)));
        }

        /// <summary>
        /// Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id hash (optional)</param>
        /// <returns></returns>
        public void Rawtx (string txid = null)
        {
             RawtxWithHttpInfo(txid);
        }

        /// <summary>
        /// Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id hash (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RawtxWithHttpInfo (string txid = null)
        {

            var localVarPath = "/api/v1/rawtx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Rawtx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id hash (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RawtxAsync (string txid = null)
        {
             await RawtxAsyncWithHttpInfo(txid);

        }

        /// <summary>
        /// Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id hash (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RawtxAsyncWithHttpInfo (string txid = null)
        {

            var localVarPath = "/api/v1/rawtx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Rawtx", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ResendUnconfirmedTxns ()
        {
             ResendUnconfirmedTxnsWithHttpInfo();
        }

        /// <summary>
        ///  Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ResendUnconfirmedTxnsWithHttpInfo ()
        {

            var localVarPath = "/api/v1/resendUnconfirmedTxns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendUnconfirmedTxns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResendUnconfirmedTxnsAsync ()
        {
             await ResendUnconfirmedTxnsAsyncWithHttpInfo();

        }

        /// <summary>
        ///  Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ResendUnconfirmedTxnsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/resendUnconfirmedTxns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendUnconfirmedTxns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns the top skycoin holders. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 Richlist (string includeDistribution = null, string n = null)
        {
             ApiResponse<InlineResponse20013> localVarResponse = RichlistWithHttpInfo(includeDistribution, n);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the top skycoin holders. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse< InlineResponse20013 > RichlistWithHttpInfo (string includeDistribution = null, string n = null)
        {

            var localVarPath = "/api/v1/richlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeDistribution != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include-distribution", includeDistribution)); // query parameter
            if (n != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Richlist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        /// Returns the top skycoin holders. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> RichlistAsync (string includeDistribution = null, string n = null)
        {
             ApiResponse<InlineResponse20013> localVarResponse = await RichlistAsyncWithHttpInfo(includeDistribution, n);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the top skycoin holders. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> RichlistAsyncWithHttpInfo (string includeDistribution = null, string n = null)
        {

            var localVarPath = "/api/v1/richlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeDistribution != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include-distribution", includeDistribution)); // query parameter
            if (n != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Richlist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        ///  Returns a transaction identified by its txid hash
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction hash</param>
        /// <param name="encoded">return as a raw encoded transaction. (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 Transaction (string txid, bool? encoded = null, bool? verbose = null)
        {
             ApiResponse<InlineResponse20014> localVarResponse = TransactionWithHttpInfo(txid, encoded, verbose);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a transaction identified by its txid hash
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction hash</param>
        /// <param name="encoded">return as a raw encoded transaction. (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse< InlineResponse20014 > TransactionWithHttpInfo (string txid, bool? encoded = null, bool? verbose = null)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling DefaultApi->Transaction");

            var localVarPath = "/api/v1/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter
            if (encoded != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "encoded", encoded)); // query parameter
            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        ///  Returns a transaction identified by its txid hash
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction hash</param>
        /// <param name="encoded">return as a raw encoded transaction. (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> TransactionAsync (string txid, bool? encoded = null, bool? verbose = null)
        {
             ApiResponse<InlineResponse20014> localVarResponse = await TransactionAsyncWithHttpInfo(txid, encoded, verbose);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a transaction identified by its txid hash
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction hash</param>
        /// <param name="encoded">return as a raw encoded transaction. (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> TransactionAsyncWithHttpInfo (string txid, bool? encoded = null, bool? verbose = null)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling DefaultApi->Transaction");

            var localVarPath = "/api/v1/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter
            if (encoded != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "encoded", encoded)); // query parameter
            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>List&lt;InlineResponse20014&gt;</returns>
        public List<InlineResponse20014> TransactionsGet (string addrs = null, string confirmed = null, bool? verbose = null)
        {
             ApiResponse<List<InlineResponse20014>> localVarResponse = TransactionsGetWithHttpInfo(addrs, confirmed, verbose);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20014&gt;</returns>
        public ApiResponse< List<InlineResponse20014> > TransactionsGetWithHttpInfo (string addrs = null, string confirmed = null, bool? verbose = null)
        {

            var localVarPath = "/api/v1/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter
            if (confirmed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "confirmed", confirmed)); // query parameter
            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20014>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20014>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20014>)));
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of List&lt;InlineResponse20014&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20014>> TransactionsGetAsync (string addrs = null, string confirmed = null, bool? verbose = null)
        {
             ApiResponse<List<InlineResponse20014>> localVarResponse = await TransactionsGetAsyncWithHttpInfo(addrs, confirmed, verbose);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20014&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20014>>> TransactionsGetAsyncWithHttpInfo (string addrs = null, string confirmed = null, bool? verbose = null)
        {

            var localVarPath = "/api/v1/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter
            if (confirmed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "confirmed", confirmed)); // query parameter
            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20014>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20014>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20014>)));
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>List&lt;InlineResponse20014&gt;</returns>
        public List<InlineResponse20014> TransactionsPost (string addrs = null, string confirmed = null, bool? verbose = null)
        {
             ApiResponse<List<InlineResponse20014>> localVarResponse = TransactionsPostWithHttpInfo(addrs, confirmed, verbose);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20014&gt;</returns>
        public ApiResponse< List<InlineResponse20014> > TransactionsPostWithHttpInfo (string addrs = null, string confirmed = null, bool? verbose = null)
        {

            var localVarPath = "/api/v1/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter
            if (confirmed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "confirmed", confirmed)); // query parameter
            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20014>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20014>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20014>)));
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of List&lt;InlineResponse20014&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20014>> TransactionsPostAsync (string addrs = null, string confirmed = null, bool? verbose = null)
        {
             ApiResponse<List<InlineResponse20014>> localVarResponse = await TransactionsPostAsyncWithHttpInfo(addrs, confirmed, verbose);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20014&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20014>>> TransactionsPostAsyncWithHttpInfo (string addrs = null, string confirmed = null, bool? verbose = null)
        {

            var localVarPath = "/api/v1/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter
            if (confirmed != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "confirmed", confirmed)); // query parameter
            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20014>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20014>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20014>)));
        }

        /// <summary>
        /// Returns an unspent output by ID. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 Uxout (string uxid = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = UxoutWithHttpInfo(uxid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an unspent output by ID. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > UxoutWithHttpInfo (string uxid = null)
        {

            var localVarPath = "/api/v1/uxout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uxid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "uxid", uxid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Uxout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Returns an unspent output by ID. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> UxoutAsync (string uxid = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await UxoutAsyncWithHttpInfo(uxid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns an unspent output by ID. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> UxoutAsyncWithHttpInfo (string uxid = null)
        {

            var localVarPath = "/api/v1/uxout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uxid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "uxid", uxid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Uxout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// healthHandler returns node health data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 VerifyAddress (string address)
        {
             ApiResponse<InlineResponse20022> localVarResponse = VerifyAddressWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// healthHandler returns node health data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public ApiResponse< InlineResponse20022 > VerifyAddressWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->VerifyAddress");

            var localVarPath = "/api/v2/address/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20022) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        /// healthHandler returns node health data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> VerifyAddressAsync (string address)
        {
             ApiResponse<InlineResponse20022> localVarResponse = await VerifyAddressAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        /// healthHandler returns node health data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> VerifyAddressAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->VerifyAddress");

            var localVarPath = "/api/v2/address/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20022) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        ///  versionHandler returns the application version info
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Version ()
        {
             VersionWithHttpInfo();
        }

        /// <summary>
        ///  versionHandler returns the application version info
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VersionWithHttpInfo ()
        {

            var localVarPath = "/api/v1/version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Version", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  versionHandler returns the application version info
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VersionAsync ()
        {
             await VersionAsyncWithHttpInfo();

        }

        /// <summary>
        ///  versionHandler returns the application version info
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VersionAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Version", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns a wallet by id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by (optional)</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 Wallet (string id = null)
        {
             ApiResponse<InlineResponse20015> localVarResponse = WalletWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a wallet by id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > WalletWithHttpInfo (string id = null)
        {

            var localVarPath = "/api/v1/wallet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Wallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// Returns a wallet by id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> WalletAsync (string id = null)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await WalletAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a wallet by id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> WalletAsyncWithHttpInfo (string id = null)
        {

            var localVarPath = "/api/v1/wallet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Wallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 WalletBalance (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = WalletBalanceWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > WalletBalanceWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletBalance");

            var localVarPath = "/api/v1/wallet/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> WalletBalanceAsync (string id)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await WalletBalanceAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> WalletBalanceAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletBalance");

            var localVarPath = "/api/v1/wallet/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        ///  Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 WalletCreate (string seed, string label, int? scan = null, bool? encrypt = null, string password = null)
        {
             ApiResponse<InlineResponse20015> localVarResponse = WalletCreateWithHttpInfo(seed, label, scan, encrypt, password);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > WalletCreateWithHttpInfo (string seed, string label, int? scan = null, bool? encrypt = null, string password = null)
        {
            // verify the required parameter 'seed' is set
            if (seed == null)
                throw new ApiException(400, "Missing required parameter 'seed' when calling DefaultApi->WalletCreate");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling DefaultApi->WalletCreate");

            var localVarPath = "/api/v1/wallet/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (seed != null) localVarHeaderParams.Add("seed", Configuration.ApiClient.ParameterToString(seed)); // header parameter
            if (label != null) localVarHeaderParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // header parameter
            if (scan != null) localVarHeaderParams.Add("scan", Configuration.ApiClient.ParameterToString(scan)); // header parameter
            if (encrypt != null) localVarHeaderParams.Add("encrypt", Configuration.ApiClient.ParameterToString(encrypt)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> WalletCreateAsync (string seed, string label, int? scan = null, bool? encrypt = null, string password = null)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await WalletCreateAsyncWithHttpInfo(seed, label, scan, encrypt, password);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Loads wallet from seed, will scan ahead N address and load addresses till the last one that have coins.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> WalletCreateAsyncWithHttpInfo (string seed, string label, int? scan = null, bool? encrypt = null, string password = null)
        {
            // verify the required parameter 'seed' is set
            if (seed == null)
                throw new ApiException(400, "Missing required parameter 'seed' when calling DefaultApi->WalletCreate");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling DefaultApi->WalletCreate");

            var localVarPath = "/api/v1/wallet/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (seed != null) localVarHeaderParams.Add("seed", Configuration.ApiClient.ParameterToString(seed)); // header parameter
            if (label != null) localVarHeaderParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // header parameter
            if (scan != null) localVarHeaderParams.Add("scan", Configuration.ApiClient.ParameterToString(scan)); // header parameter
            if (encrypt != null) localVarHeaderParams.Add("encrypt", Configuration.ApiClient.ParameterToString(encrypt)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// Decrypts wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 WalletDecrypt (string id, string password)
        {
             ApiResponse<InlineResponse20015> localVarResponse = WalletDecryptWithHttpInfo(id, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Decrypts wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > WalletDecryptWithHttpInfo (string id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletDecrypt");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->WalletDecrypt");

            var localVarPath = "/api/v1/wallet/decrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletDecrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// Decrypts wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> WalletDecryptAsync (string id, string password)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await WalletDecryptAsyncWithHttpInfo(id, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Decrypts wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> WalletDecryptAsyncWithHttpInfo (string id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletDecrypt");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->WalletDecrypt");

            var localVarPath = "/api/v1/wallet/decrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletDecrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// Encrypt wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 WalletEncrypt (string id, string password)
        {
             ApiResponse<InlineResponse20015> localVarResponse = WalletEncryptWithHttpInfo(id, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Encrypt wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > WalletEncryptWithHttpInfo (string id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletEncrypt");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->WalletEncrypt");

            var localVarPath = "/api/v1/wallet/encrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletEncrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// Encrypt wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> WalletEncryptAsync (string id, string password)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await WalletEncryptAsyncWithHttpInfo(id, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Encrypt wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> WalletEncryptAsyncWithHttpInfo (string id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletEncrypt");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->WalletEncrypt");

            var localVarPath = "/api/v1/wallet/encrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletEncrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 WalletFolder (string addr)
        {
             ApiResponse<InlineResponse20021> localVarResponse = WalletFolderWithHttpInfo(addr);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public ApiResponse< InlineResponse20021 > WalletFolderWithHttpInfo (string addr)
        {
            // verify the required parameter 'addr' is set
            if (addr == null)
                throw new ApiException(400, "Missing required parameter 'addr' when calling DefaultApi->WalletFolder");

            var localVarPath = "/api/v1/wallets/folderName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addr != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "addr", addr)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20021) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021> WalletFolderAsync (string addr)
        {
             ApiResponse<InlineResponse20021> localVarResponse = await WalletFolderAsyncWithHttpInfo(addr);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> WalletFolderAsyncWithHttpInfo (string addr)
        {
            // verify the required parameter 'addr' is set
            if (addr == null)
                throw new ApiException(400, "Missing required parameter 'addr' when calling DefaultApi->WalletFolder");

            var localVarPath = "/api/v1/wallets/folderName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addr != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "addr", addr)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20021) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        ///  Generates new addresses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 WalletNewAddress (string id, string num = null, string password = null)
        {
             ApiResponse<InlineResponse20016> localVarResponse = WalletNewAddressWithHttpInfo(id, num, password);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Generates new addresses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public ApiResponse< InlineResponse20016 > WalletNewAddressWithHttpInfo (string id, string num = null, string password = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletNewAddress");

            var localVarPath = "/api/v1/wallet/newAddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (num != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "num", num)); // query parameter
            if (password != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletNewAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20016) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        ///  Generates new addresses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> WalletNewAddressAsync (string id, string num = null, string password = null)
        {
             ApiResponse<InlineResponse20016> localVarResponse = await WalletNewAddressAsyncWithHttpInfo(id, num, password);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Generates new addresses
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> WalletNewAddressAsyncWithHttpInfo (string id, string num = null, string password = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletNewAddress");

            var localVarPath = "/api/v1/wallet/newAddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (num != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "num", num)); // query parameter
            if (password != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletNewAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20016) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 WalletNewSeed (string entropy = null)
        {
             ApiResponse<InlineResponse20017> localVarResponse = WalletNewSeedWithHttpInfo(entropy);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public ApiResponse< InlineResponse20017 > WalletNewSeedWithHttpInfo (string entropy = null)
        {

            var localVarPath = "/api/v1/wallet/newSeed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entropy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entropy", entropy)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletNewSeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20017) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> WalletNewSeedAsync (string entropy = null)
        {
             ApiResponse<InlineResponse20017> localVarResponse = await WalletNewSeedAsyncWithHttpInfo(entropy);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> WalletNewSeedAsyncWithHttpInfo (string entropy = null)
        {

            var localVarPath = "/api/v1/wallet/newSeed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entropy != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "entropy", entropy)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletNewSeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20017) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>InlineResponse20023</returns>
        public InlineResponse20023 WalletRecover (string id, string seed, string password = null)
        {
             ApiResponse<InlineResponse20023> localVarResponse = WalletRecoverWithHttpInfo(id, seed, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        public ApiResponse< InlineResponse20023 > WalletRecoverWithHttpInfo (string id, string seed, string password = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletRecover");
            // verify the required parameter 'seed' is set
            if (seed == null)
                throw new ApiException(400, "Missing required parameter 'seed' when calling DefaultApi->WalletRecover");

            var localVarPath = "/api/v2/wallet/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (seed != null) localVarHeaderParams.Add("seed", Configuration.ApiClient.ParameterToString(seed)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletRecover", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20023) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
        }

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>Task of InlineResponse20023</returns>
        public async System.Threading.Tasks.Task<InlineResponse20023> WalletRecoverAsync (string id, string seed, string password = null)
        {
             ApiResponse<InlineResponse20023> localVarResponse = await WalletRecoverAsyncWithHttpInfo(id, seed, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> WalletRecoverAsyncWithHttpInfo (string id, string seed, string password = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletRecover");
            // verify the required parameter 'seed' is set
            if (seed == null)
                throw new ApiException(400, "Missing required parameter 'seed' when calling DefaultApi->WalletRecover");

            var localVarPath = "/api/v2/wallet/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (seed != null) localVarHeaderParams.Add("seed", Configuration.ApiClient.ParameterToString(seed)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletRecover", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20023) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
        }

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 WalletSeed (string id, string password)
        {
             ApiResponse<InlineResponse20017> localVarResponse = WalletSeedWithHttpInfo(id, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public ApiResponse< InlineResponse20017 > WalletSeedWithHttpInfo (string id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletSeed");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->WalletSeed");

            var localVarPath = "/api/v1/wallet/seed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (password != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletSeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20017) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> WalletSeedAsync (string id, string password)
        {
             ApiResponse<InlineResponse20017> localVarResponse = await WalletSeedAsyncWithHttpInfo(id, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> WalletSeedAsyncWithHttpInfo (string id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletSeed");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->WalletSeed");

            var localVarPath = "/api/v1/wallet/seed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (password != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletSeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20017) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        ///  Creates and broadcasts a transaction sending money from one of our wallets to destination address.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id</param>
        /// <param name="dst">Recipient address</param>
        /// <param name="coins">Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 WalletSpent (string id, string dst, string coins, string password)
        {
             ApiResponse<InlineResponse20018> localVarResponse = WalletSpentWithHttpInfo(id, dst, coins, password);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates and broadcasts a transaction sending money from one of our wallets to destination address.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id</param>
        /// <param name="dst">Recipient address</param>
        /// <param name="coins">Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public ApiResponse< InlineResponse20018 > WalletSpentWithHttpInfo (string id, string dst, string coins, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletSpent");
            // verify the required parameter 'dst' is set
            if (dst == null)
                throw new ApiException(400, "Missing required parameter 'dst' when calling DefaultApi->WalletSpent");
            // verify the required parameter 'coins' is set
            if (coins == null)
                throw new ApiException(400, "Missing required parameter 'coins' when calling DefaultApi->WalletSpent");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->WalletSpent");

            var localVarPath = "/api/v1/wallet/spend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (dst != null) localVarHeaderParams.Add("dst", Configuration.ApiClient.ParameterToString(dst)); // header parameter
            if (coins != null) localVarHeaderParams.Add("coins", Configuration.ApiClient.ParameterToString(coins)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletSpent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20018) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        ///  Creates and broadcasts a transaction sending money from one of our wallets to destination address.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id</param>
        /// <param name="dst">Recipient address</param>
        /// <param name="coins">Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> WalletSpentAsync (string id, string dst, string coins, string password)
        {
             ApiResponse<InlineResponse20018> localVarResponse = await WalletSpentAsyncWithHttpInfo(id, dst, coins, password);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Creates and broadcasts a transaction sending money from one of our wallets to destination address.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id</param>
        /// <param name="dst">Recipient address</param>
        /// <param name="coins">Number of coins to spend, in droplets. 1 coin equals 1e6 droplets.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> WalletSpentAsyncWithHttpInfo (string id, string dst, string coins, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletSpent");
            // verify the required parameter 'dst' is set
            if (dst == null)
                throw new ApiException(400, "Missing required parameter 'dst' when calling DefaultApi->WalletSpent");
            // verify the required parameter 'coins' is set
            if (coins == null)
                throw new ApiException(400, "Missing required parameter 'coins' when calling DefaultApi->WalletSpent");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling DefaultApi->WalletSpent");

            var localVarPath = "/api/v1/wallet/spend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (dst != null) localVarHeaderParams.Add("dst", Configuration.ApiClient.ParameterToString(dst)); // header parameter
            if (coins != null) localVarHeaderParams.Add("coins", Configuration.ApiClient.ParameterToString(coins)); // header parameter
            if (password != null) localVarHeaderParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletSpent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20018) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        /// Returns returns all unconfirmed transactions for all addresses in a given wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 WalletTransactions (string id, bool? verbose = null)
        {
             ApiResponse<InlineResponse20019> localVarResponse = WalletTransactionsWithHttpInfo(id, verbose);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns returns all unconfirmed transactions for all addresses in a given wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse< InlineResponse20019 > WalletTransactionsWithHttpInfo (string id, bool? verbose = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletTransactions");

            var localVarPath = "/api/v1/wallet/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        /// Returns returns all unconfirmed transactions for all addresses in a given wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> WalletTransactionsAsync (string id, bool? verbose = null)
        {
             ApiResponse<InlineResponse20019> localVarResponse = await WalletTransactionsAsyncWithHttpInfo(id, verbose);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns returns all unconfirmed transactions for all addresses in a given wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="verbose">include verbose transaction input data (optional, default to true)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> WalletTransactionsAsyncWithHttpInfo (string id, bool? verbose = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletTransactions");

            var localVarPath = "/api/v1/wallet/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (verbose != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "verbose", verbose)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20019) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        /// Unloads wallet from the wallet service. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns></returns>
        public void WalletUnload (string id)
        {
             WalletUnloadWithHttpInfo(id);
        }

        /// <summary>
        /// Unloads wallet from the wallet service. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WalletUnloadWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletUnload");

            var localVarPath = "/api/v1/wallet/unload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletUnload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unloads wallet from the wallet service. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WalletUnloadAsync (string id)
        {
             await WalletUnloadAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Unloads wallet from the wallet service. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletUnloadAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletUnload");

            var localVarPath = "/api/v1/wallet/unload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletUnload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update the wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns></returns>
        public void WalletUpdate (string id, string label)
        {
             WalletUpdateWithHttpInfo(id, label);
        }

        /// <summary>
        /// Update the wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WalletUpdateWithHttpInfo (string id, string label)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletUpdate");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling DefaultApi->WalletUpdate");

            var localVarPath = "/api/v1/wallet/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (label != null) localVarHeaderParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update the wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WalletUpdateAsync (string id, string label)
        {
             await WalletUpdateAsyncWithHttpInfo(id, label);

        }

        /// <summary>
        /// Update the wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletUpdateAsyncWithHttpInfo (string id, string label)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletUpdate");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling DefaultApi->WalletUpdate");

            var localVarPath = "/api/v1/wallet/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarHeaderParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // header parameter
            if (label != null) localVarHeaderParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Returns all loaded wallets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20020&gt;</returns>
        public List<InlineResponse20020> Wallets ()
        {
             ApiResponse<List<InlineResponse20020>> localVarResponse = WalletsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all loaded wallets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20020&gt;</returns>
        public ApiResponse< List<InlineResponse20020> > WalletsWithHttpInfo ()
        {

            var localVarPath = "/api/v1/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Wallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20020>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20020>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20020>)));
        }

        /// <summary>
        ///  Returns all loaded wallets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20020&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20020>> WalletsAsync ()
        {
             ApiResponse<List<InlineResponse20020>> localVarResponse = await WalletsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns all loaded wallets
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20020&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20020>>> WalletsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("csrf_Token")))
            {
                localVarHeaderParams["csrf_Token"] = Configuration.GetApiKeyWithPrefix("csrf_Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Wallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20020>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse20020>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse20020>)));
        }

    }
}
