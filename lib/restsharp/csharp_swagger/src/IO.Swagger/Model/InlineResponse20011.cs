/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: skycoin.doe@example.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20011
    /// </summary>
    [DataContract]
    public partial class InlineResponse20011 :  IEquatable<InlineResponse20011>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20011" /> class.
        /// </summary>
        /// <param name="Head">Head.</param>
        /// <param name="HeadOutputs">HeadOutputs are unspent outputs confirmed in the blockchain.</param>
        /// <param name="IncomingOutputs">IncomingOutputs are unspent outputs being created by unconfirmed transactions.</param>
        /// <param name="OutgoingOutputs">OutgoingOutputs are unspent outputs being spent in unconfirmed transactions.</param>
        public InlineResponse20011(InlineResponse20011Head Head = default(InlineResponse20011Head), List<InlineResponse20011HeadOutputs> HeadOutputs = default(List<InlineResponse20011HeadOutputs>), List<InlineResponse20011HeadOutputs> IncomingOutputs = default(List<InlineResponse20011HeadOutputs>), List<InlineResponse20011HeadOutputs> OutgoingOutputs = default(List<InlineResponse20011HeadOutputs>))
        {
            this.Head = Head;
            this.HeadOutputs = HeadOutputs;
            this.IncomingOutputs = IncomingOutputs;
            this.OutgoingOutputs = OutgoingOutputs;
        }
        
        /// <summary>
        /// Gets or Sets Head
        /// </summary>
        [DataMember(Name="head", EmitDefaultValue=false)]
        public InlineResponse20011Head Head { get; set; }

        /// <summary>
        /// HeadOutputs are unspent outputs confirmed in the blockchain
        /// </summary>
        /// <value>HeadOutputs are unspent outputs confirmed in the blockchain</value>
        [DataMember(Name="head_outputs", EmitDefaultValue=false)]
        public List<InlineResponse20011HeadOutputs> HeadOutputs { get; set; }

        /// <summary>
        /// IncomingOutputs are unspent outputs being created by unconfirmed transactions
        /// </summary>
        /// <value>IncomingOutputs are unspent outputs being created by unconfirmed transactions</value>
        [DataMember(Name="incoming_outputs", EmitDefaultValue=false)]
        public List<InlineResponse20011HeadOutputs> IncomingOutputs { get; set; }

        /// <summary>
        /// OutgoingOutputs are unspent outputs being spent in unconfirmed transactions
        /// </summary>
        /// <value>OutgoingOutputs are unspent outputs being spent in unconfirmed transactions</value>
        [DataMember(Name="outgoing_outputs", EmitDefaultValue=false)]
        public List<InlineResponse20011HeadOutputs> OutgoingOutputs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20011 {\n");
            sb.Append("  Head: ").Append(Head).Append("\n");
            sb.Append("  HeadOutputs: ").Append(HeadOutputs).Append("\n");
            sb.Append("  IncomingOutputs: ").Append(IncomingOutputs).Append("\n");
            sb.Append("  OutgoingOutputs: ").Append(OutgoingOutputs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20011);
        }

        /// <summary>
        /// Returns true if InlineResponse20011 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20011 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20011 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Head == input.Head ||
                    (this.Head != null &&
                    this.Head.Equals(input.Head))
                ) && 
                (
                    this.HeadOutputs == input.HeadOutputs ||
                    this.HeadOutputs != null &&
                    this.HeadOutputs.SequenceEqual(input.HeadOutputs)
                ) && 
                (
                    this.IncomingOutputs == input.IncomingOutputs ||
                    this.IncomingOutputs != null &&
                    this.IncomingOutputs.SequenceEqual(input.IncomingOutputs)
                ) && 
                (
                    this.OutgoingOutputs == input.OutgoingOutputs ||
                    this.OutgoingOutputs != null &&
                    this.OutgoingOutputs.SequenceEqual(input.OutgoingOutputs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Head != null)
                    hashCode = hashCode * 59 + this.Head.GetHashCode();
                if (this.HeadOutputs != null)
                    hashCode = hashCode * 59 + this.HeadOutputs.GetHashCode();
                if (this.IncomingOutputs != null)
                    hashCode = hashCode * 59 + this.IncomingOutputs.GetHashCode();
                if (this.OutgoingOutputs != null)
                    hashCode = hashCode * 59 + this.OutgoingOutputs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
