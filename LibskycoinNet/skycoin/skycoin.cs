//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace skycoin {

public class skycoin {
  public static int equalSlices(GoSlice slice1, GoSlice slice2, int elem_size) {
    int ret = skycoinPINVOKE.equalSlices(GoSlice.getCPtr(slice1), GoSlice.getCPtr(slice2), elem_size);
    return ret;
  }

  public static int equalTransactions(coin__Transaction t1, coin__Transaction t2) {
    int ret = skycoinPINVOKE.equalTransactions(coin__Transaction.getCPtr(t1), coin__Transaction.getCPtr(t2));
    return ret;
  }

  public static int equalTransactionsArrays(SWIGTYPE_p_GoSlice_ pTxs1, SWIGTYPE_p_GoSlice_ pTxs2) {
    int ret = skycoinPINVOKE.equalTransactionsArrays(SWIGTYPE_p_GoSlice_.getCPtr(pTxs1), SWIGTYPE_p_GoSlice_.getCPtr(pTxs2));
    return ret;
  }

  public static int equalBlockHeaders(coin__BlockHeader bh1, coin__BlockHeader bh2) {
    int ret = skycoinPINVOKE.equalBlockHeaders(coin__BlockHeader.getCPtr(bh1), coin__BlockHeader.getCPtr(bh2));
    return ret;
  }

  public static void destroy_cipher_SecKeys(cipher_SecKeys p) {
    skycoinPINVOKE.destroy_cipher_SecKeys(cipher_SecKeys.getCPtr(p));
  }

  public static GoSlice new_GoSlicep() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_GoSlicep();
    GoSlice ret = (cPtr == global::System.IntPtr.Zero) ? null : new GoSlice(cPtr, false);
    return ret;
  }

  public static GoSlice copy_GoSlicep(GoSlice value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_GoSlicep(GoSlice.getCPtr(value));
    GoSlice ret = (cPtr == global::System.IntPtr.Zero) ? null : new GoSlice(cPtr, false);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_GoSlicep(GoSlice obj) {
    skycoinPINVOKE.delete_GoSlicep(GoSlice.getCPtr(obj));
  }

  public static void GoSlicep_assign(GoSlice obj, GoSlice value) {
    skycoinPINVOKE.GoSlicep_assign(GoSlice.getCPtr(obj), GoSlice.getCPtr(value));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
  }

  public static GoSlice GoSlicep_value(GoSlice obj) {
    GoSlice ret = new GoSlice(skycoinPINVOKE.GoSlicep_value(GoSlice.getCPtr(obj)), true);
    return ret;
  }

  public static SWIGTYPE_p_GoUint8_ new_GoUint8Ptr() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_GoUint8Ptr();
    SWIGTYPE_p_GoUint8_ ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GoUint8_(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_GoUint8_ copy_GoUint8Ptr(byte value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_GoUint8Ptr(value);
    SWIGTYPE_p_GoUint8_ ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GoUint8_(cPtr, false);
    return ret;
  }

  public static void delete_GoUint8Ptr(SWIGTYPE_p_GoUint8_ obj) {
    skycoinPINVOKE.delete_GoUint8Ptr(SWIGTYPE_p_GoUint8_.getCPtr(obj));
  }

  public static void GoUint8Ptr_assign(SWIGTYPE_p_GoUint8_ obj, byte value) {
    skycoinPINVOKE.GoUint8Ptr_assign(SWIGTYPE_p_GoUint8_.getCPtr(obj), value);
  }

  public static byte GoUint8Ptr_value(SWIGTYPE_p_GoUint8_ obj) {
    byte ret = skycoinPINVOKE.GoUint8Ptr_value(SWIGTYPE_p_GoUint8_.getCPtr(obj));
    return ret;
  }

  public static _GoString_ new_GoStringp() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_GoStringp();
    _GoString_ ret = (cPtr == global::System.IntPtr.Zero) ? null : new _GoString_(cPtr, false);
    return ret;
  }

  public static _GoString_ copy_GoStringp(_GoString_ value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_GoStringp(_GoString_.getCPtr(value));
    _GoString_ ret = (cPtr == global::System.IntPtr.Zero) ? null : new _GoString_(cPtr, false);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_GoStringp(_GoString_ obj) {
    skycoinPINVOKE.delete_GoStringp(_GoString_.getCPtr(obj));
  }

  public static void GoStringp_assign(_GoString_ obj, _GoString_ value) {
    skycoinPINVOKE.GoStringp_assign(_GoString_.getCPtr(obj), _GoString_.getCPtr(value));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
  }

  public static _GoString_ GoStringp_value(_GoString_ obj) {
    _GoString_ ret = new _GoString_(skycoinPINVOKE.GoStringp_value(_GoString_.getCPtr(obj)), true);
    return ret;
  }

  public static SWIGTYPE_p_int new_intp() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_intp();
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_int copy_intp(int value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_intp(value);
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public static void delete_intp(SWIGTYPE_p_int obj) {
    skycoinPINVOKE.delete_intp(SWIGTYPE_p_int.getCPtr(obj));
  }

  public static void intp_assign(SWIGTYPE_p_int obj, int value) {
    skycoinPINVOKE.intp_assign(SWIGTYPE_p_int.getCPtr(obj), value);
  }

  public static int intp_value(SWIGTYPE_p_int obj) {
    int ret = skycoinPINVOKE.intp_value(SWIGTYPE_p_int.getCPtr(obj));
    return ret;
  }

  public static SWIGTYPE_p_unsigned_int new_GoUint32Ptr() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_GoUint32Ptr();
    SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_unsigned_int copy_GoUint32Ptr(uint value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_GoUint32Ptr(value);
    SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
    return ret;
  }

  public static void delete_GoUint32Ptr(SWIGTYPE_p_unsigned_int obj) {
    skycoinPINVOKE.delete_GoUint32Ptr(SWIGTYPE_p_unsigned_int.getCPtr(obj));
  }

  public static void GoUint32Ptr_assign(SWIGTYPE_p_unsigned_int obj, uint value) {
    skycoinPINVOKE.GoUint32Ptr_assign(SWIGTYPE_p_unsigned_int.getCPtr(obj), value);
  }

  public static uint GoUint32Ptr_value(SWIGTYPE_p_unsigned_int obj) {
    uint ret = skycoinPINVOKE.GoUint32Ptr_value(SWIGTYPE_p_unsigned_int.getCPtr(obj));
    return ret;
  }

  public static coin__Transaction new_coin__Transactionp() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_coin__Transactionp();
    coin__Transaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new coin__Transaction(cPtr, false);
    return ret;
  }

  public static coin__Transaction copy_coin__Transactionp(coin__Transaction value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_coin__Transactionp(coin__Transaction.getCPtr(value));
    coin__Transaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new coin__Transaction(cPtr, false);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_coin__Transactionp(coin__Transaction obj) {
    skycoinPINVOKE.delete_coin__Transactionp(coin__Transaction.getCPtr(obj));
  }

  public static void coin__Transactionp_assign(coin__Transaction obj, coin__Transaction value) {
    skycoinPINVOKE.coin__Transactionp_assign(coin__Transaction.getCPtr(obj), coin__Transaction.getCPtr(value));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
  }

  public static coin__Transaction coin__Transactionp_value(coin__Transaction obj) {
    coin__Transaction ret = new coin__Transaction(skycoinPINVOKE.coin__Transactionp_value(coin__Transaction.getCPtr(obj)), true);
    return ret;
  }

  public static SWIGTYPE_p_AddressUxOuts_Handle new_AddressUxOuts__HandlePtr() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_AddressUxOuts__HandlePtr();
    SWIGTYPE_p_AddressUxOuts_Handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_AddressUxOuts_Handle(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_AddressUxOuts_Handle copy_AddressUxOuts__HandlePtr(SWIGTYPE_p_AddressUxOuts_Handle value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_AddressUxOuts__HandlePtr(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(value));
    SWIGTYPE_p_AddressUxOuts_Handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_AddressUxOuts_Handle(cPtr, false);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_AddressUxOuts__HandlePtr(SWIGTYPE_p_AddressUxOuts_Handle obj) {
    skycoinPINVOKE.delete_AddressUxOuts__HandlePtr(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(obj));
  }

  public static void AddressUxOuts__HandlePtr_assign(SWIGTYPE_p_AddressUxOuts_Handle obj, SWIGTYPE_p_AddressUxOuts_Handle value) {
    skycoinPINVOKE.AddressUxOuts__HandlePtr_assign(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(obj), SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(value));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_AddressUxOuts_Handle AddressUxOuts__HandlePtr_value(SWIGTYPE_p_AddressUxOuts_Handle obj) {
    SWIGTYPE_p_AddressUxOuts_Handle ret = new SWIGTYPE_p_AddressUxOuts_Handle(skycoinPINVOKE.AddressUxOuts__HandlePtr_value(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(obj)), true);
    return ret;
  }

  public static SWIGTYPE_p_unsigned_long_long new_GoUint64p() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_GoUint64p();
    SWIGTYPE_p_unsigned_long_long ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_long_long(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_unsigned_long_long copy_GoUint64p(ulong value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_GoUint64p(value);
    SWIGTYPE_p_unsigned_long_long ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_long_long(cPtr, false);
    return ret;
  }

  public static void delete_GoUint64p(SWIGTYPE_p_unsigned_long_long obj) {
    skycoinPINVOKE.delete_GoUint64p(SWIGTYPE_p_unsigned_long_long.getCPtr(obj));
  }

  public static void GoUint64p_assign(SWIGTYPE_p_unsigned_long_long obj, ulong value) {
    skycoinPINVOKE.GoUint64p_assign(SWIGTYPE_p_unsigned_long_long.getCPtr(obj), value);
  }

  public static ulong GoUint64p_value(SWIGTYPE_p_unsigned_long_long obj) {
    ulong ret = skycoinPINVOKE.GoUint64p_value(SWIGTYPE_p_unsigned_long_long.getCPtr(obj));
    return ret;
  }

  public static SWIGTYPE_p_long_long new_Gointp() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_Gointp();
    SWIGTYPE_p_long_long ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_long_long(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_long_long copy_Gointp(long value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_Gointp(value);
    SWIGTYPE_p_long_long ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_long_long(cPtr, false);
    return ret;
  }

  public static void delete_Gointp(SWIGTYPE_p_long_long obj) {
    skycoinPINVOKE.delete_Gointp(SWIGTYPE_p_long_long.getCPtr(obj));
  }

  public static void Gointp_assign(SWIGTYPE_p_long_long obj, long value) {
    skycoinPINVOKE.Gointp_assign(SWIGTYPE_p_long_long.getCPtr(obj), value);
  }

  public static long Gointp_value(SWIGTYPE_p_long_long obj) {
    long ret = skycoinPINVOKE.Gointp_value(SWIGTYPE_p_long_long.getCPtr(obj));
    return ret;
  }

  public static SWIGTYPE_p_unsigned_short new_GoUint16p() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_GoUint16p();
    SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_unsigned_short copy_GoUint16p(ushort value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_GoUint16p(value);
    SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
    return ret;
  }

  public static void delete_GoUint16p(SWIGTYPE_p_unsigned_short obj) {
    skycoinPINVOKE.delete_GoUint16p(SWIGTYPE_p_unsigned_short.getCPtr(obj));
  }

  public static void GoUint16p_assign(SWIGTYPE_p_unsigned_short obj, ushort value) {
    skycoinPINVOKE.GoUint16p_assign(SWIGTYPE_p_unsigned_short.getCPtr(obj), value);
  }

  public static ushort GoUint16p_value(SWIGTYPE_p_unsigned_short obj) {
    ushort ret = skycoinPINVOKE.GoUint16p_value(SWIGTYPE_p_unsigned_short.getCPtr(obj));
    return ret;
  }

  public static cipher__Address new_cipher__Addressp() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_cipher__Addressp();
    cipher__Address ret = (cPtr == global::System.IntPtr.Zero) ? null : new cipher__Address(cPtr, false);
    return ret;
  }

  public static cipher__Address copy_cipher__Addressp(cipher__Address value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_cipher__Addressp(cipher__Address.getCPtr(value));
    cipher__Address ret = (cPtr == global::System.IntPtr.Zero) ? null : new cipher__Address(cPtr, false);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_cipher__Addressp(cipher__Address obj) {
    skycoinPINVOKE.delete_cipher__Addressp(cipher__Address.getCPtr(obj));
  }

  public static void cipher__Addressp_assign(cipher__Address obj, cipher__Address value) {
    skycoinPINVOKE.cipher__Addressp_assign(cipher__Address.getCPtr(obj), cipher__Address.getCPtr(value));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
  }

  public static cipher__Address cipher__Addressp_value(cipher__Address obj) {
    cipher__Address ret = new cipher__Address(skycoinPINVOKE.cipher__Addressp_value(cipher__Address.getCPtr(obj)), true);
    return ret;
  }

  public static SWIGTYPE_p_Transactions__Handle new_Transactions__Handlep() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_Transactions__Handlep();
    SWIGTYPE_p_Transactions__Handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Transactions__Handle(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Transactions__Handle copy_Transactions__Handlep(SWIGTYPE_p_Transactions__Handle value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_Transactions__Handlep(SWIGTYPE_p_Transactions__Handle.getCPtr(value));
    SWIGTYPE_p_Transactions__Handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Transactions__Handle(cPtr, false);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_Transactions__Handlep(SWIGTYPE_p_Transactions__Handle obj) {
    skycoinPINVOKE.delete_Transactions__Handlep(SWIGTYPE_p_Transactions__Handle.getCPtr(obj));
  }

  public static void Transactions__Handlep_assign(SWIGTYPE_p_Transactions__Handle obj, SWIGTYPE_p_Transactions__Handle value) {
    skycoinPINVOKE.Transactions__Handlep_assign(SWIGTYPE_p_Transactions__Handle.getCPtr(obj), SWIGTYPE_p_Transactions__Handle.getCPtr(value));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_Transactions__Handle Transactions__Handlep_value(SWIGTYPE_p_Transactions__Handle obj) {
    SWIGTYPE_p_Transactions__Handle ret = new SWIGTYPE_p_Transactions__Handle(skycoinPINVOKE.Transactions__Handlep_value(SWIGTYPE_p_Transactions__Handle.getCPtr(obj)), true);
    return ret;
  }

  public static SWIGTYPE_p_Transaction__Handle new_Transaction__Handlep() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_Transaction__Handlep();
    SWIGTYPE_p_Transaction__Handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Transaction__Handle(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Transaction__Handle copy_Transaction__Handlep(SWIGTYPE_p_Transaction__Handle value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_Transaction__Handlep(SWIGTYPE_p_Transaction__Handle.getCPtr(value));
    SWIGTYPE_p_Transaction__Handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Transaction__Handle(cPtr, false);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_Transaction__Handlep(SWIGTYPE_p_Transaction__Handle obj) {
    skycoinPINVOKE.delete_Transaction__Handlep(SWIGTYPE_p_Transaction__Handle.getCPtr(obj));
  }

  public static void Transaction__Handlep_assign(SWIGTYPE_p_Transaction__Handle obj, SWIGTYPE_p_Transaction__Handle value) {
    skycoinPINVOKE.Transaction__Handlep_assign(SWIGTYPE_p_Transaction__Handle.getCPtr(obj), SWIGTYPE_p_Transaction__Handle.getCPtr(value));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_Transaction__Handle Transaction__Handlep_value(SWIGTYPE_p_Transaction__Handle obj) {
    SWIGTYPE_p_Transaction__Handle ret = new SWIGTYPE_p_Transaction__Handle(skycoinPINVOKE.Transaction__Handlep_value(SWIGTYPE_p_Transaction__Handle.getCPtr(obj)), true);
    return ret;
  }

  public static SWIGTYPE_p_Block__Handle new_Block__HandlePtr() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_Block__HandlePtr();
    SWIGTYPE_p_Block__Handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Block__Handle(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Block__Handle copy_Block__HandlePtr(SWIGTYPE_p_Block__Handle value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_Block__HandlePtr(SWIGTYPE_p_Block__Handle.getCPtr(value));
    SWIGTYPE_p_Block__Handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Block__Handle(cPtr, false);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_Block__HandlePtr(SWIGTYPE_p_Block__Handle obj) {
    skycoinPINVOKE.delete_Block__HandlePtr(SWIGTYPE_p_Block__Handle.getCPtr(obj));
  }

  public static void Block__HandlePtr_assign(SWIGTYPE_p_Block__Handle obj, SWIGTYPE_p_Block__Handle value) {
    skycoinPINVOKE.Block__HandlePtr_assign(SWIGTYPE_p_Block__Handle.getCPtr(obj), SWIGTYPE_p_Block__Handle.getCPtr(value));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_Block__Handle Block__HandlePtr_value(SWIGTYPE_p_Block__Handle obj) {
    SWIGTYPE_p_Block__Handle ret = new SWIGTYPE_p_Block__Handle(skycoinPINVOKE.Block__HandlePtr_value(SWIGTYPE_p_Block__Handle.getCPtr(obj)), true);
    return ret;
  }

  public static SWIGTYPE_p_BlockBody__Handle new_BlockBody__HandlePtr() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_BlockBody__HandlePtr();
    SWIGTYPE_p_BlockBody__Handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_BlockBody__Handle(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_BlockBody__Handle copy_BlockBody__HandlePtr(SWIGTYPE_p_BlockBody__Handle value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_BlockBody__HandlePtr(SWIGTYPE_p_BlockBody__Handle.getCPtr(value));
    SWIGTYPE_p_BlockBody__Handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_BlockBody__Handle(cPtr, false);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_BlockBody__HandlePtr(SWIGTYPE_p_BlockBody__Handle obj) {
    skycoinPINVOKE.delete_BlockBody__HandlePtr(SWIGTYPE_p_BlockBody__Handle.getCPtr(obj));
  }

  public static void BlockBody__HandlePtr_assign(SWIGTYPE_p_BlockBody__Handle obj, SWIGTYPE_p_BlockBody__Handle value) {
    skycoinPINVOKE.BlockBody__HandlePtr_assign(SWIGTYPE_p_BlockBody__Handle.getCPtr(obj), SWIGTYPE_p_BlockBody__Handle.getCPtr(value));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_BlockBody__Handle BlockBody__HandlePtr_value(SWIGTYPE_p_BlockBody__Handle obj) {
    SWIGTYPE_p_BlockBody__Handle ret = new SWIGTYPE_p_BlockBody__Handle(skycoinPINVOKE.BlockBody__HandlePtr_value(SWIGTYPE_p_BlockBody__Handle.getCPtr(obj)), true);
    return ret;
  }

  public static SWIGTYPE_p_Signature_Handle new_Signature_HandlePtr() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_Signature_HandlePtr();
    SWIGTYPE_p_Signature_Handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Signature_Handle(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Signature_Handle copy_Signature_HandlePtr(SWIGTYPE_p_Signature_Handle value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_Signature_HandlePtr(SWIGTYPE_p_Signature_Handle.getCPtr(value));
    SWIGTYPE_p_Signature_Handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Signature_Handle(cPtr, false);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_Signature_HandlePtr(SWIGTYPE_p_Signature_Handle obj) {
    skycoinPINVOKE.delete_Signature_HandlePtr(SWIGTYPE_p_Signature_Handle.getCPtr(obj));
  }

  public static void Signature_HandlePtr_assign(SWIGTYPE_p_Signature_Handle obj, SWIGTYPE_p_Signature_Handle value) {
    skycoinPINVOKE.Signature_HandlePtr_assign(SWIGTYPE_p_Signature_Handle.getCPtr(obj), SWIGTYPE_p_Signature_Handle.getCPtr(value));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_Signature_Handle Signature_HandlePtr_value(SWIGTYPE_p_Signature_Handle obj) {
    SWIGTYPE_p_Signature_Handle ret = new SWIGTYPE_p_Signature_Handle(skycoinPINVOKE.Signature_HandlePtr_value(SWIGTYPE_p_Signature_Handle.getCPtr(obj)), true);
    return ret;
  }

  public static SWIGTYPE_p_Number_Handle new_Number_HandlePtr() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_Number_HandlePtr();
    SWIGTYPE_p_Number_Handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Number_Handle(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Number_Handle copy_Number_HandlePtr(SWIGTYPE_p_Number_Handle value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_Number_HandlePtr(SWIGTYPE_p_Number_Handle.getCPtr(value));
    SWIGTYPE_p_Number_Handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Number_Handle(cPtr, false);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_Number_HandlePtr(SWIGTYPE_p_Number_Handle obj) {
    skycoinPINVOKE.delete_Number_HandlePtr(SWIGTYPE_p_Number_Handle.getCPtr(obj));
  }

  public static void Number_HandlePtr_assign(SWIGTYPE_p_Number_Handle obj, SWIGTYPE_p_Number_Handle value) {
    skycoinPINVOKE.Number_HandlePtr_assign(SWIGTYPE_p_Number_Handle.getCPtr(obj), SWIGTYPE_p_Number_Handle.getCPtr(value));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_Number_Handle Number_HandlePtr_value(SWIGTYPE_p_Number_Handle obj) {
    SWIGTYPE_p_Number_Handle ret = new SWIGTYPE_p_Number_Handle(skycoinPINVOKE.Number_HandlePtr_value(SWIGTYPE_p_Number_Handle.getCPtr(obj)), true);
    return ret;
  }

  public static SWIGTYPE_p_unsigned_char new_CharPtr() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_CharPtr();
    SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_unsigned_char copy_CharPtr(byte value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_CharPtr(value);
    SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public static void delete_CharPtr(SWIGTYPE_p_unsigned_char obj) {
    skycoinPINVOKE.delete_CharPtr(SWIGTYPE_p_unsigned_char.getCPtr(obj));
  }

  public static void CharPtr_assign(SWIGTYPE_p_unsigned_char obj, byte value) {
    skycoinPINVOKE.CharPtr_assign(SWIGTYPE_p_unsigned_char.getCPtr(obj), value);
  }

  public static byte CharPtr_value(SWIGTYPE_p_unsigned_char obj) {
    byte ret = skycoinPINVOKE.CharPtr_value(SWIGTYPE_p_unsigned_char.getCPtr(obj));
    return ret;
  }

  public static SWIGTYPE_p_FeeCalculator new_FeeCalculatorPtr() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_FeeCalculatorPtr();
    SWIGTYPE_p_FeeCalculator ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FeeCalculator(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_FeeCalculator copy_FeeCalculatorPtr(SWIGTYPE_p_FeeCalculator value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_FeeCalculatorPtr(SWIGTYPE_p_FeeCalculator.getCPtr(value));
    SWIGTYPE_p_FeeCalculator ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FeeCalculator(cPtr, false);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_FeeCalculatorPtr(SWIGTYPE_p_FeeCalculator obj) {
    skycoinPINVOKE.delete_FeeCalculatorPtr(SWIGTYPE_p_FeeCalculator.getCPtr(obj));
  }

  public static void FeeCalculatorPtr_assign(SWIGTYPE_p_FeeCalculator obj, SWIGTYPE_p_FeeCalculator value) {
    skycoinPINVOKE.FeeCalculatorPtr_assign(SWIGTYPE_p_FeeCalculator.getCPtr(obj), SWIGTYPE_p_FeeCalculator.getCPtr(value));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_FeeCalculator FeeCalculatorPtr_value(SWIGTYPE_p_FeeCalculator obj) {
    SWIGTYPE_p_FeeCalculator ret = new SWIGTYPE_p_FeeCalculator(skycoinPINVOKE.FeeCalculatorPtr_value(SWIGTYPE_p_FeeCalculator.getCPtr(obj)), true);
    return ret;
  }

  public static SWIGTYPE_p_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_ new_FeeCalcFuncPtr() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_FeeCalcFuncPtr();
    SWIGTYPE_p_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_ ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_ copy_FeeCalcFuncPtr(SWIGTYPE_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_ value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_FeeCalcFuncPtr(SWIGTYPE_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_.getCPtr(value));
    SWIGTYPE_p_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_ ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_(cPtr, false);
    return ret;
  }

  public static void delete_FeeCalcFuncPtr(SWIGTYPE_p_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_ obj) {
    skycoinPINVOKE.delete_FeeCalcFuncPtr(SWIGTYPE_p_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_.getCPtr(obj));
  }

  public static void FeeCalcFuncPtr_assign(SWIGTYPE_p_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_ obj, SWIGTYPE_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_ value) {
    skycoinPINVOKE.FeeCalcFuncPtr_assign(SWIGTYPE_p_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_.getCPtr(obj), SWIGTYPE_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_.getCPtr(value));
  }

  public static SWIGTYPE_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_ FeeCalcFuncPtr_value(SWIGTYPE_p_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_ obj) {
    global::System.IntPtr cPtr = skycoinPINVOKE.FeeCalcFuncPtr_value(SWIGTYPE_p_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_.getCPtr(obj));
    SWIGTYPE_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_ ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_Transaction__Handle_p_unsigned_long_long_p_void__GoUint32_(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_p_coin__Block new_coin__BlockPtr() {
    global::System.IntPtr cPtr = skycoinPINVOKE.new_coin__BlockPtr();
    SWIGTYPE_p_p_coin__Block ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_coin__Block(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_p_coin__Block copy_coin__BlockPtr(coin__Block value) {
    global::System.IntPtr cPtr = skycoinPINVOKE.copy_coin__BlockPtr(coin__Block.getCPtr(value));
    SWIGTYPE_p_p_coin__Block ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_coin__Block(cPtr, false);
    return ret;
  }

  public static void delete_coin__BlockPtr(SWIGTYPE_p_p_coin__Block obj) {
    skycoinPINVOKE.delete_coin__BlockPtr(SWIGTYPE_p_p_coin__Block.getCPtr(obj));
  }

  public static void coin__BlockPtr_assign(SWIGTYPE_p_p_coin__Block obj, coin__Block value) {
    skycoinPINVOKE.coin__BlockPtr_assign(SWIGTYPE_p_p_coin__Block.getCPtr(obj), coin__Block.getCPtr(value));
  }

  public static coin__Block coin__BlockPtr_value(SWIGTYPE_p_p_coin__Block obj) {
    global::System.IntPtr cPtr = skycoinPINVOKE.coin__BlockPtr_value(SWIGTYPE_p_p_coin__Block.getCPtr(obj));
    coin__Block ret = (cPtr == global::System.IntPtr.Zero) ? null : new coin__Block(cPtr, false);
    return ret;
  }

  public static void SKY_handle_close(SWIGTYPE_p_Handle p0) {
    skycoinPINVOKE.SKY_handle_close(SWIGTYPE_p_Handle.getCPtr(p0));
  }

  public static uint zeroFeeCalculator(SWIGTYPE_p_Transaction__Handle handle, SWIGTYPE_p_GoUint64_ pFee, SWIGTYPE_p_void context) {
    uint ret = skycoinPINVOKE.zeroFeeCalculator(SWIGTYPE_p_Transaction__Handle.getCPtr(handle), SWIGTYPE_p_GoUint64_.getCPtr(pFee), SWIGTYPE_p_void.getCPtr(context));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint calcFeeCalculator(SWIGTYPE_p_Transaction__Handle handle, SWIGTYPE_p_GoUint64_ pFee, SWIGTYPE_p_void context) {
    uint ret = skycoinPINVOKE.calcFeeCalculator(SWIGTYPE_p_Transaction__Handle.getCPtr(handle), SWIGTYPE_p_GoUint64_.getCPtr(pFee), SWIGTYPE_p_void.getCPtr(context));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint fix121FeeCalculator(SWIGTYPE_p_Transaction__Handle handle, SWIGTYPE_p_GoUint64_ pFee, SWIGTYPE_p_void context) {
    uint ret = skycoinPINVOKE.fix121FeeCalculator(SWIGTYPE_p_Transaction__Handle.getCPtr(handle), SWIGTYPE_p_GoUint64_.getCPtr(pFee), SWIGTYPE_p_void.getCPtr(context));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint badFeeCalculator(SWIGTYPE_p_Transaction__Handle handle, SWIGTYPE_p_GoUint64_ pFee, SWIGTYPE_p_void context) {
    uint ret = skycoinPINVOKE.badFeeCalculator(SWIGTYPE_p_Transaction__Handle.getCPtr(handle), SWIGTYPE_p_GoUint64_.getCPtr(pFee), SWIGTYPE_p_void.getCPtr(context));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint overflowFeeCalculator(SWIGTYPE_p_Transaction__Handle handle, SWIGTYPE_p_GoUint64_ pFee, SWIGTYPE_p_void context) {
    uint ret = skycoinPINVOKE.overflowFeeCalculator(SWIGTYPE_p_Transaction__Handle.getCPtr(handle), SWIGTYPE_p_GoUint64_.getCPtr(pFee), SWIGTYPE_p_void.getCPtr(context));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_FeeCalculator feeCalc() {
    SWIGTYPE_p_FeeCalculator ret = new SWIGTYPE_p_FeeCalculator(skycoinPINVOKE.feeCalc(), true);
    return ret;
  }

  public static SWIGTYPE_p_FeeCalculator fix121() {
    SWIGTYPE_p_FeeCalculator ret = new SWIGTYPE_p_FeeCalculator(skycoinPINVOKE.fix121(), true);
    return ret;
  }

  public static SWIGTYPE_p_FeeCalculator badCalc() {
    SWIGTYPE_p_FeeCalculator ret = new SWIGTYPE_p_FeeCalculator(skycoinPINVOKE.badCalc(), true);
    return ret;
  }

  public static SWIGTYPE_p_FeeCalculator calcCalc() {
    SWIGTYPE_p_FeeCalculator ret = new SWIGTYPE_p_FeeCalculator(skycoinPINVOKE.calcCalc(), true);
    return ret;
  }

  public static SWIGTYPE_p_FeeCalculator overflow() {
    SWIGTYPE_p_FeeCalculator ret = new SWIGTYPE_p_FeeCalculator(skycoinPINVOKE.overflow(), true);
    return ret;
  }

  public static int MEMPOOLIDX {
    set {
      skycoinPINVOKE.set_MEMPOOLIDX(value);
    } 
    get {
      int ret = skycoinPINVOKE.get_MEMPOOLIDX();
      return ret;
    } 
  }

  public static SWIGTYPE_p_p_void MEMPOOL {
    set {
      skycoinPINVOKE.set_MEMPOOL(SWIGTYPE_p_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = skycoinPINVOKE.get_MEMPOOL();
      SWIGTYPE_p_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_void(cPtr, false);
      return ret;
    } 
  }

  public static int JSONPOOLIDX {
    set {
      skycoinPINVOKE.set_JSONPOOLIDX(value);
    } 
    get {
      int ret = skycoinPINVOKE.get_JSONPOOLIDX();
      return ret;
    } 
  }

  public static SWIGTYPE_p_p_json_value JSON_POOL {
    set {
      skycoinPINVOKE.set_JSON_POOL(SWIGTYPE_p_p_json_value.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = skycoinPINVOKE.get_JSON_POOL();
      SWIGTYPE_p_p_json_value ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_json_value(cPtr, false);
      return ret;
    } 
  }

  public static int HANDLEPOOLIDX {
    set {
      skycoinPINVOKE.set_HANDLEPOOLIDX(value);
    } 
    get {
      int ret = skycoinPINVOKE.get_HANDLEPOOLIDX();
      return ret;
    } 
  }

  public static SWIGTYPE_p_Handle HANDLE_POOL {
    set {
      skycoinPINVOKE.set_HANDLE_POOL(SWIGTYPE_p_Handle.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = skycoinPINVOKE.get_HANDLE_POOL();
      SWIGTYPE_p_Handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Handle(cPtr, false);
      return ret;
    } 
  }

  public static int WALLETPOOLIDX {
    set {
      skycoinPINVOKE.set_WALLETPOOLIDX(value);
    } 
    get {
      int ret = skycoinPINVOKE.get_WALLETPOOLIDX();
      return ret;
    } 
  }

  public static wallet_register WALLET_POOL {
    set {
      skycoinPINVOKE.set_WALLET_POOL(wallet_register.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = skycoinPINVOKE.get_WALLET_POOL();
      wallet_register ret = (cPtr == global::System.IntPtr.Zero) ? null : new wallet_register(cPtr, false);
      return ret;
    } 
  }

  public static int stdout_backup {
    set {
      skycoinPINVOKE.set_stdout_backup(value);
    } 
    get {
      int ret = skycoinPINVOKE.get_stdout_backup();
      return ret;
    } 
  }

  public static SWIGTYPE_p_int pipefd {
    set {
      skycoinPINVOKE.set_pipefd(SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = skycoinPINVOKE.get_pipefd();
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_void registerMemCleanup(SWIGTYPE_p_void p) {
    global::System.IntPtr cPtr = skycoinPINVOKE.registerMemCleanup(SWIGTYPE_p_void.getCPtr(p));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public static void freeRegisteredMemCleanup(SWIGTYPE_p_void p) {
    skycoinPINVOKE.freeRegisteredMemCleanup(SWIGTYPE_p_void.getCPtr(p));
  }

  public static int registerJsonFree(SWIGTYPE_p_void p) {
    int ret = skycoinPINVOKE.registerJsonFree(SWIGTYPE_p_void.getCPtr(p));
    return ret;
  }

  public static void freeRegisteredJson(SWIGTYPE_p_void p) {
    skycoinPINVOKE.freeRegisteredJson(SWIGTYPE_p_void.getCPtr(p));
  }

  public static int registerWalletClean(SWIGTYPE_p_Client__Handle clientHandle, SWIGTYPE_p_WalletResponse__Handle walletHandle) {
    int ret = skycoinPINVOKE.registerWalletClean(SWIGTYPE_p_Client__Handle.getCPtr(clientHandle), SWIGTYPE_p_WalletResponse__Handle.getCPtr(walletHandle));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int registerHandleClose(SWIGTYPE_p_Handle handle) {
    int ret = skycoinPINVOKE.registerHandleClose(SWIGTYPE_p_Handle.getCPtr(handle));
    return ret;
  }

  public static void closeRegisteredHandle(SWIGTYPE_p_Handle handle) {
    skycoinPINVOKE.closeRegisteredHandle(SWIGTYPE_p_Handle.getCPtr(handle));
  }

  public static void cleanupWallet(SWIGTYPE_p_Client__Handle client, SWIGTYPE_p_WalletResponse__Handle wallet) {
    skycoinPINVOKE.cleanupWallet(SWIGTYPE_p_Client__Handle.getCPtr(client), SWIGTYPE_p_WalletResponse__Handle.getCPtr(wallet));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void cleanRegisteredWallet(SWIGTYPE_p_Client__Handle client, SWIGTYPE_p_WalletResponse__Handle wallet) {
    skycoinPINVOKE.cleanRegisteredWallet(SWIGTYPE_p_Client__Handle.getCPtr(client), SWIGTYPE_p_WalletResponse__Handle.getCPtr(wallet));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void cleanupMem() {
    skycoinPINVOKE.cleanupMem();
  }

  public static void setup() {
    skycoinPINVOKE.setup();
  }

  public static void teardown() {
    skycoinPINVOKE.teardown();
  }

  public static void fprintbuff(SWIGTYPE_p_FILE f, SWIGTYPE_p_void buff, uint n) {
    skycoinPINVOKE.fprintbuff(SWIGTYPE_p_FILE.getCPtr(f), SWIGTYPE_p_void.getCPtr(buff), n);
  }

  public static int parseBoolean(string str, int length) {
    int ret = skycoinPINVOKE.parseBoolean(str, length);
    return ret;
  }

  public static void toGoString(_GoString_ s) {
var tmps = _GoString_.getCPtr (s);
    {
      skycoinPINVOKE.toGoString(tmps);
    }
  }

  public static int copySlice(GoSlice pdest, GoSlice psource, int elem_size) {
    int ret = skycoinPINVOKE.copySlice(GoSlice.getCPtr (pdest), GoSlice.getCPtr (psource), elem_size);
    return ret;
  }

  public static int concatSlices(GoSlice slice1, GoSlice slice2, int elem_size, GoSlice result) {
    int ret = skycoinPINVOKE.concatSlices(GoSlice.getCPtr (slice1), GoSlice.getCPtr (slice2), elem_size, GoSlice.getCPtr (result));
    return ret;
  }

  public static void parseJsonMetaData(string metadata, SWIGTYPE_p_long_long n, SWIGTYPE_p_long_long r, SWIGTYPE_p_long_long p, SWIGTYPE_p_long_long keyLen) {
    skycoinPINVOKE.parseJsonMetaData(metadata, SWIGTYPE_p_long_long.getCPtr(n), SWIGTYPE_p_long_long.getCPtr(r), SWIGTYPE_p_long_long.getCPtr(p), SWIGTYPE_p_long_long.getCPtr(keyLen));
  }

  public static int cutSlice(GoSlice slice, int start, int end, int elem_size, GoSlice result) {
    int ret = skycoinPINVOKE.cutSlice(GoSlice.getCPtr (slice), start, end, elem_size, GoSlice.getCPtr (result));
    return ret;
  }

  public static coin__Transaction makeEmptyTransaction(SWIGTYPE_p_Transaction__Handle handle) {
    global::System.IntPtr cPtr = skycoinPINVOKE.makeEmptyTransaction(SWIGTYPE_p_Transaction__Handle.getCPtr(handle));
    coin__Transaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new coin__Transaction(cPtr, false);
    return ret;
  }

  public static int makeUxBodyWithSecret(coin__UxBody puxBody, cipher_SecKey pseckey) {
var tmppseckey = cipher_SecKey.getCPtr (pseckey);
    {
      int ret = skycoinPINVOKE.makeUxBodyWithSecret(coin__UxBody.getCPtr(puxBody), tmppseckey);
      return ret;
    }
  }

  public static int makeUxOutWithSecret(coin__UxOut puxOut, cipher_SecKey pseckey) {
var tmppseckey = cipher_SecKey.getCPtr (pseckey);
    {
      int ret = skycoinPINVOKE.makeUxOutWithSecret(coin__UxOut.getCPtr(puxOut), tmppseckey);
      return ret;
    }
  }

  public static int makeUxOut(coin__UxOut puxOut) {
    int ret = skycoinPINVOKE.makeUxOut(coin__UxOut.getCPtr(puxOut));
    return ret;
  }

  public static int makeUxArray(coin_UxOutArray parray, int n) {
    int ret = skycoinPINVOKE.makeUxArray(coin_UxOutArray.getCPtr(parray), n);
    return ret;
  }

  public static int makeAddress(cipher__Address paddress) {
    int ret = skycoinPINVOKE.makeAddress(cipher__Address.getCPtr(paddress));
    return ret;
  }

  public static coin__Transaction makeTransactionFromUxOut(coin__UxOut puxOut, cipher_SecKey pseckey, SWIGTYPE_p_Transaction__Handle handle) {
var tmppseckey = cipher_SecKey.getCPtr (pseckey);
    {
      global::System.IntPtr cPtr = skycoinPINVOKE.makeTransactionFromUxOut(coin__UxOut.getCPtr(puxOut), tmppseckey, SWIGTYPE_p_Transaction__Handle.getCPtr(handle));
      coin__Transaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new coin__Transaction(cPtr, false);
      return ret;
    }
  }

  public static coin__Transaction makeTransaction(SWIGTYPE_p_Transaction__Handle handle) {
    global::System.IntPtr cPtr = skycoinPINVOKE.makeTransaction(SWIGTYPE_p_Transaction__Handle.getCPtr(handle));
    coin__Transaction ret = (cPtr == global::System.IntPtr.Zero) ? null : new coin__Transaction(cPtr, false);
    return ret;
  }

  public static int makeTransactions(int n, SWIGTYPE_p_Transactions__Handle handle) {
    int ret = skycoinPINVOKE.makeTransactions(n, SWIGTYPE_p_Transactions__Handle.getCPtr(handle));
    return ret;
  }

  public static int b64_int(uint ch) {
    int ret = skycoinPINVOKE.b64_int(ch);
    return ret;
  }

  public static int b64_decode(SWIGTYPE_p_unsigned_char arg0, uint in_len, SWIGTYPE_p_unsigned_char arg2) {
    int ret = skycoinPINVOKE.b64_decode(SWIGTYPE_p_unsigned_char.getCPtr(arg0), in_len, SWIGTYPE_p_unsigned_char.getCPtr(arg2));
    return ret;
  }

  public static int DecodeBase64(GoSlice encrypted, _GoString_ outs) {
var tmpouts = _GoString_.getCPtr (outs);
    {
      int ret = skycoinPINVOKE.DecodeBase64(GoSlice.getCPtr(encrypted), tmpouts);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static int putUvarint(GoSlice buf, ulong x) {
    int ret = skycoinPINVOKE.putUvarint(GoSlice.getCPtr(buf), x);
    return ret;
  }

  public static int putVarint(GoSlice buf, long x) {
    int ret = skycoinPINVOKE.putVarint(GoSlice.getCPtr(buf), x);
    return ret;
  }

  public static void hashKeyIndexNonce(SWIGTYPE_p_GoSlice_ key, long index, cipher_SecKey nonceHash, cipher_SecKey resultHash) {
var tmpnonceHash = cipher_SecKey.getCPtr (nonceHash);
var tmpresultHash = cipher_SecKey.getCPtr (resultHash);
    {
      skycoinPINVOKE.hashKeyIndexNonce(SWIGTYPE_p_GoSlice_.getCPtr(key), index, tmpnonceHash, tmpresultHash);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public static void convertGoUint8toSHA256(SWIGTYPE_p_GoUint8_ __in, cipher_SHA256 __out) {
    skycoinPINVOKE.convertGoUint8toSHA256(SWIGTYPE_p_GoUint8_.getCPtr(__in), cipher_SHA256.getCPtr(__out));
  }

  public static uint SKY_cipher_SumSHA256(GoSlice seed, cipher_SHA256 sha) {
    uint ret = skycoinPINVOKE.SKY_cipher_SumSHA256__SWIG_0(GoSlice.getCPtr(seed), cipher_SHA256.getCPtr(sha));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_cipher_SignHash(cipher_SHA256 sha, cipher_SecKey sec, cipher_Sig s) {
var tmpsec = cipher_SecKey.getCPtr (sec);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_SignHash__SWIG_0(cipher_SHA256.getCPtr(sha), tmpsec, cipher_Sig.getCPtr(s));
      return ret;
    }
  }

  public static uint SKY_cipher_PubKeyFromSig(cipher_Sig sig, cipher_SHA256 h, cipher_PubKey p) {
    uint ret = skycoinPINVOKE.SKY_cipher_PubKeyFromSig__SWIG_0(cipher_Sig.getCPtr(sig), cipher_SHA256.getCPtr(h), cipher_PubKey.getCPtr(p));
    return ret;
  }

  public static uint SKY_cipher_SHA256_Set(cipher_SHA256 h, GoSlice s) {
    uint ret = skycoinPINVOKE.SKY_cipher_SHA256_Set__SWIG_0(cipher_SHA256.getCPtr(h), GoSlice.getCPtr(s));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_cipher_SHA256_Hex(cipher_SHA256 h, _GoString_ s) {
var tmps = _GoString_.getCPtr (s);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_SHA256_Hex__SWIG_0(cipher_SHA256.getCPtr(h), tmps);
      return ret;
    }
  }

  public static uint SKY_cipher_SHA256FromHex(string s, cipher_SHA256 h) {
var tmps = s;
    {
      uint ret = skycoinPINVOKE.SKY_cipher_SHA256FromHex__SWIG_0(tmps, cipher_SHA256.getCPtr(h));
      return ret;
    }
  }

  public static uint SKY_coin_Transaction_HashInner(SWIGTYPE_p_Transaction__Handle tx, cipher_SHA256 h) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_HashInner__SWIG_0(SWIGTYPE_p_Transaction__Handle.getCPtr(tx), cipher_SHA256.getCPtr(h));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_Hash(SWIGTYPE_p_Transaction__Handle tx, cipher_SHA256 h) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_Hash__SWIG_0(SWIGTYPE_p_Transaction__Handle.getCPtr(tx), cipher_SHA256.getCPtr(h));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_SetInputAt(SWIGTYPE_p_Transaction__Handle tx, long p1, cipher_SHA256 h) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_SetInputAt__SWIG_0(SWIGTYPE_p_Transaction__Handle.getCPtr(tx), p1, cipher_SHA256.getCPtr(h));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_GetInputAt(SWIGTYPE_p_Transaction__Handle tx, long p1, cipher_SHA256 h) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_GetInputAt__SWIG_0(SWIGTYPE_p_Transaction__Handle.getCPtr(tx), p1, cipher_SHA256.getCPtr(h));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_PushInput(SWIGTYPE_p_Transaction__Handle tx, cipher_SHA256 h, SWIGTYPE_p_unsigned_short p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_PushInput__SWIG_0(SWIGTYPE_p_Transaction__Handle.getCPtr(tx), cipher_SHA256.getCPtr(h), SWIGTYPE_p_unsigned_short.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_SignInputs(SWIGTYPE_p_Transaction__Handle handle, cipher_SecKeys __in_pubKeys) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_SignInputs__SWIG_0(SWIGTYPE_p_Transaction__Handle.getCPtr(handle), cipher_SecKeys.getCPtr(__in_pubKeys));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_cipher_GenerateDeterministicKeyPairs(GoSlice seed, long n, cipher_SecKeys __out_secKeys) {
    uint ret = skycoinPINVOKE.SKY_cipher_GenerateDeterministicKeyPairs__SWIG_0(GoSlice.getCPtr(seed), n, cipher_SecKeys.getCPtr(__out_secKeys));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_cipher_GenerateDeterministicKeyPairsSeed(GoSlice seed, long n, GoSlice newSeed, cipher_SecKeys __out_secKeys) {
    uint ret = skycoinPINVOKE.SKY_cipher_GenerateDeterministicKeyPairsSeed__SWIG_0(GoSlice.getCPtr(seed), n, GoSlice.getCPtr (newSeed), cipher_SecKeys.getCPtr(__out_secKeys));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_VerifyTransactionCoinsSpending(coin_UxOutArray __uxIn, coin_UxOutArray __uxOut) {
    uint ret = skycoinPINVOKE.SKY_coin_VerifyTransactionCoinsSpending__SWIG_0(coin_UxOutArray.getCPtr(__uxIn), coin_UxOutArray.getCPtr(__uxOut));
    return ret;
  }

  public static uint SKY_coin_VerifyTransactionHoursSpending(ulong _headTime, coin_UxOutArray __uxIn, coin_UxOutArray __uxOut) {
    uint ret = skycoinPINVOKE.SKY_coin_VerifyTransactionHoursSpending__SWIG_0(_headTime, coin_UxOutArray.getCPtr(__uxIn), coin_UxOutArray.getCPtr(__uxOut));
    return ret;
  }

  public static uint SKY_coin_CreateUnspents(coin__BlockHeader bh, SWIGTYPE_p_Transaction__Handle t, coin_UxOutArray __return_Ux) {
    uint ret = skycoinPINVOKE.SKY_coin_CreateUnspents__SWIG_0(coin__BlockHeader.getCPtr(bh), SWIGTYPE_p_Transaction__Handle.getCPtr(t), coin_UxOutArray.getCPtr(__return_Ux));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_VerifyInput(SWIGTYPE_p_Transaction__Handle handle, coin_UxOutArray __uxIn) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_VerifyInput__SWIG_0(SWIGTYPE_p_Transaction__Handle.getCPtr(handle), coin_UxOutArray.getCPtr(__uxIn));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_UxArray_HasDupes(coin_UxOutArray __uxIn, SWIGTYPE_p_unsigned_char p1) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_HasDupes__SWIG_0(coin_UxOutArray.getCPtr(__uxIn), SWIGTYPE_p_unsigned_char.getCPtr(p1));
    return ret;
  }

  public static uint SKY_coin_UxArray_Coins(coin_UxOutArray __uxIn, SWIGTYPE_p_unsigned_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_Coins__SWIG_0(coin_UxOutArray.getCPtr(__uxIn), SWIGTYPE_p_unsigned_long_long.getCPtr(p1));
    return ret;
  }

  public static uint SKY_coin_UxArray_CoinHours(coin_UxOutArray __uxIn, ulong p1, SWIGTYPE_p_unsigned_long_long p2) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_CoinHours__SWIG_0(coin_UxOutArray.getCPtr(__uxIn), p1, SWIGTYPE_p_unsigned_long_long.getCPtr(p2));
    return ret;
  }

  public static uint SKY_coin_UxArray_Less(coin_UxOutArray __uxIn, long p1, long p2, SWIGTYPE_p_unsigned_char p3) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_Less__SWIG_0(coin_UxOutArray.getCPtr(__uxIn), p1, p2, SWIGTYPE_p_unsigned_char.getCPtr(p3));
    return ret;
  }

  public static uint SKY_coin_UxArray_Swap(coin_UxOutArray __uxIn, long p1, long p2) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_Swap__SWIG_0(coin_UxOutArray.getCPtr(__uxIn), p1, p2);
    return ret;
  }

  public static uint SKY_coin_UxArray_Sub(coin_UxOutArray __uxIn, coin_UxOutArray __uxIn2, coin_UxOutArray __return_Ux) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_Sub__SWIG_0(coin_UxOutArray.getCPtr(__uxIn), coin_UxOutArray.getCPtr(__uxIn2), coin_UxOutArray.getCPtr(__return_Ux));
    return ret;
  }

  public static uint SKY_coin_UxArray_Add(coin_UxOutArray __uxIn, coin_UxOutArray __uxIn2, coin_UxOutArray __return_Ux) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_Add__SWIG_0(coin_UxOutArray.getCPtr(__uxIn), coin_UxOutArray.getCPtr(__uxIn2), coin_UxOutArray.getCPtr(__return_Ux));
    return ret;
  }

  public static uint SKY_coin_NewAddressUxOuts(coin_UxOutArray __uxIn, SWIGTYPE_p_AddressUxOuts_Handle p1) {
    uint ret = skycoinPINVOKE.SKY_coin_NewAddressUxOuts__SWIG_0(coin_UxOutArray.getCPtr(__uxIn), SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p1));
    return ret;
  }

  public static uint SKY_coin_UxArray_Hashes(coin_UxOutArray __uxIn, cipher_SHA256s __out_hashes) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_Hashes__SWIG_0(coin_UxOutArray.getCPtr(__uxIn), cipher_SHA256s.getCPtr(__out_hashes));
    return ret;
  }

  public static uint SKY_coin_AddressUxOuts_Flatten(SWIGTYPE_p_AddressUxOuts_Handle p0, coin_UxOutArray __return_Ux) {
    uint ret = skycoinPINVOKE.SKY_coin_AddressUxOuts_Flatten__SWIG_0(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p0), coin_UxOutArray.getCPtr(__return_Ux));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_AddressUxOuts_Get(SWIGTYPE_p_AddressUxOuts_Handle p0, cipher__Address p1, coin_UxOutArray __return_Ux) {
    uint ret = skycoinPINVOKE.SKY_coin_AddressUxOuts_Get__SWIG_0(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p0), cipher__Address.getCPtr(p1), coin_UxOutArray.getCPtr(__return_Ux));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_AddressUxOuts_Set(SWIGTYPE_p_AddressUxOuts_Handle p0, cipher__Address p1, coin_UxOutArray __uxIn) {
    uint ret = skycoinPINVOKE.SKY_coin_AddressUxOuts_Set__SWIG_0(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p0), cipher__Address.getCPtr(p1), coin_UxOutArray.getCPtr(__uxIn));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_AddressUxOuts_Keys(SWIGTYPE_p_AddressUxOuts_Handle p0, cipher_Addresses __out_addr) {
    uint ret = skycoinPINVOKE.SKY_coin_AddressUxOuts_Keys__SWIG_0(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p0), cipher_Addresses.getCPtr(__out_addr));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transactions_Hashes(SWIGTYPE_p_Transactions__Handle p0, cipher_SHA256s __out_hashes) {
    uint ret = skycoinPINVOKE.SKY_coin_Transactions_Hashes__SWIG_0(SWIGTYPE_p_Transactions__Handle.getCPtr(p0), cipher_SHA256s.getCPtr(__out_hashes));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_UxOut_Hash(coin__UxOut ux, cipher_SHA256 sha) {
    uint ret = skycoinPINVOKE.SKY_coin_UxOut_Hash__SWIG_0(coin__UxOut.getCPtr(ux), cipher_SHA256.getCPtr(sha));
    return ret;
  }

  public static uint SKY_cipher_AddSHA256(cipher_SHA256 p0, cipher_SHA256 p1, cipher_SHA256 p2) {
    uint ret = skycoinPINVOKE.SKY_cipher_AddSHA256__SWIG_0(cipher_SHA256.getCPtr(p0), cipher_SHA256.getCPtr(p1), cipher_SHA256.getCPtr(p2));
    return ret;
  }

  public static uint SKY_coin_GetTransactionObject(SWIGTYPE_p_Transaction__Handle tx, coin__Transaction p1) {
    uint ret = skycoinPINVOKE.SKY_coin_GetTransactionObject__SWIG_0(SWIGTYPE_p_Transaction__Handle.getCPtr(tx), coin__Transaction.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_UxBody_Hash(coin__UxBody p0, cipher_SHA256 p1) {
    uint ret = skycoinPINVOKE.SKY_coin_UxBody_Hash__SWIG_0(coin__UxBody.getCPtr(p0), cipher_SHA256.getCPtr(p1));
    return ret;
  }

  public static uint SKY_coin_UxOut_SnapshotHash(coin__UxOut p0, cipher_SHA256 p1) {
    uint ret = skycoinPINVOKE.SKY_coin_UxOut_SnapshotHash__SWIG_0(coin__UxOut.getCPtr(p0), cipher_SHA256.getCPtr(p1));
    return ret;
  }

  public static uint SKY_fee_TransactionFee(SWIGTYPE_p_Transaction__Handle handle, ulong p1, coin_UxOutArray __uxIn, SWIGTYPE_p_unsigned_long_long p3) {
    uint ret = skycoinPINVOKE.SKY_fee_TransactionFee__SWIG_0(SWIGTYPE_p_Transaction__Handle.getCPtr(handle), p1, coin_UxOutArray.getCPtr(__uxIn), SWIGTYPE_p_unsigned_long_long.getCPtr(p3));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_cipher_CheckSecKeyHash(cipher_SecKey s, cipher_SHA256 sha) {
    uint ret = skycoinPINVOKE.SKY_cipher_CheckSecKeyHash__SWIG_0(cipher_SecKey.getCPtr(s), cipher_SHA256.getCPtr(sha));
    return ret;
  }

  public static uint SKY_coin_NewBlock(SWIGTYPE_p_Block__Handle p0, ulong p1, cipher_SHA256 p2, SWIGTYPE_p_Transactions__Handle p3, SWIGTYPE_p_FeeCalculator p4, SWIGTYPE_p_Block__Handle p5) {
    uint ret = skycoinPINVOKE.SKY_coin_NewBlock__SWIG_0(SWIGTYPE_p_Block__Handle.getCPtr(p0), p1, cipher_SHA256.getCPtr(p2), SWIGTYPE_p_Transactions__Handle.getCPtr(p3), SWIGTYPE_p_FeeCalculator.getCPtr(p4), SWIGTYPE_p_Block__Handle.getCPtr(p5));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Block_HashHeader(SWIGTYPE_p_Block__Handle p0, cipher_SHA256 p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Block_HashHeader__SWIG_0(SWIGTYPE_p_Block__Handle.getCPtr(p0), cipher_SHA256.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Block_PreHashHeader(SWIGTYPE_p_Block__Handle p0, cipher_SHA256 p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Block_PreHashHeader__SWIG_0(SWIGTYPE_p_Block__Handle.getCPtr(p0), cipher_SHA256.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_BlockBody_Hash(SWIGTYPE_p_BlockBody__Handle p0, cipher_SHA256 p1) {
    uint ret = skycoinPINVOKE.SKY_coin_BlockBody_Hash__SWIG_0(SWIGTYPE_p_BlockBody__Handle.getCPtr(p0), cipher_SHA256.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_BlockHeader_Hash(coin__BlockHeader p0, cipher_SHA256 p1) {
    uint ret = skycoinPINVOKE.SKY_coin_BlockHeader_Hash__SWIG_0(coin__BlockHeader.getCPtr(p0), cipher_SHA256.getCPtr(p1));
    return ret;
  }

  public static uint SKY_coin_Block_HashBody(SWIGTYPE_p_Block__Handle p0, cipher_SHA256 p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Block_HashBody__SWIG_0(SWIGTYPE_p_Block__Handle.getCPtr(p0), cipher_SHA256.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_NewBlock(SWIGTYPE_p_Block__Handle p0, ulong p1, cipher_SecKey p2, SWIGTYPE_p_Transactions__Handle p3, SWIGTYPE_p_FeeCalculator p4, SWIGTYPE_p_Block__Handle p5) {
var tmpp2 = cipher_SecKey.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_coin_NewBlock__SWIG_1(SWIGTYPE_p_Block__Handle.getCPtr(p0), p1, tmpp2, SWIGTYPE_p_Transactions__Handle.getCPtr(p3), SWIGTYPE_p_FeeCalculator.getCPtr(p4), SWIGTYPE_p_Block__Handle.getCPtr(p5));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_SignedBlock_VerifySignature(coin__SignedBlock p0, cipher_PubKey p1) {
var tmpp1 = cipher_PubKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_SignedBlock_VerifySignature(coin__SignedBlock.getCPtr(p0), tmpp1);
      return ret;
    }
  }

  public static uint SKY_coin_NewGenesisBlock(cipher__Address p0, ulong p1, ulong p2, SWIGTYPE_p_Block__Handle p3) {
    uint ret = skycoinPINVOKE.SKY_coin_NewGenesisBlock(cipher__Address.getCPtr(p0), p1, p2, SWIGTYPE_p_Block__Handle.getCPtr(p3));
    return ret;
  }

  public static uint SKY_coin_Block_HashHeader(SWIGTYPE_p_Block__Handle p0, cipher_SecKey p1) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_Block_HashHeader__SWIG_1(SWIGTYPE_p_Block__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_Block_PreHashHeader(SWIGTYPE_p_Block__Handle p0, cipher_SecKey p1) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_Block_PreHashHeader__SWIG_1(SWIGTYPE_p_Block__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_Block_Time(SWIGTYPE_p_Block__Handle p0, SWIGTYPE_p_unsigned_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Block_Time(SWIGTYPE_p_Block__Handle.getCPtr(p0), SWIGTYPE_p_unsigned_long_long.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Block_Seq(SWIGTYPE_p_Block__Handle p0, SWIGTYPE_p_unsigned_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Block_Seq(SWIGTYPE_p_Block__Handle.getCPtr(p0), SWIGTYPE_p_unsigned_long_long.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Block_HashBody(SWIGTYPE_p_Block__Handle p0, cipher_SecKey p1) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_Block_HashBody__SWIG_1(SWIGTYPE_p_Block__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_Block_Size(SWIGTYPE_p_Block__Handle p0, SWIGTYPE_p_unsigned_int p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Block_Size(SWIGTYPE_p_Block__Handle.getCPtr(p0), SWIGTYPE_p_unsigned_int.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Block_String(SWIGTYPE_p_Block__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_Block_String(SWIGTYPE_p_Block__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_Block_GetTransaction(SWIGTYPE_p_Block__Handle p0, cipher_SecKey p1, SWIGTYPE_p_Transaction__Handle p2, SWIGTYPE_p_unsigned_char p3) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_Block_GetTransaction(SWIGTYPE_p_Block__Handle.getCPtr(p0), tmpp1, SWIGTYPE_p_Transaction__Handle.getCPtr(p2), SWIGTYPE_p_unsigned_char.getCPtr(p3));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_NewBlockHeader(coin__BlockHeader p0, cipher_SecKey p1, ulong p2, ulong p3, SWIGTYPE_p_BlockBody__Handle p4, coin__BlockHeader p5) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_NewBlockHeader(coin__BlockHeader.getCPtr(p0), tmpp1, p2, p3, SWIGTYPE_p_BlockBody__Handle.getCPtr(p4), coin__BlockHeader.getCPtr(p5));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_BlockHeader_Hash(coin__BlockHeader p0, cipher_SecKey p1) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_BlockHeader_Hash__SWIG_1(coin__BlockHeader.getCPtr(p0), tmpp1);
      return ret;
    }
  }

  public static uint SKY_coin_BlockHeader_Bytes(coin__BlockHeader p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_coin_BlockHeader_Bytes(coin__BlockHeader.getCPtr(p0), GoSlice.getCPtr (p1));
    return ret;
  }

  public static uint SKY_coin_BlockHeader_String(coin__BlockHeader p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_BlockHeader_String(coin__BlockHeader.getCPtr(p0), tmpp1);
      return ret;
    }
  }

  public static uint SKY_coin_BlockBody_Hash(SWIGTYPE_p_BlockBody__Handle p0, cipher_SecKey p1) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_BlockBody_Hash__SWIG_1(SWIGTYPE_p_BlockBody__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_BlockBody_Size(SWIGTYPE_p_BlockBody__Handle p0, SWIGTYPE_p_unsigned_int p1) {
    uint ret = skycoinPINVOKE.SKY_coin_BlockBody_Size(SWIGTYPE_p_BlockBody__Handle.getCPtr(p0), SWIGTYPE_p_unsigned_int.getCPtr(p1));
    return ret;
  }

  public static uint SKY_coin_BlockBody_Bytes(SWIGTYPE_p_BlockBody__Handle p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_coin_BlockBody_Bytes(SWIGTYPE_p_BlockBody__Handle.getCPtr(p0), GoSlice.getCPtr (p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_CreateUnspents(coin__BlockHeader p0, SWIGTYPE_p_Transaction__Handle p1, GoSlice p2) {
    uint ret = skycoinPINVOKE.SKY_coin_CreateUnspents__SWIG_1(coin__BlockHeader.getCPtr(p0), SWIGTYPE_p_Transaction__Handle.getCPtr(p1), GoSlice.getCPtr (p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_CreateUnspent(coin__BlockHeader p0, SWIGTYPE_p_Transaction__Handle p1, long p2, coin__UxOut p3) {
    uint ret = skycoinPINVOKE.SKY_coin_CreateUnspent(coin__BlockHeader.getCPtr(p0), SWIGTYPE_p_Transaction__Handle.getCPtr(p1), p2, coin__UxOut.getCPtr(p3));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_GetBlockObject(SWIGTYPE_p_Block__Handle p0, SWIGTYPE_p_p_coin__Block p1) {
    uint ret = skycoinPINVOKE.SKY_coin_GetBlockObject(SWIGTYPE_p_Block__Handle.getCPtr(p0), SWIGTYPE_p_p_coin__Block.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_GetBlockBody(SWIGTYPE_p_Block__Handle p0, SWIGTYPE_p_BlockBody__Handle p1) {
    uint ret = skycoinPINVOKE.SKY_coin_GetBlockBody(SWIGTYPE_p_Block__Handle.getCPtr(p0), SWIGTYPE_p_BlockBody__Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_NewEmptyBlock(SWIGTYPE_p_Transactions__Handle p0, SWIGTYPE_p_Block__Handle p1) {
    uint ret = skycoinPINVOKE.SKY_coin_NewEmptyBlock(SWIGTYPE_p_Transactions__Handle.getCPtr(p0), SWIGTYPE_p_Block__Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_bip39_NewDefaultMnemomic(_GoString_ p0) {
var tmpp0 = _GoString_.getCPtr (p0);
    {
      uint ret = skycoinPINVOKE.SKY_bip39_NewDefaultMnemomic(tmpp0);
      return ret;
    }
  }

  public static uint SKY_bip39_NewEntropy(long p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_bip39_NewEntropy(p0, GoSlice.getCPtr (p1));
    return ret;
  }

  public static uint SKY_bip39_NewMnemonic(GoSlice p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_bip39_NewMnemonic(GoSlice.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_bip39_MnemonicToByteArray(string p0, GoSlice p1) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_bip39_MnemonicToByteArray(tmpp0, GoSlice.getCPtr (p1));
      return ret;
    }
  }

  public static uint SKY_bip39_IsMnemonicValid(string p0, SWIGTYPE_p_unsigned_char p1) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_bip39_IsMnemonicValid(tmpp0, SWIGTYPE_p_unsigned_char.getCPtr(p1));
      return ret;
    }
  }

  public static uint SKY_api_NewClient(string p0, SWIGTYPE_p_Client__Handle p1) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_api_NewClient(tmpp0, SWIGTYPE_p_Client__Handle.getCPtr(p1));
      return ret;
    }
  }

  public static uint SKY_api_Client_CSRF(SWIGTYPE_p_Client__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_CSRF(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_Version(SWIGTYPE_p_Client__Handle p0, SWIGTYPE_p_Handle p1) {
    uint ret = skycoinPINVOKE.SKY_api_Client_Version(SWIGTYPE_p_Client__Handle.getCPtr(p0), SWIGTYPE_p_Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_Outputs(SWIGTYPE_p_Client__Handle p0, SWIGTYPE_p_Handle p1) {
    uint ret = skycoinPINVOKE.SKY_api_Client_Outputs(SWIGTYPE_p_Client__Handle.getCPtr(p0), SWIGTYPE_p_Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_OutputsForAddresses(SWIGTYPE_p_Client__Handle p0, GoSlice p1, SWIGTYPE_p_Handle p2) {
    uint ret = skycoinPINVOKE.SKY_api_Client_OutputsForAddresses(SWIGTYPE_p_Client__Handle.getCPtr(p0), GoSlice.getCPtr(p1), SWIGTYPE_p_Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_OutputsForHashes(SWIGTYPE_p_Client__Handle p0, GoSlice p1, SWIGTYPE_p_Handle p2) {
    uint ret = skycoinPINVOKE.SKY_api_Client_OutputsForHashes(SWIGTYPE_p_Client__Handle.getCPtr(p0), GoSlice.getCPtr(p1), SWIGTYPE_p_Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_CoinSupply(SWIGTYPE_p_Client__Handle p0, SWIGTYPE_p_Handle p1) {
    uint ret = skycoinPINVOKE.SKY_api_Client_CoinSupply(SWIGTYPE_p_Client__Handle.getCPtr(p0), SWIGTYPE_p_Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_BlockByHash(SWIGTYPE_p_Client__Handle p0, string p1, SWIGTYPE_p_Handle p2) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_BlockByHash(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, SWIGTYPE_p_Handle.getCPtr(p2));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_BlockBySeq(SWIGTYPE_p_Client__Handle p0, ulong p1, SWIGTYPE_p_Handle p2) {
    uint ret = skycoinPINVOKE.SKY_api_Client_BlockBySeq(SWIGTYPE_p_Client__Handle.getCPtr(p0), p1, SWIGTYPE_p_Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_Blocks(SWIGTYPE_p_Client__Handle p0, GoSlice p1, SWIGTYPE_p_Handle p2) {
    uint ret = skycoinPINVOKE.SKY_api_Client_Blocks(SWIGTYPE_p_Client__Handle.getCPtr(p0), GoSlice.getCPtr(p1), SWIGTYPE_p_Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_LastBlocks(SWIGTYPE_p_Client__Handle p0, ulong p1, SWIGTYPE_p_Handle p2) {
    uint ret = skycoinPINVOKE.SKY_api_Client_LastBlocks(SWIGTYPE_p_Client__Handle.getCPtr(p0), p1, SWIGTYPE_p_Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_BlockchainMetadata(SWIGTYPE_p_Client__Handle p0, SWIGTYPE_p_Handle p1) {
    uint ret = skycoinPINVOKE.SKY_api_Client_BlockchainMetadata(SWIGTYPE_p_Client__Handle.getCPtr(p0), SWIGTYPE_p_Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_BlockchainProgress(SWIGTYPE_p_Client__Handle p0, SWIGTYPE_p_Handle p1) {
    uint ret = skycoinPINVOKE.SKY_api_Client_BlockchainProgress(SWIGTYPE_p_Client__Handle.getCPtr(p0), SWIGTYPE_p_Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_Balance(SWIGTYPE_p_Client__Handle p0, GoSlice p1, wallet__BalancePair p2) {
    uint ret = skycoinPINVOKE.SKY_api_Client_Balance(SWIGTYPE_p_Client__Handle.getCPtr(p0), GoSlice.getCPtr(p1), wallet__BalancePair.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_UxOut(SWIGTYPE_p_Client__Handle p0, string p1, SWIGTYPE_p_Handle p2) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_UxOut(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, SWIGTYPE_p_Handle.getCPtr(p2));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_AddressUxOuts(SWIGTYPE_p_Client__Handle p0, string p1, SWIGTYPE_p_Handle p2) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_AddressUxOuts(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, SWIGTYPE_p_Handle.getCPtr(p2));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_Wallet(SWIGTYPE_p_Client__Handle p0, string p1, SWIGTYPE_p_WalletResponse__Handle p2) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_Wallet(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, SWIGTYPE_p_WalletResponse__Handle.getCPtr(p2));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_Wallets(SWIGTYPE_p_Client__Handle p0, SWIGTYPE_p_Wallets__Handle p1) {
    uint ret = skycoinPINVOKE.SKY_api_Client_Wallets(SWIGTYPE_p_Client__Handle.getCPtr(p0), SWIGTYPE_p_Wallets__Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_CreateUnencryptedWallet(SWIGTYPE_p_Client__Handle p0, string p1, string p2, long p3, SWIGTYPE_p_WalletResponse__Handle p4) {
var tmpp1 = p1;
var tmpp2 = p2;
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_CreateUnencryptedWallet(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, tmpp2, p3, SWIGTYPE_p_WalletResponse__Handle.getCPtr(p4));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_CreateEncryptedWallet(SWIGTYPE_p_Client__Handle p0, string p1, string p2, string p3, long p4, SWIGTYPE_p_WalletResponse__Handle p5) {
var tmpp1 = p1;
var tmpp2 = p2;
var tmpp3 = p3;
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_CreateEncryptedWallet(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, tmpp2, tmpp3, p4, SWIGTYPE_p_WalletResponse__Handle.getCPtr(p5));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_NewWalletAddress(SWIGTYPE_p_Client__Handle p0, string p1, long p2, string p3, SWIGTYPE_p_Strings__Handle p4) {
var tmpp1 = p1;
var tmpp3 = p3;
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_NewWalletAddress(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, p2, tmpp3, SWIGTYPE_p_Strings__Handle.getCPtr(p4));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_WalletBalance(SWIGTYPE_p_Client__Handle p0, string p1, wallet__BalancePair p2) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_WalletBalance(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, wallet__BalancePair.getCPtr(p2));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_Spend(SWIGTYPE_p_Client__Handle p0, string p1, string p2, ulong p3, string p4, SWIGTYPE_p_SpendResult_Handle p5) {
var tmpp1 = p1;
var tmpp2 = p2;
var tmpp4 = p4;
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_Spend(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, tmpp2, p3, tmpp4, SWIGTYPE_p_SpendResult_Handle.getCPtr(p5));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_CreateTransaction(SWIGTYPE_p_Client__Handle p0, SWIGTYPE_p_Handle p1, SWIGTYPE_p_CreateTransactionResponse__Handle p2) {
    uint ret = skycoinPINVOKE.SKY_api_Client_CreateTransaction(SWIGTYPE_p_Client__Handle.getCPtr(p0), SWIGTYPE_p_Handle.getCPtr(p1), SWIGTYPE_p_CreateTransactionResponse__Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_UpdateWallet(SWIGTYPE_p_Client__Handle p0, string p1, string p2) {
var tmpp1 = p1;
var tmpp2 = p2;
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_UpdateWallet(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, tmpp2);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_WalletFolderName(SWIGTYPE_p_Client__Handle p0, SWIGTYPE_p_Handle p1) {
    uint ret = skycoinPINVOKE.SKY_api_Client_WalletFolderName(SWIGTYPE_p_Client__Handle.getCPtr(p0), SWIGTYPE_p_Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_NewSeed(SWIGTYPE_p_Client__Handle p0, long p1, _GoString_ p2) {
var tmpp2 = _GoString_.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_NewSeed(SWIGTYPE_p_Client__Handle.getCPtr(p0), p1, tmpp2);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_WalletSeed(SWIGTYPE_p_Client__Handle p0, string p1, string p2, _GoString_ p3) {
var tmpp1 = p1;
var tmpp2 = p2;
var tmpp3 = _GoString_.getCPtr (p3);
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_WalletSeed(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, tmpp2, tmpp3);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_NetworkConnection(SWIGTYPE_p_Client__Handle p0, string p1, SWIGTYPE_p_Handle p2) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_NetworkConnection(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, SWIGTYPE_p_Handle.getCPtr(p2));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_NetworkConnections(SWIGTYPE_p_Client__Handle p0, api__NetworkConnectionsFilter p1, SWIGTYPE_p_Handle p2) {
    uint ret = skycoinPINVOKE.SKY_api_Client_NetworkConnections(SWIGTYPE_p_Client__Handle.getCPtr(p0), api__NetworkConnectionsFilter.getCPtr(p1), SWIGTYPE_p_Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_NetworkDefaultPeers(SWIGTYPE_p_Client__Handle p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_api_Client_NetworkDefaultPeers(SWIGTYPE_p_Client__Handle.getCPtr(p0), GoSlice.getCPtr (p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_NetworkTrustedPeers(SWIGTYPE_p_Client__Handle p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_api_Client_NetworkTrustedPeers(SWIGTYPE_p_Client__Handle.getCPtr(p0), GoSlice.getCPtr (p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_NetworkExchangedPeers(SWIGTYPE_p_Client__Handle p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_api_Client_NetworkExchangedPeers(SWIGTYPE_p_Client__Handle.getCPtr(p0), GoSlice.getCPtr (p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_PendingTransactions(SWIGTYPE_p_Client__Handle p0, SWIGTYPE_p_Handle p1) {
    uint ret = skycoinPINVOKE.SKY_api_Client_PendingTransactions(SWIGTYPE_p_Client__Handle.getCPtr(p0), SWIGTYPE_p_Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_Transaction(SWIGTYPE_p_Client__Handle p0, string p1, SWIGTYPE_p_Handle p2) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_Transaction(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, SWIGTYPE_p_Handle.getCPtr(p2));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_Transactions(SWIGTYPE_p_Client__Handle p0, GoSlice p1, SWIGTYPE_p_Handle p2) {
    uint ret = skycoinPINVOKE.SKY_api_Client_Transactions(SWIGTYPE_p_Client__Handle.getCPtr(p0), GoSlice.getCPtr(p1), SWIGTYPE_p_Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_ConfirmedTransactions(SWIGTYPE_p_Client__Handle p0, GoSlice p1, SWIGTYPE_p_Handle p2) {
    uint ret = skycoinPINVOKE.SKY_api_Client_ConfirmedTransactions(SWIGTYPE_p_Client__Handle.getCPtr(p0), GoSlice.getCPtr(p1), SWIGTYPE_p_Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_UnconfirmedTransactions(SWIGTYPE_p_Client__Handle p0, GoSlice p1, SWIGTYPE_p_Handle p2) {
    uint ret = skycoinPINVOKE.SKY_api_Client_UnconfirmedTransactions(SWIGTYPE_p_Client__Handle.getCPtr(p0), GoSlice.getCPtr(p1), SWIGTYPE_p_Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_InjectTransaction(SWIGTYPE_p_Client__Handle p0, SWIGTYPE_p_Transaction__Handle p1, _GoString_ p2) {
var tmpp2 = _GoString_.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_InjectTransaction(SWIGTYPE_p_Client__Handle.getCPtr(p0), SWIGTYPE_p_Transaction__Handle.getCPtr(p1), tmpp2);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_ResendUnconfirmedTransactions(SWIGTYPE_p_Client__Handle p0, SWIGTYPE_p_Handle p1) {
    uint ret = skycoinPINVOKE.SKY_api_Client_ResendUnconfirmedTransactions(SWIGTYPE_p_Client__Handle.getCPtr(p0), SWIGTYPE_p_Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_RawTransaction(SWIGTYPE_p_Client__Handle p0, string p1, _GoString_ p2) {
var tmpp1 = p1;
var tmpp2 = _GoString_.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_RawTransaction(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, tmpp2);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_AddressTransactions(SWIGTYPE_p_Client__Handle p0, string p1, SWIGTYPE_p_Handle p2) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_AddressTransactions(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, SWIGTYPE_p_Handle.getCPtr(p2));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_Richlist(SWIGTYPE_p_Client__Handle p0, api__RichlistParams p1, SWIGTYPE_p_Handle p2) {
    uint ret = skycoinPINVOKE.SKY_api_Client_Richlist(SWIGTYPE_p_Client__Handle.getCPtr(p0), api__RichlistParams.getCPtr(p1), SWIGTYPE_p_Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_AddressCount(SWIGTYPE_p_Client__Handle p0, SWIGTYPE_p_unsigned_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_api_Client_AddressCount(SWIGTYPE_p_Client__Handle.getCPtr(p0), SWIGTYPE_p_unsigned_long_long.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_UnloadWallet(SWIGTYPE_p_Client__Handle p0, string p1) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_UnloadWallet(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_Health(SWIGTYPE_p_Client__Handle p0, SWIGTYPE_p_Handle p1) {
    uint ret = skycoinPINVOKE.SKY_api_Client_Health(SWIGTYPE_p_Client__Handle.getCPtr(p0), SWIGTYPE_p_Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Client_EncryptWallet(SWIGTYPE_p_Client__Handle p0, string p1, string p2, SWIGTYPE_p_WalletResponse__Handle p3) {
var tmpp1 = p1;
var tmpp2 = p2;
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_EncryptWallet(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, tmpp2, SWIGTYPE_p_WalletResponse__Handle.getCPtr(p3));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Client_DecryptWallet(SWIGTYPE_p_Client__Handle p0, string p1, string p2, SWIGTYPE_p_WalletResponse__Handle p3) {
var tmpp1 = p1;
var tmpp2 = p2;
    {
      uint ret = skycoinPINVOKE.SKY_api_Client_DecryptWallet(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1, tmpp2, SWIGTYPE_p_WalletResponse__Handle.getCPtr(p3));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_NewWalletResponse(SWIGTYPE_p_Wallet__Handle p0, SWIGTYPE_p_WalletResponse__Handle p1) {
    uint ret = skycoinPINVOKE.SKY_api_NewWalletResponse(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), SWIGTYPE_p_WalletResponse__Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_NewCreateTransactionResponse(SWIGTYPE_p_Transaction__Handle p0, GoSlice p1, SWIGTYPE_p_CreateTransactionResponse__Handle p2) {
    uint ret = skycoinPINVOKE.SKY_api_NewCreateTransactionResponse(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), GoSlice.getCPtr(p1), SWIGTYPE_p_CreateTransactionResponse__Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_NewCreatedTransaction(SWIGTYPE_p_Transaction__Handle p0, GoSlice p1, SWIGTYPE_p_CreatedTransaction__Handle p2) {
    uint ret = skycoinPINVOKE.SKY_api_NewCreatedTransaction(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), GoSlice.getCPtr(p1), SWIGTYPE_p_CreatedTransaction__Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_CreatedTransaction_ToTransaction(SWIGTYPE_p_CreatedTransaction__Handle p0, SWIGTYPE_p_Transaction__Handle p1) {
    uint ret = skycoinPINVOKE.SKY_api_CreatedTransaction_ToTransaction(SWIGTYPE_p_CreatedTransaction__Handle.getCPtr(p0), SWIGTYPE_p_Transaction__Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_NewCreatedTransactionOutput(coin__TransactionOutput p0, cipher_SecKey p1, SWIGTYPE_p_CreatedTransactionOutput__Handle p2) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_api_NewCreatedTransactionOutput(coin__TransactionOutput.getCPtr(p0), tmpp1, SWIGTYPE_p_CreatedTransactionOutput__Handle.getCPtr(p2));
      return ret;
    }
  }

  public static uint SKY_api_NewCreatedTransactionInput(wallet__UxBalance p0, SWIGTYPE_p_CreatedTransactionInput__Handle p1) {
    uint ret = skycoinPINVOKE.SKY_api_NewCreatedTransactionInput(wallet__UxBalance.getCPtr(p0), SWIGTYPE_p_CreatedTransactionInput__Handle.getCPtr(p1));
    return ret;
  }

  public static uint SKY_wallet_NewError(GoInterface p0) {
    uint ret = skycoinPINVOKE.SKY_wallet_NewError(GoInterface.getCPtr(p0));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_wallet_NewWallet(string p0, SWIGTYPE_p_Options__Handle p1, SWIGTYPE_p_Wallet__Handle p2) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_wallet_NewWallet(tmpp0, SWIGTYPE_p_Options__Handle.getCPtr(p1), SWIGTYPE_p_Wallet__Handle.getCPtr(p2));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_wallet_Wallet_Lock(SWIGTYPE_p_Wallet__Handle p0, GoSlice p1, string p2) {
var tmpp2 = p2;
    {
      uint ret = skycoinPINVOKE.SKY_wallet_Wallet_Lock(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), GoSlice.getCPtr(p1), tmpp2);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_wallet_Wallet_Unlock(SWIGTYPE_p_Wallet__Handle p0, GoSlice p1, SWIGTYPE_p_Wallet__Handle p2) {
    uint ret = skycoinPINVOKE.SKY_wallet_Wallet_Unlock(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), GoSlice.getCPtr(p1), SWIGTYPE_p_Wallet__Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_wallet_Load(string p0, SWIGTYPE_p_Wallet__Handle p1) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_wallet_Load(tmpp0, SWIGTYPE_p_Wallet__Handle.getCPtr(p1));
      return ret;
    }
  }

  public static uint SKY_wallet_Wallet_Save(SWIGTYPE_p_Wallet__Handle p0, string p1) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_wallet_Wallet_Save(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_wallet_Wallet_Validate(SWIGTYPE_p_Wallet__Handle p0) {
    uint ret = skycoinPINVOKE.SKY_wallet_Wallet_Validate(SWIGTYPE_p_Wallet__Handle.getCPtr(p0));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_wallet_Wallet_Type(SWIGTYPE_p_Wallet__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_wallet_Wallet_Type(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_wallet_Wallet_Version(SWIGTYPE_p_Wallet__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_wallet_Wallet_Version(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_wallet_Wallet_Filename(SWIGTYPE_p_Wallet__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_wallet_Wallet_Filename(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_wallet_Wallet_Label(SWIGTYPE_p_Wallet__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_wallet_Wallet_Label(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_wallet_Wallet_IsEncrypted(SWIGTYPE_p_Wallet__Handle p0, SWIGTYPE_p_unsigned_char p1) {
    uint ret = skycoinPINVOKE.SKY_wallet_Wallet_IsEncrypted(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), SWIGTYPE_p_unsigned_char.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_wallet_Wallet_GenerateAddresses(SWIGTYPE_p_Wallet__Handle p0, ulong p1, GoSlice p2) {
    uint ret = skycoinPINVOKE.SKY_wallet_Wallet_GenerateAddresses(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), p1, GoSlice.getCPtr (p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_wallet_Wallet_GetAddresses(SWIGTYPE_p_Wallet__Handle p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_wallet_Wallet_GetAddresses(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), GoSlice.getCPtr (p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_wallet_Wallet_GetEntry(SWIGTYPE_p_Wallet__Handle p0, cipher__Address p1, wallet__Entry p2, SWIGTYPE_p_unsigned_char p3) {
    uint ret = skycoinPINVOKE.SKY_wallet_Wallet_GetEntry(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), cipher__Address.getCPtr(p1), wallet__Entry.getCPtr(p2), SWIGTYPE_p_unsigned_char.getCPtr(p3));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_wallet_Wallet_AddEntry(SWIGTYPE_p_Wallet__Handle p0, wallet__Entry p1) {
    uint ret = skycoinPINVOKE.SKY_wallet_Wallet_AddEntry(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), wallet__Entry.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_wallet_DistributeSpendHours(ulong p0, ulong p1, byte p2, SWIGTYPE_p_unsigned_long_long p3, GoSlice p4, SWIGTYPE_p_unsigned_long_long p5) {
    uint ret = skycoinPINVOKE.SKY_wallet_DistributeSpendHours(p0, p1, p2, SWIGTYPE_p_unsigned_long_long.getCPtr(p3), GoSlice.getCPtr (p4), SWIGTYPE_p_unsigned_long_long.getCPtr(p5));
    return ret;
  }

  public static uint SKY_wallet_DistributeCoinHoursProportional(GoSlice p0, ulong p1, GoSlice p2) {
    uint ret = skycoinPINVOKE.SKY_wallet_DistributeCoinHoursProportional(GoSlice.getCPtr(p0), p1, GoSlice.getCPtr (p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_wallet_NewUxBalances(ulong p0, GoSlice p1, GoSlice p2) {
    uint ret = skycoinPINVOKE.SKY_wallet_NewUxBalances(p0, GoSlice.getCPtr (p1), GoSlice.getCPtr (p2));
    return ret;
  }

  public static uint SKY_wallet_NewUxBalance(ulong p0, coin__UxOut p1, wallet__UxBalance p2) {
    uint ret = skycoinPINVOKE.SKY_wallet_NewUxBalance(p0, coin__UxOut.getCPtr(p1), wallet__UxBalance.getCPtr(p2));
    return ret;
  }

  public static uint SKY_wallet_ChooseSpendsMinimizeUxOuts(GoSlice p0, ulong p1, ulong p2, GoSlice p3) {
    uint ret = skycoinPINVOKE.SKY_wallet_ChooseSpendsMinimizeUxOuts(GoSlice.getCPtr(p0), p1, p2, GoSlice.getCPtr (p3));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_wallet_ChooseSpendsMaximizeUxOuts(GoSlice p0, ulong p1, ulong p2, GoSlice p3) {
    uint ret = skycoinPINVOKE.SKY_wallet_ChooseSpendsMaximizeUxOuts(GoSlice.getCPtr(p0), p1, p2, GoSlice.getCPtr (p3));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_cli_CheckWalletBalance(SWIGTYPE_p_WebRpcClient__Handle p0, string p1, SWIGTYPE_p_BalanceResult_Handle p2) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_cli_CheckWalletBalance(SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p0), tmpp1, SWIGTYPE_p_BalanceResult_Handle.getCPtr(p2));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cli_GetBalanceOfAddresses(SWIGTYPE_p_WebRpcClient__Handle p0, GoSlice p1, SWIGTYPE_p_BalanceResult_Handle p2) {
    uint ret = skycoinPINVOKE.SKY_cli_GetBalanceOfAddresses(SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p0), GoSlice.getCPtr(p1), SWIGTYPE_p_BalanceResult_Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_wallet_NewReadableEntry(string p0, wallet__Entry p1, SWIGTYPE_p_ReadableEntry__Handle p2) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_wallet_NewReadableEntry(tmpp0, wallet__Entry.getCPtr(p1), SWIGTYPE_p_ReadableEntry__Handle.getCPtr(p2));
      return ret;
    }
  }

  public static uint SKY_wallet_LoadReadableWallet(string p0, SWIGTYPE_p_ReadableWallet__Handle p1) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_wallet_LoadReadableWallet(tmpp0, SWIGTYPE_p_ReadableWallet__Handle.getCPtr(p1));
      return ret;
    }
  }

  public static uint SKY_wallet_ReadableWallet_Save(SWIGTYPE_p_ReadableWallet__Handle p0, string p1) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_wallet_ReadableWallet_Save(SWIGTYPE_p_ReadableWallet__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_wallet_ReadableWallet_Load(SWIGTYPE_p_ReadableWallet__Handle p0, string p1) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_wallet_ReadableWallet_Load(SWIGTYPE_p_ReadableWallet__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_wallet_ReadableWallet_Erase(SWIGTYPE_p_ReadableWallet__Handle p0) {
    uint ret = skycoinPINVOKE.SKY_wallet_ReadableWallet_Erase(SWIGTYPE_p_ReadableWallet__Handle.getCPtr(p0));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_base58_String2Hex(string p0, GoSlice p1) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_base58_String2Hex(tmpp0, GoSlice.getCPtr (p1));
      return ret;
    }
  }

  public static uint SKY_base58_Base58_ToInt(string p0, SWIGTYPE_p_long_long p1) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_base58_Base58_ToInt(tmpp0, SWIGTYPE_p_long_long.getCPtr(p1));
      return ret;
    }
  }

  public static uint SKY_base58_Base58_ToHex(string p0, GoSlice p1) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_base58_Base58_ToHex(tmpp0, GoSlice.getCPtr (p1));
      return ret;
    }
  }

  public static uint SKY_base58_Base58_Base582Int(string p0, SWIGTYPE_p_long_long p1) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_base58_Base58_Base582Int(tmpp0, SWIGTYPE_p_long_long.getCPtr(p1));
      return ret;
    }
  }

  public static uint SKY_base58_Base582Hex(string p0, GoSlice p1) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_base58_Base582Hex(tmpp0, GoSlice.getCPtr (p1));
      return ret;
    }
  }

  public static uint SKY_base58_Base58_BitHex(string p0, GoSlice p1) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_base58_Base58_BitHex(tmpp0, GoSlice.getCPtr (p1));
      return ret;
    }
  }

  public static uint SKY_base58_Int2Base58(long p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_base58_Int2Base58(p0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_base58_Hex2Base58(GoSlice p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_base58_Hex2Base58(GoSlice.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_base58_Hex2Base58String(GoSlice p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_base58_Hex2Base58String(GoSlice.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_base58_Hex2Base58Str(GoSlice p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_base58_Hex2Base58Str(GoSlice.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cli_GenerateWallet(string p0, SWIGTYPE_p_Options__Handle p1, ulong p2, SWIGTYPE_p_Wallet__Handle p3) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_cli_GenerateWallet(tmpp0, SWIGTYPE_p_Options__Handle.getCPtr(p1), p2, SWIGTYPE_p_Wallet__Handle.getCPtr(p3));
      return ret;
    }
  }

  public static uint SKY_cli_MakeAlphanumericSeed(_GoString_ p0) {
var tmpp0 = _GoString_.getCPtr (p0);
    {
      uint ret = skycoinPINVOKE.SKY_cli_MakeAlphanumericSeed(tmpp0);
      return ret;
    }
  }

  public static uint SKY_webrpc_NewClient(string p0, SWIGTYPE_p_WebRpcClient__Handle p1) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_webrpc_NewClient(tmpp0, SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p1));
      return ret;
    }
  }

  public static uint SKY_webrpc_Client_CSRF(SWIGTYPE_p_WebRpcClient__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_webrpc_Client_CSRF(SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_webrpc_Client_InjectTransaction(SWIGTYPE_p_WebRpcClient__Handle p0, SWIGTYPE_p_Transaction__Handle p1, _GoString_ p2) {
var tmpp2 = _GoString_.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_webrpc_Client_InjectTransaction(SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p0), SWIGTYPE_p_Transaction__Handle.getCPtr(p1), tmpp2);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_webrpc_Client_GetStatus(SWIGTYPE_p_WebRpcClient__Handle p0, SWIGTYPE_p_StatusResult_Handle p1) {
    uint ret = skycoinPINVOKE.SKY_webrpc_Client_GetStatus(SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p0), SWIGTYPE_p_StatusResult_Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_webrpc_Client_GetTransactionByID(SWIGTYPE_p_WebRpcClient__Handle p0, string p1, SWIGTYPE_p_TransactionResult_Handle p2) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_webrpc_Client_GetTransactionByID(SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p0), tmpp1, SWIGTYPE_p_TransactionResult_Handle.getCPtr(p2));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_webrpc_Client_GetAddressUxOuts(SWIGTYPE_p_WebRpcClient__Handle p0, GoSlice p1, GoSlice p2) {
    uint ret = skycoinPINVOKE.SKY_webrpc_Client_GetAddressUxOuts(SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p0), GoSlice.getCPtr(p1), GoSlice.getCPtr (p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_webrpc_Client_GetBlocksInRange(SWIGTYPE_p_WebRpcClient__Handle p0, ulong p1, ulong p2, GoSlice p3) {
    uint ret = skycoinPINVOKE.SKY_webrpc_Client_GetBlocksInRange(SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p0), p1, p2, GoSlice.getCPtr (p3));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_webrpc_Client_GetBlocksBySeq(SWIGTYPE_p_WebRpcClient__Handle p0, GoSlice p1, GoSlice p2) {
    uint ret = skycoinPINVOKE.SKY_webrpc_Client_GetBlocksBySeq(SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p0), GoSlice.getCPtr(p1), GoSlice.getCPtr (p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_webrpc_Client_GetLastBlocks(SWIGTYPE_p_WebRpcClient__Handle p0, ulong p1, GoSlice p2) {
    uint ret = skycoinPINVOKE.SKY_webrpc_Client_GetLastBlocks(SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p0), p1, GoSlice.getCPtr (p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_iputil_LocalhostIP(_GoString_ p0) {
var tmpp0 = _GoString_.getCPtr (p0);
    {
      uint ret = skycoinPINVOKE.SKY_iputil_LocalhostIP(tmpp0);
      return ret;
    }
  }

  public static uint SKY_iputil_IsLocalhost(string p0, SWIGTYPE_p_unsigned_char p1) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_iputil_IsLocalhost(tmpp0, SWIGTYPE_p_unsigned_char.getCPtr(p1));
      return ret;
    }
  }

  public static uint SKY_iputil_SplitAddr(string p0, _GoString_ p1, SWIGTYPE_p_unsigned_short p2) {
var tmpp0 = p0;
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_iputil_SplitAddr(tmpp0, tmpp1, SWIGTYPE_p_unsigned_short.getCPtr(p2));
      return ret;
    }
  }

  public static void SKY_params_GetDistributionAddresses(GoSlice p0) {
    skycoinPINVOKE.SKY_params_GetDistributionAddresses(GoSlice.getCPtr (p0));
  }

  public static void SKY_params_GetUnlockedDistributionAddresses(GoSlice p0) {
    skycoinPINVOKE.SKY_params_GetUnlockedDistributionAddresses(GoSlice.getCPtr (p0));
  }

  public static void SKY_params_GetLockedDistributionAddresses(GoSlice p0) {
    skycoinPINVOKE.SKY_params_GetLockedDistributionAddresses(GoSlice.getCPtr (p0));
  }

  public static uint SKY_cli_GenerateAddressesInFile(string p0, ulong p1, SWIGTYPE_p_PasswordReader__Handle p2, GoSlice p3) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_cli_GenerateAddressesInFile(tmpp0, p1, SWIGTYPE_p_PasswordReader__Handle.getCPtr(p2), GoSlice.getCPtr (p3));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cli_FormatAddressesAsJSON(GoSlice p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cli_FormatAddressesAsJSON(GoSlice.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cli_FormatAddressesAsJoinedArray(GoSlice p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cli_FormatAddressesAsJoinedArray(GoSlice.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cli_AddressesToStrings(GoSlice p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_cli_AddressesToStrings(GoSlice.getCPtr(p0), GoSlice.getCPtr (p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_AddUint64(ulong p0, ulong p1, SWIGTYPE_p_unsigned_long_long p2) {
    uint ret = skycoinPINVOKE.SKY_coin_AddUint64(p0, p1, SWIGTYPE_p_unsigned_long_long.getCPtr(p2));
    return ret;
  }

  public static uint SKY_coin_Uint64ToInt64(ulong p0, SWIGTYPE_p_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Uint64ToInt64(p0, SWIGTYPE_p_long_long.getCPtr(p1));
    return ret;
  }

  public static uint SKY_coin_Int64ToUint64(long p0, SWIGTYPE_p_unsigned_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Int64ToUint64(p0, SWIGTYPE_p_unsigned_long_long.getCPtr(p1));
    return ret;
  }

  public static uint SKY_coin_IntToUint32(long p0, SWIGTYPE_p_unsigned_int p1) {
    uint ret = skycoinPINVOKE.SKY_coin_IntToUint32(p0, SWIGTYPE_p_unsigned_int.getCPtr(p1));
    return ret;
  }

  public static uint SKY_cipher_RandByte(long p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_cipher_RandByte(p0, GoSlice.getCPtr (p1));
    return ret;
  }

  public static uint SKY_cipher_NewPubKey(GoSlice p0, cipher_PubKey p1) {
var tmpp1 = cipher_PubKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_NewPubKey(GoSlice.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cipher_PubKeyFromHex(string p0, cipher_PubKey p1) {
var tmpp0 = p0;
var tmpp1 = cipher_PubKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_PubKeyFromHex(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_cipher_PubKeyFromSecKey(cipher_SecKey p0, cipher_PubKey p1) {
var tmpp0 = cipher_SecKey.getCPtr (p0);
var tmpp1 = cipher_PubKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_PubKeyFromSecKey(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_cipher_PubKeyFromSig(cipher_Sig p0, cipher_SecKey p1, cipher_PubKey p2) {
var tmpp0 = cipher_Sig.getCPtr (p0);
var tmpp1 = cipher_SecKey.getCPtr (p1);
var tmpp2 = cipher_PubKey.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_PubKeyFromSig__SWIG_1(tmpp0, tmpp1, tmpp2);
      return ret;
    }
  }

  public static uint SKY_cipher_PubKey_Verify(cipher_PubKey p0) {
var tmpp0 = cipher_PubKey.getCPtr (p0);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_PubKey_Verify(tmpp0);
      return ret;
    }
  }

  public static uint SKY_cipher_PubKey_Hex(cipher_PubKey p0, _GoString_ p1) {
var tmpp0 = cipher_PubKey.getCPtr (p0);
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_PubKey_Hex(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_cipher_PubKeyRipemd160(cipher_PubKey p0, cipher_Ripemd160 p1) {
var tmpp0 = cipher_PubKey.getCPtr (p0);
var tmpp1 = cipher_Ripemd160.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_PubKeyRipemd160(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_cipher_NewSecKey(GoSlice p0, cipher_SecKey p1) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_NewSecKey(GoSlice.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cipher_SecKeyFromHex(string p0, cipher_SecKey p1) {
var tmpp0 = p0;
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_SecKeyFromHex(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_cipher_SecKey_Verify(cipher_SecKey p0) {
var tmpp0 = cipher_SecKey.getCPtr (p0);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_SecKey_Verify(tmpp0);
      return ret;
    }
  }

  public static uint SKY_cipher_SecKey_Hex(cipher_SecKey p0, _GoString_ p1) {
var tmpp0 = cipher_SecKey.getCPtr (p0);
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_SecKey_Hex(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_cipher_ECDH(cipher_PubKey p0, cipher_SecKey p1, GoSlice p2) {
var tmpp0 = cipher_PubKey.getCPtr (p0);
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_ECDH(tmpp0, tmpp1, GoSlice.getCPtr (p2));
      return ret;
    }
  }

  public static uint SKY_cipher_NewSig(GoSlice p0, cipher_Sig p1) {
var tmpp1 = cipher_Sig.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_NewSig(GoSlice.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cipher_SigFromHex(string p0, cipher_Sig p1) {
var tmpp0 = p0;
var tmpp1 = cipher_Sig.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_SigFromHex(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_cipher_Sig_Hex(cipher_Sig p0, _GoString_ p1) {
var tmpp0 = cipher_Sig.getCPtr (p0);
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_Sig_Hex(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_cipher_SignHash(cipher_SecKey p0, cipher_SecKey p1, cipher_Sig p2) {
var tmpp0 = cipher_SecKey.getCPtr (p0);
var tmpp1 = cipher_SecKey.getCPtr (p1);
var tmpp2 = cipher_Sig.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_SignHash__SWIG_1(tmpp0, tmpp1, tmpp2);
      return ret;
    }
  }

  public static uint SKY_cipher_VerifyAddressSignedHash(cipher__Address p0, cipher_Sig p1, cipher_SecKey p2) {
var tmpp1 = cipher_Sig.getCPtr (p1);
var tmpp2 = cipher_SecKey.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_VerifyAddressSignedHash(cipher__Address.getCPtr(p0), tmpp1, tmpp2);
      return ret;
    }
  }

  public static uint SKY_cipher_VerifySignedHash(cipher_Sig p0, cipher_SecKey p1) {
var tmpp0 = cipher_Sig.getCPtr (p0);
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_VerifySignedHash(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_cipher_VerifyPubKeySignedHash(cipher_PubKey p0, cipher_Sig p1, cipher_SecKey p2) {
var tmpp0 = cipher_PubKey.getCPtr (p0);
var tmpp1 = cipher_Sig.getCPtr (p1);
var tmpp2 = cipher_SecKey.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_VerifyPubKeySignedHash(tmpp0, tmpp1, tmpp2);
      return ret;
    }
  }

  public static uint SKY_cipher_GenerateKeyPair(cipher_PubKey p0, cipher_SecKey p1) {
var tmpp0 = cipher_PubKey.getCPtr (p0);
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_GenerateKeyPair(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_cipher_GenerateDeterministicKeyPair(GoSlice p0, cipher_PubKey p1, cipher_SecKey p2) {
var tmpp1 = cipher_PubKey.getCPtr (p1);
var tmpp2 = cipher_SecKey.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_GenerateDeterministicKeyPair(GoSlice.getCPtr(p0), tmpp1, tmpp2);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cipher_DeterministicKeyPairIterator(GoSlice p0, GoSlice p1, cipher_PubKey p2, cipher_SecKey p3) {
var tmpp2 = cipher_PubKey.getCPtr (p2);
var tmpp3 = cipher_SecKey.getCPtr (p3);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_DeterministicKeyPairIterator(GoSlice.getCPtr(p0), GoSlice.getCPtr (p1), tmpp2, tmpp3);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cipher_GenerateDeterministicKeyPairs(GoSlice p0, long p1, GoSlice p2) {
    uint ret = skycoinPINVOKE.SKY_cipher_GenerateDeterministicKeyPairs__SWIG_1(GoSlice.getCPtr(p0), p1, GoSlice.getCPtr (p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_cipher_GenerateDeterministicKeyPairsSeed(GoSlice p0, long p1, GoSlice p2, GoSlice p3) {
    uint ret = skycoinPINVOKE.SKY_cipher_GenerateDeterministicKeyPairsSeed__SWIG_1(GoSlice.getCPtr(p0), p1, GoSlice.getCPtr (p2), GoSlice.getCPtr (p3));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_cipher_CheckSecKey(cipher_SecKey p0) {
var tmpp0 = cipher_SecKey.getCPtr (p0);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_CheckSecKey(tmpp0);
      return ret;
    }
  }

  public static uint SKY_cipher_CheckSecKeyHash(cipher_SecKey p0, cipher_SecKey p1) {
var tmpp0 = cipher_SecKey.getCPtr (p0);
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_CheckSecKeyHash__SWIG_1(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_cli_App_Run(SWIGTYPE_p_App__Handle p0, string p1) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_cli_App_Run(SWIGTYPE_p_App__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cli_Config_GetCoin(SWIGTYPE_p_Config__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cli_Config_GetCoin(SWIGTYPE_p_Config__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cli_Config_GetRPCAddress(SWIGTYPE_p_Config__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cli_Config_GetRPCAddress(SWIGTYPE_p_Config__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cli_RPCClientFromApp(SWIGTYPE_p_App__Handle p0, SWIGTYPE_p_WebRpcClient__Handle p1) {
    uint ret = skycoinPINVOKE.SKY_cli_RPCClientFromApp(SWIGTYPE_p_App__Handle.getCPtr(p0), SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_cli_Getenv(string p0, _GoString_ p1) {
var tmpp0 = p0;
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cli_Getenv(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_cli_Setenv(string p0, string p1) {
var tmpp0 = p0;
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_cli_Setenv(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_wallet_NewBalance(ulong p0, ulong p1, wallet__Balance p2) {
    uint ret = skycoinPINVOKE.SKY_wallet_NewBalance(p0, p1, wallet__Balance.getCPtr(p2));
    return ret;
  }

  public static uint SKY_wallet_NewBalanceFromUxOut(ulong p0, coin__UxOut p1, wallet__Balance p2) {
    uint ret = skycoinPINVOKE.SKY_wallet_NewBalanceFromUxOut(p0, coin__UxOut.getCPtr(p1), wallet__Balance.getCPtr(p2));
    return ret;
  }

  public static uint SKY_wallet_Balance_Add(wallet__Balance p0, wallet__Balance p1, wallet__Balance p2) {
    uint ret = skycoinPINVOKE.SKY_wallet_Balance_Add(wallet__Balance.getCPtr(p0), wallet__Balance.getCPtr(p1), wallet__Balance.getCPtr(p2));
    return ret;
  }

  public static uint SKY_wallet_Balance_Sub(wallet__Balance p0, wallet__Balance p1, wallet__Balance p2) {
    uint ret = skycoinPINVOKE.SKY_wallet_Balance_Sub(wallet__Balance.getCPtr(p0), wallet__Balance.getCPtr(p1), wallet__Balance.getCPtr(p2));
    return ret;
  }

  public static uint SKY_wallet_Balance_Equals(wallet__Balance p0, wallet__Balance p1, SWIGTYPE_p_unsigned_char p2) {
    uint ret = skycoinPINVOKE.SKY_wallet_Balance_Equals(wallet__Balance.getCPtr(p0), wallet__Balance.getCPtr(p1), SWIGTYPE_p_unsigned_char.getCPtr(p2));
    return ret;
  }

  public static uint SKY_wallet_Balance_IsZero(wallet__Balance p0, SWIGTYPE_p_unsigned_char p1) {
    uint ret = skycoinPINVOKE.SKY_wallet_Balance_IsZero(wallet__Balance.getCPtr(p0), SWIGTYPE_p_unsigned_char.getCPtr(p1));
    return ret;
  }

  public static uint SKY_httphelper_Address_UnmarshalJSON(httphelper__Address p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_httphelper_Address_UnmarshalJSON(httphelper__Address.getCPtr(p0), GoSlice.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_httphelper_Address_MarshalJSON(httphelper__Address p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_httphelper_Address_MarshalJSON(httphelper__Address.getCPtr(p0), GoSlice.getCPtr (p1));
    return ret;
  }

  public static uint SKY_httphelper_Coins_UnmarshalJSON(SWIGTYPE_p_GoUint64_ p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_httphelper_Coins_UnmarshalJSON(SWIGTYPE_p_GoUint64_.getCPtr(p0), GoSlice.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_httphelper_Coins_MarshalJSON(SWIGTYPE_p_GoUint64_ p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_httphelper_Coins_MarshalJSON(SWIGTYPE_p_GoUint64_.getCPtr(p0), GoSlice.getCPtr (p1));
    return ret;
  }

  public static uint SKY_httphelper_Coins_Value(SWIGTYPE_p_GoUint64_ p0, SWIGTYPE_p_unsigned_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_httphelper_Coins_Value(SWIGTYPE_p_GoUint64_.getCPtr(p0), SWIGTYPE_p_unsigned_long_long.getCPtr(p1));
    return ret;
  }

  public static uint SKY_httphelper_Hours_UnmarshalJSON(SWIGTYPE_p_GoUint64_ p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_httphelper_Hours_UnmarshalJSON(SWIGTYPE_p_GoUint64_.getCPtr(p0), GoSlice.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_httphelper_Hours_MarshalJSON(SWIGTYPE_p_GoUint64_ p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_httphelper_Hours_MarshalJSON(SWIGTYPE_p_GoUint64_.getCPtr(p0), GoSlice.getCPtr (p1));
    return ret;
  }

  public static uint SKY_httphelper_Hours_Value(SWIGTYPE_p_GoUint64_ p0, SWIGTYPE_p_unsigned_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_httphelper_Hours_Value(SWIGTYPE_p_GoUint64_.getCPtr(p0), SWIGTYPE_p_unsigned_long_long.getCPtr(p1));
    return ret;
  }

  public static uint SKY_wallet_Entry_Verify(wallet__Entry p0) {
    uint ret = skycoinPINVOKE.SKY_wallet_Entry_Verify(wallet__Entry.getCPtr(p0));
    return ret;
  }

  public static uint SKY_wallet_Entry_VerifyPublic(wallet__Entry p0) {
    uint ret = skycoinPINVOKE.SKY_wallet_Entry_VerifyPublic(wallet__Entry.getCPtr(p0));
    return ret;
  }

  public static uint SKY_droplet_FromString(string p0, SWIGTYPE_p_unsigned_long_long p1) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_droplet_FromString(tmpp0, SWIGTYPE_p_unsigned_long_long.getCPtr(p1));
      return ret;
    }
  }

  public static uint SKY_droplet_ToString(ulong p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_droplet_ToString(p0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_wallet_CryptoTypeFromString(string p0, _GoString_ p1) {
var tmpp0 = p0;
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_wallet_CryptoTypeFromString(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_handle_copy(SWIGTYPE_p_Handle p0, SWIGTYPE_p_Handle p1) {
    uint ret = skycoinPINVOKE.SKY_handle_copy(SWIGTYPE_p_Handle.getCPtr(p0), SWIGTYPE_p_Handle.getCPtr(p1));
    return ret;
  }

  public static uint SKY_logging_EnableColors() {
    uint ret = skycoinPINVOKE.SKY_logging_EnableColors();
    return ret;
  }

  public static uint SKY_logging_DisableColors() {
    uint ret = skycoinPINVOKE.SKY_logging_DisableColors();
    return ret;
  }

  public static uint SKY_logging_Disable() {
    uint ret = skycoinPINVOKE.SKY_logging_Disable();
    return ret;
  }

  public static uint SKY_map_Get(SWIGTYPE_p_GoStringMap_ p0, string p1, _GoString_ p2) {
var tmpp1 = p1;
var tmpp2 = _GoString_.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_map_Get(SWIGTYPE_p_GoStringMap_.getCPtr(p0), tmpp1, tmpp2);
      return ret;
    }
  }

  public static byte SKY_map_HasKey(SWIGTYPE_p_GoStringMap_ p0, string p1) {
var tmpp1 = p1;
    {
      byte ret = skycoinPINVOKE.SKY_map_HasKey(SWIGTYPE_p_GoStringMap_.getCPtr(p0), tmpp1);
      return ret;
    }
  }

  public static uint SKY_map_Close(SWIGTYPE_p_GoStringMap_ p0) {
    uint ret = skycoinPINVOKE.SKY_map_Close(SWIGTYPE_p_GoStringMap_.getCPtr(p0));
    return ret;
  }

  public static uint SKY_cipher_DecodeBase58Address(string p0, cipher__Address p1) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_cipher_DecodeBase58Address(tmpp0, cipher__Address.getCPtr(p1));
      return ret;
    }
  }

  public static uint SKY_cipher_AddressFromBytes(GoSlice p0, cipher__Address p1) {
    uint ret = skycoinPINVOKE.SKY_cipher_AddressFromBytes(GoSlice.getCPtr(p0), cipher__Address.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_cipher_AddressFromPubKey(cipher_PubKey p0, cipher__Address p1) {
var tmpp0 = cipher_PubKey.getCPtr (p0);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_AddressFromPubKey(tmpp0, cipher__Address.getCPtr(p1));
      return ret;
    }
  }

  public static uint SKY_cipher_AddressFromSecKey(cipher_SecKey p0, cipher__Address p1) {
var tmpp0 = cipher_SecKey.getCPtr (p0);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_AddressFromSecKey(tmpp0, cipher__Address.getCPtr(p1));
      return ret;
    }
  }

  public static uint SKY_cipher_Address_Null(cipher__Address p0, SWIGTYPE_p_unsigned_char p1) {
    uint ret = skycoinPINVOKE.SKY_cipher_Address_Null(cipher__Address.getCPtr(p0), SWIGTYPE_p_unsigned_char.getCPtr(p1));
    return ret;
  }

  public static uint SKY_cipher_Address_Bytes(cipher__Address p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_cipher_Address_Bytes(cipher__Address.getCPtr(p0), GoSlice.getCPtr (p1));
    return ret;
  }

  public static uint SKY_cipher_Address_Verify(cipher__Address p0, cipher_PubKey p1) {
var tmpp1 = cipher_PubKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_Address_Verify(cipher__Address.getCPtr(p0), tmpp1);
      return ret;
    }
  }

  public static uint SKY_cipher_Address_String(cipher__Address p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_Address_String(cipher__Address.getCPtr(p0), tmpp1);
      return ret;
    }
  }

  public static uint SKY_cipher_Address_Checksum(cipher__Address p0, SWIGTYPE_p_a_4__GoUint8_ p1) {
    uint ret = skycoinPINVOKE.SKY_cipher_Address_Checksum(cipher__Address.getCPtr(p0), SWIGTYPE_p_a_4__GoUint8_.getCPtr(p1));
    return ret;
  }

  public static uint SKY_JsonEncode_Handle(SWIGTYPE_p_Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_JsonEncode_Handle(SWIGTYPE_p_Handle.getCPtr(p0), tmpp1);
      return ret;
    }
  }

  public static uint SKY_Handle_Progress_GetCurrent(SWIGTYPE_p_Handle p0, SWIGTYPE_p_unsigned_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_Handle_Progress_GetCurrent(SWIGTYPE_p_Handle.getCPtr(p0), SWIGTYPE_p_unsigned_long_long.getCPtr(p1));
    return ret;
  }

  public static uint SKY_Handle_Block_GetHeadSeq(SWIGTYPE_p_Handle p0, SWIGTYPE_p_unsigned_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_Handle_Block_GetHeadSeq(SWIGTYPE_p_Handle.getCPtr(p0), SWIGTYPE_p_unsigned_long_long.getCPtr(p1));
    return ret;
  }

  public static uint SKY_Handle_Block_GetHeadHash(SWIGTYPE_p_Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_Handle_Block_GetHeadHash(SWIGTYPE_p_Handle.getCPtr(p0), tmpp1);
      return ret;
    }
  }

  public static uint SKY_Handle_Block_GetPreviousBlockHash(SWIGTYPE_p_Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_Handle_Block_GetPreviousBlockHash(SWIGTYPE_p_Handle.getCPtr(p0), tmpp1);
      return ret;
    }
  }

  public static uint SKY_Handle_Blocks_GetAt(SWIGTYPE_p_Handle p0, ulong p1, SWIGTYPE_p_Handle p2) {
    uint ret = skycoinPINVOKE.SKY_Handle_Blocks_GetAt(SWIGTYPE_p_Handle.getCPtr(p0), p1, SWIGTYPE_p_Handle.getCPtr(p2));
    return ret;
  }

  public static uint SKY_Handle_Blocks_GetCount(SWIGTYPE_p_Handle p0, SWIGTYPE_p_unsigned_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_Handle_Blocks_GetCount(SWIGTYPE_p_Handle.getCPtr(p0), SWIGTYPE_p_unsigned_long_long.getCPtr(p1));
    return ret;
  }

  public static uint SKY_Handle_Connections_GetCount(SWIGTYPE_p_Handle p0, SWIGTYPE_p_unsigned_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_Handle_Connections_GetCount(SWIGTYPE_p_Handle.getCPtr(p0), SWIGTYPE_p_unsigned_long_long.getCPtr(p1));
    return ret;
  }

  public static uint SKY_Handle_Strings_GetCount(SWIGTYPE_p_Strings__Handle p0, SWIGTYPE_p_unsigned_int p1) {
    uint ret = skycoinPINVOKE.SKY_Handle_Strings_GetCount(SWIGTYPE_p_Strings__Handle.getCPtr(p0), SWIGTYPE_p_unsigned_int.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_Handle_Strings_Sort(SWIGTYPE_p_Strings__Handle p0) {
    uint ret = skycoinPINVOKE.SKY_Handle_Strings_Sort(SWIGTYPE_p_Strings__Handle.getCPtr(p0));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_Handle_Strings_GetAt(SWIGTYPE_p_Strings__Handle p0, long p1, _GoString_ p2) {
var tmpp2 = _GoString_.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_Handle_Strings_GetAt(SWIGTYPE_p_Strings__Handle.getCPtr(p0), p1, tmpp2);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Handle_Client_GetWalletDir(SWIGTYPE_p_Client__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_api_Handle_Client_GetWalletDir(SWIGTYPE_p_Client__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Handle_Client_GetWalletFileName(SWIGTYPE_p_WalletResponse__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_api_Handle_Client_GetWalletFileName(SWIGTYPE_p_WalletResponse__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Handle_Client_GetWalletLabel(SWIGTYPE_p_WalletResponse__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_api_Handle_Client_GetWalletLabel(SWIGTYPE_p_WalletResponse__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Handle_Client_GetWalletFullPath(SWIGTYPE_p_Client__Handle p0, SWIGTYPE_p_WalletResponse__Handle p1, _GoString_ p2) {
var tmpp2 = _GoString_.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_api_Handle_Client_GetWalletFullPath(SWIGTYPE_p_Client__Handle.getCPtr(p0), SWIGTYPE_p_WalletResponse__Handle.getCPtr(p1), tmpp2);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Handle_GetWalletMeta(SWIGTYPE_p_Wallet__Handle p0, SWIGTYPE_p_GoStringMap_ p1) {
    uint ret = skycoinPINVOKE.SKY_api_Handle_GetWalletMeta(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), SWIGTYPE_p_GoStringMap_.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Handle_GetWalletEntriesCount(SWIGTYPE_p_Wallet__Handle p0, SWIGTYPE_p_unsigned_int p1) {
    uint ret = skycoinPINVOKE.SKY_api_Handle_GetWalletEntriesCount(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), SWIGTYPE_p_unsigned_int.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Handle_Client_GetWalletResponseEntriesCount(SWIGTYPE_p_WalletResponse__Handle p0, SWIGTYPE_p_unsigned_int p1) {
    uint ret = skycoinPINVOKE.SKY_api_Handle_Client_GetWalletResponseEntriesCount(SWIGTYPE_p_WalletResponse__Handle.getCPtr(p0), SWIGTYPE_p_unsigned_int.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Handle_WalletGetEntry(SWIGTYPE_p_Wallet__Handle p0, uint p1, cipher__Address p2, cipher_PubKey p3) {
var tmpp3 = cipher_PubKey.getCPtr (p3);
    {
      uint ret = skycoinPINVOKE.SKY_api_Handle_WalletGetEntry(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), p1, cipher__Address.getCPtr(p2), tmpp3);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Handle_WalletResponseGetEntry(SWIGTYPE_p_WalletResponse__Handle p0, uint p1, _GoString_ p2, _GoString_ p3) {
var tmpp2 = _GoString_.getCPtr (p2);
var tmpp3 = _GoString_.getCPtr (p3);
    {
      uint ret = skycoinPINVOKE.SKY_api_Handle_WalletResponseGetEntry(SWIGTYPE_p_WalletResponse__Handle.getCPtr(p0), p1, tmpp2, tmpp3);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Handle_WalletResponseIsEncrypted(SWIGTYPE_p_WalletResponse__Handle p0, SWIGTYPE_p_unsigned_char p1) {
    uint ret = skycoinPINVOKE.SKY_api_Handle_WalletResponseIsEncrypted(SWIGTYPE_p_WalletResponse__Handle.getCPtr(p0), SWIGTYPE_p_unsigned_char.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Handle_WalletResponseGetCryptoType(SWIGTYPE_p_WalletResponse__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_api_Handle_WalletResponseGetCryptoType(SWIGTYPE_p_WalletResponse__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Handle_WalletsResponseGetCount(SWIGTYPE_p_Wallets__Handle p0, SWIGTYPE_p_unsigned_int p1) {
    uint ret = skycoinPINVOKE.SKY_api_Handle_WalletsResponseGetCount(SWIGTYPE_p_Wallets__Handle.getCPtr(p0), SWIGTYPE_p_unsigned_int.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Handle_WalletsResponseGetAt(SWIGTYPE_p_Wallets__Handle p0, uint p1, SWIGTYPE_p_WalletResponse__Handle p2) {
    uint ret = skycoinPINVOKE.SKY_api_Handle_WalletsResponseGetAt(SWIGTYPE_p_Wallets__Handle.getCPtr(p0), p1, SWIGTYPE_p_WalletResponse__Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_api_Handle_GetWalletFolderAddress(SWIGTYPE_p_Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_api_Handle_GetWalletFolderAddress(SWIGTYPE_p_Handle.getCPtr(p0), tmpp1);
      return ret;
    }
  }

  public static uint SKY_api_Handle_GetWalletSeed(SWIGTYPE_p_Wallet__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_api_Handle_GetWalletSeed(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Handle_GetWalletLastSeed(SWIGTYPE_p_Wallet__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_api_Handle_GetWalletLastSeed(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_api_Handle_GetBuildInfoData(SWIGTYPE_p_BuildInfo_Handle p0, _GoString_ p1, _GoString_ p2, _GoString_ p3) {
var tmpp1 = _GoString_.getCPtr (p1);
var tmpp2 = _GoString_.getCPtr (p2);
var tmpp3 = _GoString_.getCPtr (p3);
    {
      uint ret = skycoinPINVOKE.SKY_api_Handle_GetBuildInfoData(SWIGTYPE_p_BuildInfo_Handle.getCPtr(p0), tmpp1, tmpp2, tmpp3);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_UxOut_Hash(coin__UxOut p0, cipher_SecKey p1) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_UxOut_Hash__SWIG_1(coin__UxOut.getCPtr(p0), tmpp1);
      return ret;
    }
  }

  public static uint SKY_coin_UxOut_SnapshotHash(coin__UxOut p0, cipher_SecKey p1) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_UxOut_SnapshotHash__SWIG_1(coin__UxOut.getCPtr(p0), tmpp1);
      return ret;
    }
  }

  public static uint SKY_coin_UxBody_Hash(coin__UxBody p0, cipher_SecKey p1) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_UxBody_Hash__SWIG_1(coin__UxBody.getCPtr(p0), tmpp1);
      return ret;
    }
  }

  public static uint SKY_coin_UxOut_CoinHours(coin__UxOut p0, ulong p1, SWIGTYPE_p_unsigned_long_long p2) {
    uint ret = skycoinPINVOKE.SKY_coin_UxOut_CoinHours(coin__UxOut.getCPtr(p0), p1, SWIGTYPE_p_unsigned_long_long.getCPtr(p2));
    return ret;
  }

  public static uint SKY_coin_UxArray_Hashes(GoSlice p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_Hashes__SWIG_1(GoSlice.getCPtr (p0), GoSlice.getCPtr (p1));
    return ret;
  }

  public static uint SKY_coin_UxArray_HasDupes(GoSlice p0, SWIGTYPE_p_unsigned_char p1) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_HasDupes__SWIG_1(GoSlice.getCPtr (p0), SWIGTYPE_p_unsigned_char.getCPtr(p1));
    return ret;
  }

  public static uint SKY_coin_UxArray_Sort(GoSlice p0) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_Sort(GoSlice.getCPtr (p0));
    return ret;
  }

  public static uint SKY_coin_UxArray_Len(GoSlice p0, SWIGTYPE_p_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_Len(GoSlice.getCPtr (p0), SWIGTYPE_p_long_long.getCPtr(p1));
    return ret;
  }

  public static uint SKY_coin_UxArray_Less(GoSlice p0, long p1, long p2, SWIGTYPE_p_unsigned_char p3) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_Less__SWIG_1(GoSlice.getCPtr (p0), p1, p2, SWIGTYPE_p_unsigned_char.getCPtr(p3));
    return ret;
  }

  public static uint SKY_coin_UxArray_Swap(GoSlice p0, long p1, long p2) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_Swap__SWIG_1(GoSlice.getCPtr (p0), p1, p2);
    return ret;
  }

  public static uint SKY_coin_UxArray_Coins(GoSlice p0, SWIGTYPE_p_unsigned_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_Coins__SWIG_1(GoSlice.getCPtr (p0), SWIGTYPE_p_unsigned_long_long.getCPtr(p1));
    return ret;
  }

  public static uint SKY_coin_UxArray_CoinHours(GoSlice p0, ulong p1, SWIGTYPE_p_unsigned_long_long p2) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_CoinHours__SWIG_1(GoSlice.getCPtr (p0), p1, SWIGTYPE_p_unsigned_long_long.getCPtr(p2));
    return ret;
  }

  public static uint SKY_coin_UxArray_Sub(GoSlice p0, GoSlice p1, GoSlice p2) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_Sub__SWIG_1(GoSlice.getCPtr (p0), GoSlice.getCPtr (p1), GoSlice.getCPtr (p2));
    return ret;
  }

  public static uint SKY_coin_UxArray_Add(GoSlice p0, GoSlice p1, GoSlice p2) {
    uint ret = skycoinPINVOKE.SKY_coin_UxArray_Add__SWIG_1(GoSlice.getCPtr (p0), GoSlice.getCPtr (p1), GoSlice.getCPtr (p2));
    return ret;
  }

  public static uint SKY_coin_NewAddressUxOuts(GoSlice p0, SWIGTYPE_p_AddressUxOuts_Handle p1) {
    uint ret = skycoinPINVOKE.SKY_coin_NewAddressUxOuts__SWIG_1(GoSlice.getCPtr (p0), SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p1));
    return ret;
  }

  public static uint SKY_coin_AddressUxOuts_Keys(SWIGTYPE_p_AddressUxOuts_Handle p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_coin_AddressUxOuts_Keys__SWIG_1(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p0), GoSlice.getCPtr (p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_AddressUxOuts_Flatten(SWIGTYPE_p_AddressUxOuts_Handle p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_coin_AddressUxOuts_Flatten__SWIG_1(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p0), GoSlice.getCPtr (p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_AddressUxOuts_Sub(SWIGTYPE_p_AddressUxOuts_Handle p0, SWIGTYPE_p_AddressUxOuts_Handle p1, SWIGTYPE_p_AddressUxOuts_Handle p2) {
    uint ret = skycoinPINVOKE.SKY_coin_AddressUxOuts_Sub(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p0), SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p1), SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_AddressUxOuts_Add(SWIGTYPE_p_AddressUxOuts_Handle p0, SWIGTYPE_p_AddressUxOuts_Handle p1, SWIGTYPE_p_AddressUxOuts_Handle p2) {
    uint ret = skycoinPINVOKE.SKY_coin_AddressUxOuts_Add(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p0), SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p1), SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_AddressUxOuts_Get(SWIGTYPE_p_AddressUxOuts_Handle p0, cipher__Address p1, GoSlice p2) {
    uint ret = skycoinPINVOKE.SKY_coin_AddressUxOuts_Get__SWIG_1(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p0), cipher__Address.getCPtr(p1), GoSlice.getCPtr (p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_AddressUxOuts_HasKey(SWIGTYPE_p_AddressUxOuts_Handle p0, cipher__Address p1, SWIGTYPE_p_unsigned_char p2) {
    uint ret = skycoinPINVOKE.SKY_coin_AddressUxOuts_HasKey(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p0), cipher__Address.getCPtr(p1), SWIGTYPE_p_unsigned_char.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_AddressUxOuts_GetOutputLength(SWIGTYPE_p_AddressUxOuts_Handle p0, cipher__Address p1, SWIGTYPE_p_long_long p2) {
    uint ret = skycoinPINVOKE.SKY_coin_AddressUxOuts_GetOutputLength(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p0), cipher__Address.getCPtr(p1), SWIGTYPE_p_long_long.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_AddressUxOuts_Length(SWIGTYPE_p_AddressUxOuts_Handle p0, SWIGTYPE_p_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_AddressUxOuts_Length(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p0), SWIGTYPE_p_long_long.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_AddressUxOuts_Set(SWIGTYPE_p_AddressUxOuts_Handle p0, cipher__Address p1, GoSlice p2) {
    uint ret = skycoinPINVOKE.SKY_coin_AddressUxOuts_Set__SWIG_1(SWIGTYPE_p_AddressUxOuts_Handle.getCPtr(p0), cipher__Address.getCPtr(p1), GoSlice.getCPtr (p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_encrypt_ScryptChacha20poly1305_Encrypt(encrypt__ScryptChacha20poly1305 p0, GoSlice p1, GoSlice p2, GoSlice p3) {
    uint ret = skycoinPINVOKE.SKY_encrypt_ScryptChacha20poly1305_Encrypt(encrypt__ScryptChacha20poly1305.getCPtr(p0), GoSlice.getCPtr(p1), GoSlice.getCPtr(p2), GoSlice.getCPtr (p3));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_encrypt_ScryptChacha20poly1305_Decrypt(encrypt__ScryptChacha20poly1305 p0, GoSlice p1, GoSlice p2, GoSlice p3) {
    uint ret = skycoinPINVOKE.SKY_encrypt_ScryptChacha20poly1305_Decrypt(encrypt__ScryptChacha20poly1305.getCPtr(p0), GoSlice.getCPtr(p1), GoSlice.getCPtr(p2), GoSlice.getCPtr (p3));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_wallet_CreateOptionsHandle(string p0, string p1, string p2, byte p3, string p4, string p5, ulong p6, SWIGTYPE_p_Options__Handle p7) {
var tmpp0 = p0;
var tmpp1 = p1;
var tmpp2 = p2;
var tmpp4 = p4;
var tmpp5 = p5;
    {
      uint ret = skycoinPINVOKE.SKY_wallet_CreateOptionsHandle(tmpp0, tmpp1, tmpp2, p3, tmpp4, tmpp5, p6, SWIGTYPE_p_Options__Handle.getCPtr(p7));
      return ret;
    }
  }

  public static uint SKY_cli_AddPrivateKey(SWIGTYPE_p_Wallet__Handle p0, string p1) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_cli_AddPrivateKey(SWIGTYPE_p_Wallet__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cli_AddPrivateKeyToFile(string p0, string p1, SWIGTYPE_p_PasswordReader__Handle p2) {
var tmpp0 = p0;
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_cli_AddPrivateKeyToFile(tmpp0, tmpp1, SWIGTYPE_p_PasswordReader__Handle.getCPtr(p2));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_apputil_CatchInterruptPanic() {
    uint ret = skycoinPINVOKE.SKY_apputil_CatchInterruptPanic();
    return ret;
  }

  public static uint SKY_apputil_CatchDebug() {
    uint ret = skycoinPINVOKE.SKY_apputil_CatchDebug();
    return ret;
  }

  public static uint SKY_apputil_PrintProgramStatus() {
    uint ret = skycoinPINVOKE.SKY_apputil_PrintProgramStatus();
    return ret;
  }

  public static uint SKY_certutil_NewTLSCertPair(string p0, string p1, GoSlice p2, GoSlice p3, GoSlice p4) {
var tmpp0 = p0;
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_certutil_NewTLSCertPair(tmpp0, tmpp1, GoSlice.getCPtr(p2), GoSlice.getCPtr (p3), GoSlice.getCPtr (p4));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_fee_VerifyTransactionFee(SWIGTYPE_p_Transaction__Handle p0, ulong p1, uint p2) {
    uint ret = skycoinPINVOKE.SKY_fee_VerifyTransactionFee(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), p1, p2);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_fee_VerifyTransactionFeeForHours(ulong p0, ulong p1, uint p2) {
    uint ret = skycoinPINVOKE.SKY_fee_VerifyTransactionFeeForHours(p0, p1, p2);
    return ret;
  }

  public static uint SKY_fee_RequiredFee(ulong p0, uint p1, SWIGTYPE_p_unsigned_long_long p2) {
    uint ret = skycoinPINVOKE.SKY_fee_RequiredFee(p0, p1, SWIGTYPE_p_unsigned_long_long.getCPtr(p2));
    return ret;
  }

  public static uint SKY_fee_RemainingHours(ulong p0, uint p1, SWIGTYPE_p_unsigned_long_long p2) {
    uint ret = skycoinPINVOKE.SKY_fee_RemainingHours(p0, p1, SWIGTYPE_p_unsigned_long_long.getCPtr(p2));
    return ret;
  }

  public static uint SKY_fee_TransactionFee(SWIGTYPE_p_Transaction__Handle p0, ulong p1, GoSlice p2, SWIGTYPE_p_unsigned_long_long p3) {
    uint ret = skycoinPINVOKE.SKY_fee_TransactionFee__SWIG_1(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), p1, GoSlice.getCPtr (p2), SWIGTYPE_p_unsigned_long_long.getCPtr(p3));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_cli_LoadConfig(SWIGTYPE_p_Config__Handle p0) {
    uint ret = skycoinPINVOKE.SKY_cli_LoadConfig(SWIGTYPE_p_Config__Handle.getCPtr(p0));
    return ret;
  }

  public static uint SKY_cli_Config_FullWalletPath(SWIGTYPE_p_Config__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cli_Config_FullWalletPath(SWIGTYPE_p_Config__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cli_Config_FullDBPath(SWIGTYPE_p_Config__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cli_Config_FullDBPath(SWIGTYPE_p_Config__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cli_NewApp(SWIGTYPE_p_Config__Handle p0, SWIGTYPE_p_App__Handle p1) {
    uint ret = skycoinPINVOKE.SKY_cli_NewApp(SWIGTYPE_p_Config__Handle.getCPtr(p0), SWIGTYPE_p_App__Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_cli_RPCClientFromContext(SWIGTYPE_p_Context__Handle p0, SWIGTYPE_p_WebRpcClient__Handle p1) {
    uint ret = skycoinPINVOKE.SKY_cli_RPCClientFromContext(SWIGTYPE_p_Context__Handle.getCPtr(p0), SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_cli_ConfigFromContext(SWIGTYPE_p_Context__Handle p0, SWIGTYPE_p_Config__Handle p1) {
    uint ret = skycoinPINVOKE.SKY_cli_ConfigFromContext(SWIGTYPE_p_Context__Handle.getCPtr(p0), SWIGTYPE_p_Config__Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_cli_PasswordFromBytes_Password(GoSlice p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_cli_PasswordFromBytes_Password(GoSlice.getCPtr (p0), GoSlice.getCPtr (p1));
    return ret;
  }

  public static uint SKY_cli_PasswordFromTerm_Password(GoSlice p0) {
    uint ret = skycoinPINVOKE.SKY_cli_PasswordFromTerm_Password(GoSlice.getCPtr (p0));
    return ret;
  }

  public static uint SKY_cli_CreateRawTxFromWallet(SWIGTYPE_p_WebRpcClient__Handle p0, string p1, string p2, GoSlice p3, SWIGTYPE_p_PasswordReader__Handle p4, SWIGTYPE_p_Transaction__Handle p5) {
var tmpp1 = p1;
var tmpp2 = p2;
    {
      uint ret = skycoinPINVOKE.SKY_cli_CreateRawTxFromWallet(SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p0), tmpp1, tmpp2, GoSlice.getCPtr(p3), SWIGTYPE_p_PasswordReader__Handle.getCPtr(p4), SWIGTYPE_p_Transaction__Handle.getCPtr(p5));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cli_CreateRawTxFromAddress(SWIGTYPE_p_WebRpcClient__Handle p0, string p1, string p2, string p3, GoSlice p4, SWIGTYPE_p_PasswordReader__Handle p5, SWIGTYPE_p_Transaction__Handle p6) {
var tmpp1 = p1;
var tmpp2 = p2;
var tmpp3 = p3;
    {
      uint ret = skycoinPINVOKE.SKY_cli_CreateRawTxFromAddress(SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p0), tmpp1, tmpp2, tmpp3, GoSlice.getCPtr(p4), SWIGTYPE_p_PasswordReader__Handle.getCPtr(p5), SWIGTYPE_p_Transaction__Handle.getCPtr(p6));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cli_CreateRawTx(SWIGTYPE_p_WebRpcClient__Handle p0, SWIGTYPE_p_Wallet__Handle p1, GoSlice p2, string p3, GoSlice p4, GoSlice p5, SWIGTYPE_p_Transaction__Handle p6) {
var tmpp3 = p3;
    {
      uint ret = skycoinPINVOKE.SKY_cli_CreateRawTx(SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p0), SWIGTYPE_p_Wallet__Handle.getCPtr(p1), GoSlice.getCPtr(p2), tmpp3, GoSlice.getCPtr(p4), GoSlice.getCPtr(p5), SWIGTYPE_p_Transaction__Handle.getCPtr(p6));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cli_NewTransaction(GoSlice p0, GoSlice p1, GoSlice p2, SWIGTYPE_p_Transaction__Handle p3) {
    uint ret = skycoinPINVOKE.SKY_cli_NewTransaction(GoSlice.getCPtr(p0), GoSlice.getCPtr(p1), GoSlice.getCPtr(p2), SWIGTYPE_p_Transaction__Handle.getCPtr(p3));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_file_InitDataDir(string p0, _GoString_ p1) {
var tmpp0 = p0;
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_file_InitDataDir(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_file_UserHome(_GoString_ p0) {
var tmpp0 = _GoString_.getCPtr (p0);
    {
      uint ret = skycoinPINVOKE.SKY_file_UserHome(tmpp0);
      return ret;
    }
  }

  public static uint SKY_file_ResolveResourceDirectory(string p0, _GoString_ p1) {
var tmpp0 = p0;
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_file_ResolveResourceDirectory(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_file_DetermineResourcePath(string p0, string p1, string p2, _GoString_ p3) {
var tmpp0 = p0;
var tmpp1 = p1;
var tmpp2 = p2;
var tmpp3 = _GoString_.getCPtr (p3);
    {
      uint ret = skycoinPINVOKE.SKY_file_DetermineResourcePath(tmpp0, tmpp1, tmpp2, tmpp3);
      return ret;
    }
  }

  public static uint SKY_cipher_DecodeBase58BitcoinAddress(string p0, cipher__BitcoinAddress p1) {
var tmpp0 = p0;
    {
      uint ret = skycoinPINVOKE.SKY_cipher_DecodeBase58BitcoinAddress(tmpp0, cipher__BitcoinAddress.getCPtr(p1));
      return ret;
    }
  }

  public static void SKY_cipher_BitcoinAddressFromPubKey(cipher_PubKey p0, cipher__BitcoinAddress p1) {
var tmpp0 = cipher_PubKey.getCPtr (p0);
    {
      skycoinPINVOKE.SKY_cipher_BitcoinAddressFromPubKey(tmpp0, cipher__BitcoinAddress.getCPtr(p1));
    }
  }

  public static uint SKY_cipher_BitcoinAddressFromSecKey(cipher_SecKey p0, cipher__BitcoinAddress p1) {
var tmpp0 = cipher_SecKey.getCPtr (p0);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_BitcoinAddressFromSecKey(tmpp0, cipher__BitcoinAddress.getCPtr(p1));
      return ret;
    }
  }

  public static void SKY_cipher_BitcoinWalletImportFormatFromSeckey(cipher_SecKey p0, _GoString_ p1) {
var tmpp0 = cipher_SecKey.getCPtr (p0);
var tmpp1 = _GoString_.getCPtr (p1);
    {
      skycoinPINVOKE.SKY_cipher_BitcoinWalletImportFormatFromSeckey(tmpp0, tmpp1);
    }
  }

  public static uint SKY_cipher_BitcoinAddressFromBytes(GoSlice p0, cipher__BitcoinAddress p1) {
    uint ret = skycoinPINVOKE.SKY_cipher_BitcoinAddressFromBytes(GoSlice.getCPtr(p0), cipher__BitcoinAddress.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_cipher_SecKeyFromBitcoinWalletImportFormat(string p0, cipher_SecKey p1) {
var tmpp0 = p0;
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_SecKeyFromBitcoinWalletImportFormat(tmpp0, tmpp1);
      return ret;
    }
  }

  public static byte SKY_cipher_BitcoinAddress_Null(cipher__BitcoinAddress p0) {
    byte ret = skycoinPINVOKE.SKY_cipher_BitcoinAddress_Null(cipher__BitcoinAddress.getCPtr(p0));
    return ret;
  }

  public static void SKY_cipher_BitcoinAddress_Bytes(cipher__BitcoinAddress p0, GoSlice p1) {
    skycoinPINVOKE.SKY_cipher_BitcoinAddress_Bytes(cipher__BitcoinAddress.getCPtr(p0), GoSlice.getCPtr (p1));
  }

  public static uint SKY_cipher_BitcoinAddress_Verify(cipher__BitcoinAddress p0, cipher_PubKey p1) {
var tmpp1 = cipher_PubKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_BitcoinAddress_Verify(cipher__BitcoinAddress.getCPtr(p0), tmpp1);
      return ret;
    }
  }

  public static void SKY_cipher_BitcoinAddress_String(cipher__BitcoinAddress p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      skycoinPINVOKE.SKY_cipher_BitcoinAddress_String(cipher__BitcoinAddress.getCPtr(p0), tmpp1);
    }
  }

  public static void SKY_cipher_BitcoinAddress_Checksum(cipher__BitcoinAddress p0, SWIGTYPE_p_a_4__GoUint8_ p1) {
    skycoinPINVOKE.SKY_cipher_BitcoinAddress_Checksum(cipher__BitcoinAddress.getCPtr(p0), SWIGTYPE_p_a_4__GoUint8_.getCPtr(p1));
  }

  public static uint SKY_cli_GetWalletOutputsFromFile(SWIGTYPE_p_WebRpcClient__Handle p0, string p1, SWIGTYPE_p_ReadableUnspentOutputsSummary_Handle p2) {
var tmpp1 = p1;
    {
      uint ret = skycoinPINVOKE.SKY_cli_GetWalletOutputsFromFile(SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p0), tmpp1, SWIGTYPE_p_ReadableUnspentOutputsSummary_Handle.getCPtr(p2));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cli_GetWalletOutputs(SWIGTYPE_p_WebRpcClient__Handle p0, SWIGTYPE_p_Wallet__Handle p1, SWIGTYPE_p_ReadableUnspentOutputsSummary_Handle p2) {
    uint ret = skycoinPINVOKE.SKY_cli_GetWalletOutputs(SWIGTYPE_p_WebRpcClient__Handle.getCPtr(p0), SWIGTYPE_p_Wallet__Handle.getCPtr(p1), SWIGTYPE_p_ReadableUnspentOutputsSummary_Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_testutil_MakeAddress(cipher__Address p0) {
    uint ret = skycoinPINVOKE.SKY_testutil_MakeAddress(cipher__Address.getCPtr(p0));
    return ret;
  }

  public static uint SKY_cipher_Ripemd160_Set(cipher_Ripemd160 p0, GoSlice p1) {
var tmpp0 = cipher_Ripemd160.getCPtr (p0);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_Ripemd160_Set(tmpp0, GoSlice.getCPtr(p1));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cipher_HashRipemd160(GoSlice p0, cipher_Ripemd160 p1) {
var tmpp1 = cipher_Ripemd160.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_HashRipemd160(GoSlice.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cipher_SHA256_Set(cipher_SecKey p0, GoSlice p1) {
var tmpp0 = cipher_SecKey.getCPtr (p0);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_SHA256_Set__SWIG_1(tmpp0, GoSlice.getCPtr(p1));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cipher_SHA256_Hex(cipher_SecKey p0, _GoString_ p1) {
var tmpp0 = cipher_SecKey.getCPtr (p0);
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_SHA256_Hex__SWIG_1(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_cipher_SHA256_Xor(cipher_SecKey p0, cipher_SecKey p1, cipher_SecKey p2) {
var tmpp0 = cipher_SecKey.getCPtr (p0);
var tmpp1 = cipher_SecKey.getCPtr (p1);
var tmpp2 = cipher_SecKey.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_SHA256_Xor(tmpp0, tmpp1, tmpp2);
      return ret;
    }
  }

  public static uint SKY_cipher_SumSHA256(GoSlice p0, cipher_SecKey p1) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_SumSHA256__SWIG_1(GoSlice.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cipher_SHA256FromHex(string p0, cipher_SecKey p1) {
var tmpp0 = p0;
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_SHA256FromHex__SWIG_1(tmpp0, tmpp1);
      return ret;
    }
  }

  public static uint SKY_cipher_DoubleSHA256(GoSlice p0, cipher_SecKey p1) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_DoubleSHA256(GoSlice.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_cipher_AddSHA256(cipher_SecKey p0, cipher_SecKey p1, cipher_SecKey p2) {
var tmpp0 = cipher_SecKey.getCPtr (p0);
var tmpp1 = cipher_SecKey.getCPtr (p1);
var tmpp2 = cipher_SecKey.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_AddSHA256__SWIG_1(tmpp0, tmpp1, tmpp2);
      return ret;
    }
  }

  public static uint SKY_cipher_Merkle(GoSlice p0, cipher_SecKey p1) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_Merkle(GoSlice.getCPtr(p0), tmpp1);
      return ret;
    }
  }

  public static uint SKY_cipher_SHA256_Null(cipher_SecKey p0, SWIGTYPE_p_unsigned_char p1) {
var tmpp0 = cipher_SecKey.getCPtr (p0);
    {
      uint ret = skycoinPINVOKE.SKY_cipher_SHA256_Null(tmpp0, SWIGTYPE_p_unsigned_char.getCPtr(p1));
      return ret;
    }
  }

  public static uint SKY_coin_Create_Transaction(SWIGTYPE_p_Transaction__Handle p0) {
    uint ret = skycoinPINVOKE.SKY_coin_Create_Transaction(SWIGTYPE_p_Transaction__Handle.getCPtr(p0));
    return ret;
  }

  public static uint SKY_coin_Transaction_Copy(SWIGTYPE_p_Transaction__Handle p0, SWIGTYPE_p_Transaction__Handle p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_Copy(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), SWIGTYPE_p_Transaction__Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_GetTransactionObject(SWIGTYPE_p_Transaction__Handle p0, SWIGTYPE_p_p_coin__Transaction p1) {
    uint ret = skycoinPINVOKE.SKY_coin_GetTransactionObject__SWIG_1(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), SWIGTYPE_p_p_coin__Transaction.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_ResetInputs(SWIGTYPE_p_Transaction__Handle p0, long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_ResetInputs(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), p1);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_GetInputsCount(SWIGTYPE_p_Transaction__Handle p0, SWIGTYPE_p_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_GetInputsCount(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), SWIGTYPE_p_long_long.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_GetInputAt(SWIGTYPE_p_Transaction__Handle p0, long p1, cipher_SecKey p2) {
var tmpp2 = cipher_SecKey.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_coin_Transaction_GetInputAt__SWIG_1(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), p1, tmpp2);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_Transaction_SetInputAt(SWIGTYPE_p_Transaction__Handle p0, long p1, cipher_SecKey p2) {
var tmpp2 = cipher_SecKey.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_coin_Transaction_SetInputAt__SWIG_1(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), p1, tmpp2);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_Transaction_GetOutputsCount(SWIGTYPE_p_Transaction__Handle p0, SWIGTYPE_p_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_GetOutputsCount(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), SWIGTYPE_p_long_long.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_GetOutputAt(SWIGTYPE_p_Transaction__Handle p0, long p1, coin__TransactionOutput p2) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_GetOutputAt(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), p1, coin__TransactionOutput.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_SetOutputAt(SWIGTYPE_p_Transaction__Handle p0, long p1, coin__TransactionOutput p2) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_SetOutputAt(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), p1, coin__TransactionOutput.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_GetSignaturesCount(SWIGTYPE_p_Transaction__Handle p0, SWIGTYPE_p_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_GetSignaturesCount(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), SWIGTYPE_p_long_long.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_GetSignatureAt(SWIGTYPE_p_Transaction__Handle p0, long p1, cipher_Sig p2) {
var tmpp2 = cipher_Sig.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_coin_Transaction_GetSignatureAt(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), p1, tmpp2);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_Transaction_SetSignatureAt(SWIGTYPE_p_Transaction__Handle p0, long p1, cipher_Sig p2) {
var tmpp2 = cipher_Sig.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_coin_Transaction_SetSignatureAt(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), p1, tmpp2);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_Transaction_PushSignature(SWIGTYPE_p_Transaction__Handle p0, cipher_Sig p1) {
var tmpp1 = cipher_Sig.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_Transaction_PushSignature(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_Transaction_ResetOutputs(SWIGTYPE_p_Transaction__Handle p0, long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_ResetOutputs(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), p1);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_ResetSignatures(SWIGTYPE_p_Transaction__Handle p0, long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_ResetSignatures(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), p1);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_Verify(SWIGTYPE_p_Transaction__Handle p0) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_Verify(SWIGTYPE_p_Transaction__Handle.getCPtr(p0));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_VerifyInput(SWIGTYPE_p_Transaction__Handle p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_VerifyInput__SWIG_1(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), GoSlice.getCPtr (p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_PushInput(SWIGTYPE_p_Transaction__Handle p0, cipher_SecKey p1, SWIGTYPE_p_unsigned_short p2) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_Transaction_PushInput__SWIG_1(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), tmpp1, SWIGTYPE_p_unsigned_short.getCPtr(p2));
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_TransactionOutput_UxID(coin__TransactionOutput p0, cipher_SecKey p1, cipher_SecKey p2) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
var tmpp2 = cipher_SecKey.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_coin_TransactionOutput_UxID(coin__TransactionOutput.getCPtr(p0), tmpp1, tmpp2);
      return ret;
    }
  }

  public static uint SKY_coin_Transaction_PushOutput(SWIGTYPE_p_Transaction__Handle p0, cipher__Address p1, ulong p2, ulong p3) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_PushOutput(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), cipher__Address.getCPtr(p1), p2, p3);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_SignInputs(SWIGTYPE_p_Transaction__Handle p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_SignInputs__SWIG_1(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), GoSlice.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_Size(SWIGTYPE_p_Transaction__Handle p0, SWIGTYPE_p_unsigned_int p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_Size(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), SWIGTYPE_p_unsigned_int.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_Hash(SWIGTYPE_p_Transaction__Handle p0, cipher_SecKey p1) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_Transaction_Hash__SWIG_1(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_Transaction_SizeHash(SWIGTYPE_p_Transaction__Handle p0, SWIGTYPE_p_unsigned_int p1, cipher_SecKey p2) {
var tmpp2 = cipher_SecKey.getCPtr (p2);
    {
      uint ret = skycoinPINVOKE.SKY_coin_Transaction_SizeHash(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), SWIGTYPE_p_unsigned_int.getCPtr(p1), tmpp2);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_Transaction_TxID(SWIGTYPE_p_Transaction__Handle p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_TxID(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), GoSlice.getCPtr (p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_TxIDHex(SWIGTYPE_p_Transaction__Handle p0, _GoString_ p1) {
var tmpp1 = _GoString_.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_Transaction_TxIDHex(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_Transaction_UpdateHeader(SWIGTYPE_p_Transaction__Handle p0) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_UpdateHeader(SWIGTYPE_p_Transaction__Handle.getCPtr(p0));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_HashInner(SWIGTYPE_p_Transaction__Handle p0, cipher_SecKey p1) {
var tmpp1 = cipher_SecKey.getCPtr (p1);
    {
      uint ret = skycoinPINVOKE.SKY_coin_Transaction_HashInner__SWIG_1(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), tmpp1);
      if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static uint SKY_coin_Transaction_Serialize(SWIGTYPE_p_Transaction__Handle p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_Serialize(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), GoSlice.getCPtr (p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_TransactionDeserialize(GoSlice p0, SWIGTYPE_p_Transaction__Handle p1) {
    uint ret = skycoinPINVOKE.SKY_coin_TransactionDeserialize(GoSlice.getCPtr(p0), SWIGTYPE_p_Transaction__Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transaction_OutputHours(SWIGTYPE_p_Transaction__Handle p0, SWIGTYPE_p_unsigned_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transaction_OutputHours(SWIGTYPE_p_Transaction__Handle.getCPtr(p0), SWIGTYPE_p_unsigned_long_long.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Create_Transactions(SWIGTYPE_p_Transactions__Handle p0) {
    uint ret = skycoinPINVOKE.SKY_coin_Create_Transactions(SWIGTYPE_p_Transactions__Handle.getCPtr(p0));
    return ret;
  }

  public static uint SKY_coin_GetTransactionsObject(SWIGTYPE_p_Transactions__Handle p0, SWIGTYPE_p_p_GoSlice_ p1) {
    uint ret = skycoinPINVOKE.SKY_coin_GetTransactionsObject(SWIGTYPE_p_Transactions__Handle.getCPtr(p0), SWIGTYPE_p_p_GoSlice_.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transactions_Length(SWIGTYPE_p_Transactions__Handle p0, SWIGTYPE_p_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transactions_Length(SWIGTYPE_p_Transactions__Handle.getCPtr(p0), SWIGTYPE_p_long_long.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transactions_Add(SWIGTYPE_p_Transactions__Handle p0, SWIGTYPE_p_Transaction__Handle p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transactions_Add(SWIGTYPE_p_Transactions__Handle.getCPtr(p0), SWIGTYPE_p_Transaction__Handle.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transactions_Fees(SWIGTYPE_p_Transactions__Handle p0, SWIGTYPE_p_FeeCalculator p1, SWIGTYPE_p_unsigned_long_long p2) {
    uint ret = skycoinPINVOKE.SKY_coin_Transactions_Fees(SWIGTYPE_p_Transactions__Handle.getCPtr(p0), SWIGTYPE_p_FeeCalculator.getCPtr(p1), SWIGTYPE_p_unsigned_long_long.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transactions_GetAt(SWIGTYPE_p_Transactions__Handle p0, long p1, SWIGTYPE_p_Transaction__Handle p2) {
    uint ret = skycoinPINVOKE.SKY_coin_Transactions_GetAt(SWIGTYPE_p_Transactions__Handle.getCPtr(p0), p1, SWIGTYPE_p_Transaction__Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transactions_Hashes(SWIGTYPE_p_Transactions__Handle p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transactions_Hashes__SWIG_1(SWIGTYPE_p_Transactions__Handle.getCPtr(p0), GoSlice.getCPtr (p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transactions_Size(SWIGTYPE_p_Transactions__Handle p0, SWIGTYPE_p_unsigned_int p1) {
    uint ret = skycoinPINVOKE.SKY_coin_Transactions_Size(SWIGTYPE_p_Transactions__Handle.getCPtr(p0), SWIGTYPE_p_unsigned_int.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_Transactions_TruncateBytesTo(SWIGTYPE_p_Transactions__Handle p0, uint p1, SWIGTYPE_p_Transactions__Handle p2) {
    uint ret = skycoinPINVOKE.SKY_coin_Transactions_TruncateBytesTo(SWIGTYPE_p_Transactions__Handle.getCPtr(p0), p1, SWIGTYPE_p_Transactions__Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_SortTransactions(SWIGTYPE_p_Transactions__Handle p0, SWIGTYPE_p_FeeCalculator p1, SWIGTYPE_p_Transactions__Handle p2) {
    uint ret = skycoinPINVOKE.SKY_coin_SortTransactions(SWIGTYPE_p_Transactions__Handle.getCPtr(p0), SWIGTYPE_p_FeeCalculator.getCPtr(p1), SWIGTYPE_p_Transactions__Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_NewSortableTransactions(SWIGTYPE_p_Transactions__Handle p0, SWIGTYPE_p_FeeCalculator p1, SWIGTYPE_p_SortableTransactionResult_Handle p2) {
    uint ret = skycoinPINVOKE.SKY_coin_NewSortableTransactions(SWIGTYPE_p_Transactions__Handle.getCPtr(p0), SWIGTYPE_p_FeeCalculator.getCPtr(p1), SWIGTYPE_p_SortableTransactionResult_Handle.getCPtr(p2));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_SortableTransactions_Sort(SWIGTYPE_p_SortableTransactionResult_Handle p0) {
    uint ret = skycoinPINVOKE.SKY_coin_SortableTransactions_Sort(SWIGTYPE_p_SortableTransactionResult_Handle.getCPtr(p0));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_SortableTransactions_Len(SWIGTYPE_p_SortableTransactionResult_Handle p0, SWIGTYPE_p_long_long p1) {
    uint ret = skycoinPINVOKE.SKY_coin_SortableTransactions_Len(SWIGTYPE_p_SortableTransactionResult_Handle.getCPtr(p0), SWIGTYPE_p_long_long.getCPtr(p1));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_SortableTransactions_Less(SWIGTYPE_p_SortableTransactionResult_Handle p0, long p1, long p2, SWIGTYPE_p_unsigned_char p3) {
    uint ret = skycoinPINVOKE.SKY_coin_SortableTransactions_Less(SWIGTYPE_p_SortableTransactionResult_Handle.getCPtr(p0), p1, p2, SWIGTYPE_p_unsigned_char.getCPtr(p3));
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_SortableTransactions_Swap(SWIGTYPE_p_SortableTransactionResult_Handle p0, long p1, long p2) {
    uint ret = skycoinPINVOKE.SKY_coin_SortableTransactions_Swap(SWIGTYPE_p_SortableTransactionResult_Handle.getCPtr(p0), p1, p2);
    if (skycoinPINVOKE.SWIGPendingException.Pending) throw skycoinPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint SKY_coin_VerifyTransactionCoinsSpending(GoSlice p0, GoSlice p1) {
    uint ret = skycoinPINVOKE.SKY_coin_VerifyTransactionCoinsSpending__SWIG_1(GoSlice.getCPtr (p0), GoSlice.getCPtr (p1));
    return ret;
  }

  public static uint SKY_coin_VerifyTransactionHoursSpending(ulong p0, GoSlice p1, GoSlice p2) {
    uint ret = skycoinPINVOKE.SKY_coin_VerifyTransactionHoursSpending__SWIG_1(p0, GoSlice.getCPtr (p1), GoSlice.getCPtr (p2));
    return ret;
  }

  public static readonly int SKY_OK = skycoinPINVOKE.get_SKY_OK();
  public static readonly int SKY_ERROR = skycoinPINVOKE.get_SKY_ERROR();
  public static readonly int SKY_BAD_HANDLE = skycoinPINVOKE.get_SKY_BAD_HANDLE();
  public static readonly int SKY_INVALID_TIMESTRING = skycoinPINVOKE.get_SKY_INVALID_TIMESTRING();
  public static readonly int SKY_PKG_API = skycoinPINVOKE.get_SKY_PKG_API();
  public static readonly int SKY_PKG_CIPHER = skycoinPINVOKE.get_SKY_PKG_CIPHER();
  public static readonly int SKY_PKG_CLI = skycoinPINVOKE.get_SKY_PKG_CLI();
  public static readonly int SKY_PKG_COIN = skycoinPINVOKE.get_SKY_PKG_COIN();
  public static readonly int SKY_PKG_CONSENSUS = skycoinPINVOKE.get_SKY_PKG_CONSENSUS();
  public static readonly int SKY_PKG_DAEMON = skycoinPINVOKE.get_SKY_PKG_DAEMON();
  public static readonly int SKY_PKG_GUI = skycoinPINVOKE.get_SKY_PKG_GUI();
  public static readonly int SKY_PKG_SKYCOIN = skycoinPINVOKE.get_SKY_PKG_SKYCOIN();
  public static readonly int SKY_PKG_UTIL = skycoinPINVOKE.get_SKY_PKG_UTIL();
  public static readonly int SKY_PKG_VISOR = skycoinPINVOKE.get_SKY_PKG_VISOR();
  public static readonly int SKY_PKG_WALLET = skycoinPINVOKE.get_SKY_PKG_WALLET();
  public static readonly int SKY_PKG_PARAMS = skycoinPINVOKE.get_SKY_PKG_PARAMS();
  public static readonly int SKY_PKG_LIBCGO = skycoinPINVOKE.get_SKY_PKG_LIBCGO();
  public static readonly int SKY_ErrAddressInvalidLength = skycoinPINVOKE.get_SKY_ErrAddressInvalidLength();
  public static readonly int SKY_ErrAddressInvalidChecksum = skycoinPINVOKE.get_SKY_ErrAddressInvalidChecksum();
  public static readonly int SKY_ErrAddressInvalidVersion = skycoinPINVOKE.get_SKY_ErrAddressInvalidVersion();
  public static readonly int SKY_ErrAddressInvalidPubKey = skycoinPINVOKE.get_SKY_ErrAddressInvalidPubKey();
  public static readonly int SKY_ErrAddressInvalidFirstByte = skycoinPINVOKE.get_SKY_ErrAddressInvalidFirstByte();
  public static readonly int SKY_ErrAddressInvalidLastByte = skycoinPINVOKE.get_SKY_ErrAddressInvalidLastByte();
  public static readonly int SKY_ErrBufferUnderflow = skycoinPINVOKE.get_SKY_ErrBufferUnderflow();
  public static readonly int SKY_ErrInvalidOmitEmpty = skycoinPINVOKE.get_SKY_ErrInvalidOmitEmpty();
  public static readonly int SKY_ErrInvalidLengthPubKey = skycoinPINVOKE.get_SKY_ErrInvalidLengthPubKey();
  public static readonly int SKY_ErrPubKeyFromNullSecKey = skycoinPINVOKE.get_SKY_ErrPubKeyFromNullSecKey();
  public static readonly int SKY_ErrPubKeyFromBadSecKey = skycoinPINVOKE.get_SKY_ErrPubKeyFromBadSecKey();
  public static readonly int SKY_ErrInvalidLengthSecKey = skycoinPINVOKE.get_SKY_ErrInvalidLengthSecKey();
  public static readonly int SKY_ErrECHDInvalidPubKey = skycoinPINVOKE.get_SKY_ErrECHDInvalidPubKey();
  public static readonly int SKY_ErrECHDInvalidSecKey = skycoinPINVOKE.get_SKY_ErrECHDInvalidSecKey();
  public static readonly int SKY_ErrInvalidLengthSig = skycoinPINVOKE.get_SKY_ErrInvalidLengthSig();
  public static readonly int SKY_ErrInvalidLengthRipemd160 = skycoinPINVOKE.get_SKY_ErrInvalidLengthRipemd160();
  public static readonly int SKY_ErrInvalidLengthSHA256 = skycoinPINVOKE.get_SKY_ErrInvalidLengthSHA256();
  public static readonly int SKY_ErrInvalidBase58Char = skycoinPINVOKE.get_SKY_ErrInvalidBase58Char();
  public static readonly int SKY_ErrInvalidBase58String = skycoinPINVOKE.get_SKY_ErrInvalidBase58String();
  public static readonly int SKY_ErrInvalidBase58Length = skycoinPINVOKE.get_SKY_ErrInvalidBase58Length();
  public static readonly int SKY_ErrInvalidHexLength = skycoinPINVOKE.get_SKY_ErrInvalidHexLength();
  public static readonly int SKY_ErrInvalidBytesLength = skycoinPINVOKE.get_SKY_ErrInvalidBytesLength();
  public static readonly int SKY_ErrInvalidPubKey = skycoinPINVOKE.get_SKY_ErrInvalidPubKey();
  public static readonly int SKY_ErrInvalidSecKey = skycoinPINVOKE.get_SKY_ErrInvalidSecKey();
  public static readonly int SKY_ErrInvalidSigPubKeyRecovery = skycoinPINVOKE.get_SKY_ErrInvalidSigPubKeyRecovery();
  public static readonly int SKY_ErrInvalidSecKeyHex = skycoinPINVOKE.get_SKY_ErrInvalidSecKeyHex();
  public static readonly int SKY_ErrInvalidAddressForSig = skycoinPINVOKE.get_SKY_ErrInvalidAddressForSig();
  public static readonly int SKY_ErrInvalidHashForSig = skycoinPINVOKE.get_SKY_ErrInvalidHashForSig();
  public static readonly int SKY_ErrPubKeyRecoverMismatch = skycoinPINVOKE.get_SKY_ErrPubKeyRecoverMismatch();
  public static readonly int SKY_ErrInvalidSigInvalidPubKey = skycoinPINVOKE.get_SKY_ErrInvalidSigInvalidPubKey();
  public static readonly int SKY_ErrInvalidSigValidity = skycoinPINVOKE.get_SKY_ErrInvalidSigValidity();
  public static readonly int SKY_ErrInvalidSigForMessage = skycoinPINVOKE.get_SKY_ErrInvalidSigForMessage();
  public static readonly int SKY_ErrInvalidSecKyVerification = skycoinPINVOKE.get_SKY_ErrInvalidSecKyVerification();
  public static readonly int SKY_ErrNullPubKeyFromSecKey = skycoinPINVOKE.get_SKY_ErrNullPubKeyFromSecKey();
  public static readonly int SKY_ErrInvalidDerivedPubKeyFromSecKey = skycoinPINVOKE.get_SKY_ErrInvalidDerivedPubKeyFromSecKey();
  public static readonly int SKY_ErrInvalidPubKeyFromHash = skycoinPINVOKE.get_SKY_ErrInvalidPubKeyFromHash();
  public static readonly int SKY_ErrPubKeyFromSecKeyMismatch = skycoinPINVOKE.get_SKY_ErrPubKeyFromSecKeyMismatch();
  public static readonly int SKY_ErrInvalidLength = skycoinPINVOKE.get_SKY_ErrInvalidLength();
  public static readonly int SKY_ErrBitcoinWIFInvalidFirstByte = skycoinPINVOKE.get_SKY_ErrBitcoinWIFInvalidFirstByte();
  public static readonly int SKY_ErrBitcoinWIFInvalidSuffix = skycoinPINVOKE.get_SKY_ErrBitcoinWIFInvalidSuffix();
  public static readonly int SKY_ErrBitcoinWIFInvalidChecksum = skycoinPINVOKE.get_SKY_ErrBitcoinWIFInvalidChecksum();
  public static readonly int SKY_ErrEmptySeed = skycoinPINVOKE.get_SKY_ErrEmptySeed();
  public static readonly int SKY_ErrInvalidSig = skycoinPINVOKE.get_SKY_ErrInvalidSig();
  public static readonly int SKY_ErrMissingPassword = skycoinPINVOKE.get_SKY_ErrMissingPassword();
  public static readonly int SKY_ErrDataTooLarge = skycoinPINVOKE.get_SKY_ErrDataTooLarge();
  public static readonly int SKY_ErrInvalidChecksumLength = skycoinPINVOKE.get_SKY_ErrInvalidChecksumLength();
  public static readonly int SKY_ErrInvalidChecksum = skycoinPINVOKE.get_SKY_ErrInvalidChecksum();
  public static readonly int SKY_ErrInvalidNonceLength = skycoinPINVOKE.get_SKY_ErrInvalidNonceLength();
  public static readonly int SKY_ErrInvalidBlockSize = skycoinPINVOKE.get_SKY_ErrInvalidBlockSize();
  public static readonly int SKY_ErrReadDataHashFailed = skycoinPINVOKE.get_SKY_ErrReadDataHashFailed();
  public static readonly int SKY_ErrInvalidPassword = skycoinPINVOKE.get_SKY_ErrInvalidPassword();
  public static readonly int SKY_ErrReadDataLengthFailed = skycoinPINVOKE.get_SKY_ErrReadDataLengthFailed();
  public static readonly int SKY_ErrInvalidDataLength = skycoinPINVOKE.get_SKY_ErrInvalidDataLength();
  public static readonly int SKY_ErrTemporaryInsufficientBalance = skycoinPINVOKE.get_SKY_ErrTemporaryInsufficientBalance();
  public static readonly int SKY_ErrAddress = skycoinPINVOKE.get_SKY_ErrAddress();
  public static readonly int SKY_ErrWalletName = skycoinPINVOKE.get_SKY_ErrWalletName();
  public static readonly int SKY_ErrJSONMarshal = skycoinPINVOKE.get_SKY_ErrJSONMarshal();
  public static readonly int SKY_WalletLoadError = skycoinPINVOKE.get_SKY_WalletLoadError();
  public static readonly int SKY_WalletSaveError = skycoinPINVOKE.get_SKY_WalletSaveError();
  public static readonly int SKY_ErrAddEarnedCoinHoursAdditionOverflow = skycoinPINVOKE.get_SKY_ErrAddEarnedCoinHoursAdditionOverflow();
  public static readonly int SKY_ErrUint64MultOverflow = skycoinPINVOKE.get_SKY_ErrUint64MultOverflow();
  public static readonly int SKY_ErrUint64AddOverflow = skycoinPINVOKE.get_SKY_ErrUint64AddOverflow();
  public static readonly int SKY_ErrUint32AddOverflow = skycoinPINVOKE.get_SKY_ErrUint32AddOverflow();
  public static readonly int SKY_ErrUint64OverflowsInt64 = skycoinPINVOKE.get_SKY_ErrUint64OverflowsInt64();
  public static readonly int SKY_ErrInt64UnderflowsUint64 = skycoinPINVOKE.get_SKY_ErrInt64UnderflowsUint64();
  public static readonly int SKY_ErrIntUnderflowsUint32 = skycoinPINVOKE.get_SKY_ErrIntUnderflowsUint32();
  public static readonly int SKY_ErrIntOverflowsUint32 = skycoinPINVOKE.get_SKY_ErrIntOverflowsUint32();
  public static readonly int SKY_ErrPeerlistFull = skycoinPINVOKE.get_SKY_ErrPeerlistFull();
  public static readonly int SKY_ErrInvalidAddress = skycoinPINVOKE.get_SKY_ErrInvalidAddress();
  public static readonly int SKY_ErrNoLocalhost = skycoinPINVOKE.get_SKY_ErrNoLocalhost();
  public static readonly int SKY_ErrNotExternalIP = skycoinPINVOKE.get_SKY_ErrNotExternalIP();
  public static readonly int SKY_ErrPortTooLow = skycoinPINVOKE.get_SKY_ErrPortTooLow();
  public static readonly int SKY_ErrBlacklistedAddress = skycoinPINVOKE.get_SKY_ErrBlacklistedAddress();
  public static readonly int SKY_ErrDisconnectWriteFailed = skycoinPINVOKE.get_SKY_ErrDisconnectWriteFailed();
  public static readonly int SKY_ErrDisconnectSetReadDeadlineFailed = skycoinPINVOKE.get_SKY_ErrDisconnectSetReadDeadlineFailed();
  public static readonly int SKY_ErrDisconnectInvalidMessageLength = skycoinPINVOKE.get_SKY_ErrDisconnectInvalidMessageLength();
  public static readonly int SKY_ErrDisconnectMalformedMessage = skycoinPINVOKE.get_SKY_ErrDisconnectMalformedMessage();
  public static readonly int SKY_ErrDisconnectUnknownMessage = skycoinPINVOKE.get_SKY_ErrDisconnectUnknownMessage();
  public static readonly int SKY_ErrConnectionPoolClosed = skycoinPINVOKE.get_SKY_ErrConnectionPoolClosed();
  public static readonly int SKY_ErrWriteQueueFull = skycoinPINVOKE.get_SKY_ErrWriteQueueFull();
  public static readonly int SKY_ErrNoReachableConnections = skycoinPINVOKE.get_SKY_ErrNoReachableConnections();
  public static readonly int SKY_ErrMaxDefaultConnectionsReached = skycoinPINVOKE.get_SKY_ErrMaxDefaultConnectionsReached();
  public static readonly int SKY_ErrDisconnectVersionNotSupported = skycoinPINVOKE.get_SKY_ErrDisconnectVersionNotSupported();
  public static readonly int SKY_ErrDisconnectIntroductionTimeout = skycoinPINVOKE.get_SKY_ErrDisconnectIntroductionTimeout();
  public static readonly int SKY_ErrDisconnectIsBlacklisted = skycoinPINVOKE.get_SKY_ErrDisconnectIsBlacklisted();
  public static readonly int SKY_ErrDisconnectSelf = skycoinPINVOKE.get_SKY_ErrDisconnectSelf();
  public static readonly int SKY_ErrDisconnectConnectedTwice = skycoinPINVOKE.get_SKY_ErrDisconnectConnectedTwice();
  public static readonly int SKY_ErrDisconnectIdle = skycoinPINVOKE.get_SKY_ErrDisconnectIdle();
  public static readonly int SKY_ErrDisconnectNoIntroduction = skycoinPINVOKE.get_SKY_ErrDisconnectNoIntroduction();
  public static readonly int SKY_ErrDisconnectIPLimitReached = skycoinPINVOKE.get_SKY_ErrDisconnectIPLimitReached();
  public static readonly int SKY_ErrDisconnectMaxDefaultConnectionReached = skycoinPINVOKE.get_SKY_ErrDisconnectMaxDefaultConnectionReached();
  public static readonly int SKY_ErrDisconnectMaxOutgoingConnectionsReached = skycoinPINVOKE.get_SKY_ErrDisconnectMaxOutgoingConnectionsReached();
  public static readonly int SKY_ConnectionError = skycoinPINVOKE.get_SKY_ConnectionError();
  public static readonly int SKY_ErrTxnNoFee = skycoinPINVOKE.get_SKY_ErrTxnNoFee();
  public static readonly int SKY_ErrTxnInsufficientFee = skycoinPINVOKE.get_SKY_ErrTxnInsufficientFee();
  public static readonly int SKY_ErrTxnInsufficientCoinHours = skycoinPINVOKE.get_SKY_ErrTxnInsufficientCoinHours();
  public static readonly int SKY_ErrNegativeValue = skycoinPINVOKE.get_SKY_ErrNegativeValue();
  public static readonly int SKY_ErrTooManyDecimals = skycoinPINVOKE.get_SKY_ErrTooManyDecimals();
  public static readonly int SKY_ErrTooLarge = skycoinPINVOKE.get_SKY_ErrTooLarge();
  public static readonly int SKY_ErrEmptyDirectoryName = skycoinPINVOKE.get_SKY_ErrEmptyDirectoryName();
  public static readonly int SKY_ErrDotDirectoryName = skycoinPINVOKE.get_SKY_ErrDotDirectoryName();
  public static readonly int SKY_ErrHistoryDBCorrupted = skycoinPINVOKE.get_SKY_ErrHistoryDBCorrupted();
  public static readonly int SKY_ErrUxOutNotExist = skycoinPINVOKE.get_SKY_ErrUxOutNotExist();
  public static readonly int SKY_ErrNoHeadBlock = skycoinPINVOKE.get_SKY_ErrNoHeadBlock();
  public static readonly int SKY_ErrMissingSignature = skycoinPINVOKE.get_SKY_ErrMissingSignature();
  public static readonly int SKY_ErrUnspentNotExist = skycoinPINVOKE.get_SKY_ErrUnspentNotExist();
  public static readonly int SKY_ErrVerifyStopped = skycoinPINVOKE.get_SKY_ErrVerifyStopped();
  public static readonly int SKY_ErrCreateBucketFailed = skycoinPINVOKE.get_SKY_ErrCreateBucketFailed();
  public static readonly int SKY_ErrBucketNotExist = skycoinPINVOKE.get_SKY_ErrBucketNotExist();
  public static readonly int SKY_ErrTxnViolatesHardConstraint = skycoinPINVOKE.get_SKY_ErrTxnViolatesHardConstraint();
  public static readonly int SKY_ErrTxnViolatesSoftConstraint = skycoinPINVOKE.get_SKY_ErrTxnViolatesSoftConstraint();
  public static readonly int SKY_ErrTxnViolatesUserConstraint = skycoinPINVOKE.get_SKY_ErrTxnViolatesUserConstraint();
  public static readonly int SKY_ErrInsufficientBalance = skycoinPINVOKE.get_SKY_ErrInsufficientBalance();
  public static readonly int SKY_ErrInsufficientHours = skycoinPINVOKE.get_SKY_ErrInsufficientHours();
  public static readonly int SKY_ErrZeroSpend = skycoinPINVOKE.get_SKY_ErrZeroSpend();
  public static readonly int SKY_ErrSpendingUnconfirmed = skycoinPINVOKE.get_SKY_ErrSpendingUnconfirmed();
  public static readonly int SKY_ErrInvalidEncryptedField = skycoinPINVOKE.get_SKY_ErrInvalidEncryptedField();
  public static readonly int SKY_ErrWalletEncrypted = skycoinPINVOKE.get_SKY_ErrWalletEncrypted();
  public static readonly int SKY_ErrWalletNotEncrypted = skycoinPINVOKE.get_SKY_ErrWalletNotEncrypted();
  public static readonly int SKY_ErrWalletMissingPassword = skycoinPINVOKE.get_SKY_ErrWalletMissingPassword();
  public static readonly int SKY_ErrMissingEncrypt = skycoinPINVOKE.get_SKY_ErrMissingEncrypt();
  public static readonly int SKY_ErrWalletInvalidPassword = skycoinPINVOKE.get_SKY_ErrWalletInvalidPassword();
  public static readonly int SKY_ErrMissingSeed = skycoinPINVOKE.get_SKY_ErrMissingSeed();
  public static readonly int SKY_ErrMissingAuthenticated = skycoinPINVOKE.get_SKY_ErrMissingAuthenticated();
  public static readonly int SKY_ErrWrongCryptoType = skycoinPINVOKE.get_SKY_ErrWrongCryptoType();
  public static readonly int SKY_ErrWalletNotExist = skycoinPINVOKE.get_SKY_ErrWalletNotExist();
  public static readonly int SKY_ErrSeedUsed = skycoinPINVOKE.get_SKY_ErrSeedUsed();
  public static readonly int SKY_ErrWalletAPIDisabled = skycoinPINVOKE.get_SKY_ErrWalletAPIDisabled();
  public static readonly int SKY_ErrSeedAPIDisabled = skycoinPINVOKE.get_SKY_ErrSeedAPIDisabled();
  public static readonly int SKY_ErrWalletNameConflict = skycoinPINVOKE.get_SKY_ErrWalletNameConflict();
  public static readonly int SKY_ErrInvalidHoursSelectionMode = skycoinPINVOKE.get_SKY_ErrInvalidHoursSelectionMode();
  public static readonly int SKY_ErrInvalidHoursSelectionType = skycoinPINVOKE.get_SKY_ErrInvalidHoursSelectionType();
  public static readonly int SKY_ErrUnknownAddress = skycoinPINVOKE.get_SKY_ErrUnknownAddress();
  public static readonly int SKY_ErrUnknownUxOut = skycoinPINVOKE.get_SKY_ErrUnknownUxOut();
  public static readonly int SKY_ErrNoUnspents = skycoinPINVOKE.get_SKY_ErrNoUnspents();
  public static readonly int SKY_ErrNullChangeAddress = skycoinPINVOKE.get_SKY_ErrNullChangeAddress();
  public static readonly int SKY_ErrMissingTo = skycoinPINVOKE.get_SKY_ErrMissingTo();
  public static readonly int SKY_ErrZeroCoinsTo = skycoinPINVOKE.get_SKY_ErrZeroCoinsTo();
  public static readonly int SKY_ErrNullAddressTo = skycoinPINVOKE.get_SKY_ErrNullAddressTo();
  public static readonly int SKY_ErrDuplicateTo = skycoinPINVOKE.get_SKY_ErrDuplicateTo();
  public static readonly int SKY_ErrMissingWalletID = skycoinPINVOKE.get_SKY_ErrMissingWalletID();
  public static readonly int SKY_ErrIncludesNullAddress = skycoinPINVOKE.get_SKY_ErrIncludesNullAddress();
  public static readonly int SKY_ErrDuplicateAddresses = skycoinPINVOKE.get_SKY_ErrDuplicateAddresses();
  public static readonly int SKY_ErrZeroToHoursAuto = skycoinPINVOKE.get_SKY_ErrZeroToHoursAuto();
  public static readonly int SKY_ErrMissingModeAuto = skycoinPINVOKE.get_SKY_ErrMissingModeAuto();
  public static readonly int SKY_ErrInvalidHoursSelMode = skycoinPINVOKE.get_SKY_ErrInvalidHoursSelMode();
  public static readonly int SKY_ErrInvalidModeManual = skycoinPINVOKE.get_SKY_ErrInvalidModeManual();
  public static readonly int SKY_ErrInvalidHoursSelType = skycoinPINVOKE.get_SKY_ErrInvalidHoursSelType();
  public static readonly int SKY_ErrMissingShareFactor = skycoinPINVOKE.get_SKY_ErrMissingShareFactor();
  public static readonly int SKY_ErrInvalidShareFactor = skycoinPINVOKE.get_SKY_ErrInvalidShareFactor();
  public static readonly int SKY_ErrShareFactorOutOfRange = skycoinPINVOKE.get_SKY_ErrShareFactorOutOfRange();
  public static readonly int SKY_ErrWalletConstraint = skycoinPINVOKE.get_SKY_ErrWalletConstraint();
  public static readonly int SKY_ErrDuplicateUxOuts = skycoinPINVOKE.get_SKY_ErrDuplicateUxOuts();
  public static readonly int SKY_ErrUnknownWalletID = skycoinPINVOKE.get_SKY_ErrUnknownWalletID();
  public static readonly int SKY_ErrVerifySignatureInvalidInputsNils = skycoinPINVOKE.get_SKY_ErrVerifySignatureInvalidInputsNils();
  public static readonly int SKY_ErrVerifySignatureInvalidSigLength = skycoinPINVOKE.get_SKY_ErrVerifySignatureInvalidSigLength();
  public static readonly int SKY_ErrVerifySignatureInvalidPubkeysLength = skycoinPINVOKE.get_SKY_ErrVerifySignatureInvalidPubkeysLength();
  public static readonly int SKY_ErrInvalidDecimals = skycoinPINVOKE.get_SKY_ErrInvalidDecimals();
}

}
