/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: skycoin.doe@example.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BlockTransactionVerbose has readable transaction data for transactions inside a block. It differs from Transaction in that it includes metadata for transaction inputs and the calculated coinhour fee spent by the block
    /// </summary>
    [DataContract]
    public partial class Apiv1pendingTxsTransaction :  IEquatable<Apiv1pendingTxsTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Apiv1pendingTxsTransaction" /> class.
        /// </summary>
        /// <param name="Fee">Fee.</param>
        /// <param name="Hash">Hash.</param>
        /// <param name="InnerHash">InnerHash.</param>
        /// <param name="Inputs">Inputs.</param>
        /// <param name="Length">Length.</param>
        /// <param name="Outputs">Outputs.</param>
        /// <param name="Sigs">Sigs.</param>
        /// <param name="Type">Type.</param>
        public Apiv1pendingTxsTransaction(int? Fee = default(int?), string Hash = default(string), string InnerHash = default(string), List<InlineResponse2003BodyInputs> Inputs = default(List<InlineResponse2003BodyInputs>), int? Length = default(int?), List<InlineResponse2003BodyOutputs> Outputs = default(List<InlineResponse2003BodyOutputs>), List<string> Sigs = default(List<string>), int? Type = default(int?))
        {
            this.Fee = Fee;
            this.Hash = Hash;
            this.InnerHash = InnerHash;
            this.Inputs = Inputs;
            this.Length = Length;
            this.Outputs = Outputs;
            this.Sigs = Sigs;
            this.Type = Type;
        }
        
        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public int? Fee { get; set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// Gets or Sets InnerHash
        /// </summary>
        [DataMember(Name="inner_hash", EmitDefaultValue=false)]
        public string InnerHash { get; set; }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [DataMember(Name="inputs", EmitDefaultValue=false)]
        public List<InlineResponse2003BodyInputs> Inputs { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public int? Length { get; set; }

        /// <summary>
        /// Gets or Sets Outputs
        /// </summary>
        [DataMember(Name="outputs", EmitDefaultValue=false)]
        public List<InlineResponse2003BodyOutputs> Outputs { get; set; }

        /// <summary>
        /// Gets or Sets Sigs
        /// </summary>
        [DataMember(Name="sigs", EmitDefaultValue=false)]
        public List<string> Sigs { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Apiv1pendingTxsTransaction {\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  InnerHash: ").Append(InnerHash).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  Sigs: ").Append(Sigs).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Apiv1pendingTxsTransaction);
        }

        /// <summary>
        /// Returns true if Apiv1pendingTxsTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of Apiv1pendingTxsTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Apiv1pendingTxsTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.InnerHash == input.InnerHash ||
                    (this.InnerHash != null &&
                    this.InnerHash.Equals(input.InnerHash))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Outputs == input.Outputs ||
                    this.Outputs != null &&
                    this.Outputs.SequenceEqual(input.Outputs)
                ) && 
                (
                    this.Sigs == input.Sigs ||
                    this.Sigs != null &&
                    this.Sigs.SequenceEqual(input.Sigs)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.InnerHash != null)
                    hashCode = hashCode * 59 + this.InnerHash.GetHashCode();
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Outputs != null)
                    hashCode = hashCode * 59 + this.Outputs.GetHashCode();
                if (this.Sigs != null)
                    hashCode = hashCode * 59 + this.Sigs.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
