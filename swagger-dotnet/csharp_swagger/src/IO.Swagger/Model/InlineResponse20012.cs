/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: skycoin.doe@example.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20012
    /// </summary>
    [DataContract]
    public partial class InlineResponse20012 :  IEquatable<InlineResponse20012>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20012" /> class.
        /// </summary>
        /// <param name="Announced">Announced.</param>
        /// <param name="_Checked">_Checked.</param>
        /// <param name="IsValid">IsValid.</param>
        /// <param name="Received">Received.</param>
        /// <param name="Transaction">Transaction.</param>
        public InlineResponse20012(string Announced = default(string), string _Checked = default(string), bool? IsValid = default(bool?), string Received = default(string), Apiv1pendingTxsTransaction Transaction = default(Apiv1pendingTxsTransaction))
        {
            this.Announced = Announced;
            this._Checked = _Checked;
            this.IsValid = IsValid;
            this.Received = Received;
            this.Transaction = Transaction;
        }
        
        /// <summary>
        /// Gets or Sets Announced
        /// </summary>
        [DataMember(Name="announced", EmitDefaultValue=false)]
        public string Announced { get; set; }

        /// <summary>
        /// Gets or Sets _Checked
        /// </summary>
        [DataMember(Name="checked", EmitDefaultValue=false)]
        public string _Checked { get; set; }

        /// <summary>
        /// Gets or Sets IsValid
        /// </summary>
        [DataMember(Name="is_valid", EmitDefaultValue=false)]
        public bool? IsValid { get; set; }

        /// <summary>
        /// Gets or Sets Received
        /// </summary>
        [DataMember(Name="received", EmitDefaultValue=false)]
        public string Received { get; set; }

        /// <summary>
        /// Gets or Sets Transaction
        /// </summary>
        [DataMember(Name="transaction", EmitDefaultValue=false)]
        public Apiv1pendingTxsTransaction Transaction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20012 {\n");
            sb.Append("  Announced: ").Append(Announced).Append("\n");
            sb.Append("  _Checked: ").Append(_Checked).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  Received: ").Append(Received).Append("\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20012);
        }

        /// <summary>
        /// Returns true if InlineResponse20012 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20012 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20012 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Announced == input.Announced ||
                    (this.Announced != null &&
                    this.Announced.Equals(input.Announced))
                ) && 
                (
                    this._Checked == input._Checked ||
                    (this._Checked != null &&
                    this._Checked.Equals(input._Checked))
                ) && 
                (
                    this.IsValid == input.IsValid ||
                    (this.IsValid != null &&
                    this.IsValid.Equals(input.IsValid))
                ) && 
                (
                    this.Received == input.Received ||
                    (this.Received != null &&
                    this.Received.Equals(input.Received))
                ) && 
                (
                    this.Transaction == input.Transaction ||
                    (this.Transaction != null &&
                    this.Transaction.Equals(input.Transaction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Announced != null)
                    hashCode = hashCode * 59 + this.Announced.GetHashCode();
                if (this._Checked != null)
                    hashCode = hashCode * 59 + this._Checked.GetHashCode();
                if (this.IsValid != null)
                    hashCode = hashCode * 59 + this.IsValid.GetHashCode();
                if (this.Received != null)
                    hashCode = hashCode * 59 + this.Received.GetHashCode();
                if (this.Transaction != null)
                    hashCode = hashCode * 59 + this.Transaction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
