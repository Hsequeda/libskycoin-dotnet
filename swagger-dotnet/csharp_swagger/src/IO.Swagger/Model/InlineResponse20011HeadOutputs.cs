/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * OpenAPI spec version: 0.25.0
 * Contact: skycoin.doe@example.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20011HeadOutputs
    /// </summary>
    [DataContract]
    public partial class InlineResponse20011HeadOutputs :  IEquatable<InlineResponse20011HeadOutputs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20011HeadOutputs" /> class.
        /// </summary>
        /// <param name="Address">Address.</param>
        /// <param name="BlockSeq">BlockSeq.</param>
        /// <param name="CalculatedHours">CalculatedHours.</param>
        /// <param name="Coins">Coins.</param>
        /// <param name="Hash">Hash.</param>
        /// <param name="Hours">Hours.</param>
        /// <param name="SrcTx">SrcTx.</param>
        /// <param name="Time">Time.</param>
        public InlineResponse20011HeadOutputs(string Address = default(string), long? BlockSeq = default(long?), long? CalculatedHours = default(long?), string Coins = default(string), string Hash = default(string), long? Hours = default(long?), string SrcTx = default(string), long? Time = default(long?))
        {
            this.Address = Address;
            this.BlockSeq = BlockSeq;
            this.CalculatedHours = CalculatedHours;
            this.Coins = Coins;
            this.Hash = Hash;
            this.Hours = Hours;
            this.SrcTx = SrcTx;
            this.Time = Time;
        }
        
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets BlockSeq
        /// </summary>
        [DataMember(Name="block_seq", EmitDefaultValue=false)]
        public long? BlockSeq { get; set; }

        /// <summary>
        /// Gets or Sets CalculatedHours
        /// </summary>
        [DataMember(Name="calculated_hours", EmitDefaultValue=false)]
        public long? CalculatedHours { get; set; }

        /// <summary>
        /// Gets or Sets Coins
        /// </summary>
        [DataMember(Name="coins", EmitDefaultValue=false)]
        public string Coins { get; set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// Gets or Sets Hours
        /// </summary>
        [DataMember(Name="hours", EmitDefaultValue=false)]
        public long? Hours { get; set; }

        /// <summary>
        /// Gets or Sets SrcTx
        /// </summary>
        [DataMember(Name="src_tx", EmitDefaultValue=false)]
        public string SrcTx { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public long? Time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20011HeadOutputs {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  BlockSeq: ").Append(BlockSeq).Append("\n");
            sb.Append("  CalculatedHours: ").Append(CalculatedHours).Append("\n");
            sb.Append("  Coins: ").Append(Coins).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  SrcTx: ").Append(SrcTx).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20011HeadOutputs);
        }

        /// <summary>
        /// Returns true if InlineResponse20011HeadOutputs instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20011HeadOutputs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20011HeadOutputs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.BlockSeq == input.BlockSeq ||
                    (this.BlockSeq != null &&
                    this.BlockSeq.Equals(input.BlockSeq))
                ) && 
                (
                    this.CalculatedHours == input.CalculatedHours ||
                    (this.CalculatedHours != null &&
                    this.CalculatedHours.Equals(input.CalculatedHours))
                ) && 
                (
                    this.Coins == input.Coins ||
                    (this.Coins != null &&
                    this.Coins.Equals(input.Coins))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Hours == input.Hours ||
                    (this.Hours != null &&
                    this.Hours.Equals(input.Hours))
                ) && 
                (
                    this.SrcTx == input.SrcTx ||
                    (this.SrcTx != null &&
                    this.SrcTx.Equals(input.SrcTx))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.BlockSeq != null)
                    hashCode = hashCode * 59 + this.BlockSeq.GetHashCode();
                if (this.CalculatedHours != null)
                    hashCode = hashCode * 59 + this.CalculatedHours.GetHashCode();
                if (this.Coins != null)
                    hashCode = hashCode * 59 + this.Coins.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.Hours != null)
                    hashCode = hashCode * 59 + this.Hours.GetHashCode();
                if (this.SrcTx != null)
                    hashCode = hashCode * 59 + this.SrcTx.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
